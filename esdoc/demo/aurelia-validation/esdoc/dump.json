[
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export {Utilities} from './validation/utilities';\nexport {ValidationConfig} from './validation/validation-config';\nexport {ValidationLocale} from './validation/validation-locale';\nexport * from './validation/validation-result';\nexport * from './validation/validation-rules';\nexport {Validation} from './validation/validation';\nexport {ValidateCustomAttribute} from './validation/validate-custom-attribute';\nexport {ValidateCustomAttributeViewStrategy} from './validation/validate-custom-attribute-view-strategy';\nexport {ensure} from './validation/decorators';\n\n\nimport {ValidationConfig} from './validation/validation-config';\nimport {Validation} from './validation/validation';\n\nexport function configure(aurelia, configCallback) {\n\n  aurelia.globalizeResources('./validation/validate-custom-attribute');\n  if(configCallback !== undefined && typeof(configCallback) === 'function')\n  {\n    configCallback(Validation.defaults);\n  }\n  aurelia.container.registerInstance(ValidationConfig, Validation.defaults);\n  return Validation.defaults.locale();\n}\n"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "configure",
    "memberof": "src/index.js",
    "longname": "src/index.js~configure",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/index.js",
    "importStyle": "{configure}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "aurelia",
        "types": [
          "*"
        ]
      },
      {
        "name": "configCallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/de-DE.js",
    "memberof": null,
    "longname": "src/resources/de-DE.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'wird benötigt',\n    'onValidateCallback' : 'ist kein gültiger Wert',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `darf nur alphanumerische Zeichen oder Leerzeichen beinhalten`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `darf nur alphanumerische Zeichen beinhalten`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `muss zwischen ${Utilities.getValue(threshold.minimumLength)} und ${Utilities.getValue(threshold.maximumLength)} Zeichen lang sein`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `muss zwischen ${Utilities.getValue(threshold.minimumValue)} und ${Utilities.getValue(threshold.maximumValue)} sein`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `ist kein gültiger Wert`\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `darf nur Zahlen beinhalten`;\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `ist keine gültige Email-Adresse`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n        return `sollte ${Utilities.getValue(threshold.otherValue)} sein`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n        return `sollte nicht ${Utilities.getValue(threshold.otherValue)} sein`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `darf nicht mit ${Utilities.getValue(threshold.otherValueLabel)} übereinstimmen`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `cannot not match ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `ist kein gültiger Wert`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `muss mindestens ${Utilities.getValue(threshold)} Zeichen lang sein`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `sollte ${Utilities.getValue(threshold)} oder mehr sein`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `darf nicht länger als ${Utilities.getValue(threshold)} Zeichen sein`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `muss geringer als ${Utilities.getValue(threshold)} sein`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `muss eine Nummer sein`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `ist kein gültiger Wert`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `ist kein gültiger Wert`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n        return `sollte eine Kombination aus Groß- und Kleinbuchstaben, sowie Zahlen und Sonderzeichen enthalten`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n        return `sollte zumindest ${Utilities.getValue(threshold)} der folgenden Gruppen enthalten: Kleinbuchstaben, Großbuchstaben, Zahlen oder Sonderzeichen`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/de-DE.js",
    "longname": "src/resources/de-DE.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/de-DE.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/en-US.js",
    "memberof": null,
    "longname": "src/resources/en-US.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'is required',\n    'onValidateCallback' : 'not a valid value',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `can contain only alphanumerical characters or spaces`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `can contain only alphanumerical characters`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `can contain only letters`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `can contain only letters or spaces`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `needs to be between ${Utilities.getValue(threshold.minimumLength)} and ${Utilities.getValue(threshold.maximumLength)} characters long`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `needs to be between ${Utilities.getValue(threshold.minimumValue)} and ${Utilities.getValue(threshold.maximumValue)}`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `not a valid value`\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `can contain only digits`;\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `is not a valid email address`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n      return `should be ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n        return `cannot be ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `does not match ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `cannot match ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `not a valid value`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `needs to be ${Utilities.getValue(threshold)} or more`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `needs to be at least ${Utilities.getValue(threshold)} characters long`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `needs to be more than ${Utilities.getValue(threshold)}`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `needs to be ${Utilities.getValue(threshold)} or less`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `cannot be longer then ${Utilities.getValue(threshold)} characters`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `needs to be less than ${Utilities.getValue(threshold)}`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `needs to be a number`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `not a valid value`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `not a valid value`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n      return `should contain a combination of lowercase letters, uppercase letters, digits and special characters`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n      return `should contain at least ${Utilities.getValue(threshold)} of the following groups: lowercase letters, uppercase letters, digits or special characters`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/en-US.js",
    "longname": "src/resources/en-US.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/en-US.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/es-MX.js",
    "memberof": null,
    "longname": "src/resources/es-MX.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n    settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n    },\n    messages:{\n      'isRequired': 'es obligatorio',\n      'onValidateCallback' : 'no es un valor valido', \n      'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n        return `solo puede contener caracteres alfanuméricos y espacios`;\n      },\n      'AlphaNumericValidationRule': (newValue, threshold) => {\n        return `solo puede contener caracteres alfanuméricos`;\n      },\n      'AlphaValidationRule' : (newValue, threshold) => {\n        return `solo puede contener letras`;\n      },\n      'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n        return `solo puede contener letras y espacios`;\n      },\n      'BetweenLengthValidationRule': (newValue, threshold) => {\n        return `debe ser entre ${Utilities.getValue(threshold.minimumLength)} y ${Utilities.getValue(threshold.maximumLength)} letras de largo`;\n      },\n      'BetweenValueValidationRule': (newValue, threshold) => {\n        return `debe tener un valor entre ${Utilities.getValue(threshold.minimumValue)} y ${Utilities.getValue(threshold.maximumValue)}`;\n      },\n      'CustomFunctionValidationRule': (newValue, threshold) => {\n        return `es un valor invalido`\n      },\n      'DigitValidationRule': (newValue, threshold) => {\n        return `solo puede contener numeros`;\n      },\n      'EmailValidationRule': (newValue, threshold) => {\n        return `no es un correo electrónico valido`;\n      },\n      'EqualityValidationRule': (newValue, threshold) => {\n          return `debe ser ${Utilities.getValue(threshold.otherValue)}`;\n      },\n      'InEqualityValidationRule' : (newValue, threshold) => {\n          return `no puede ser ${Utilities.getValue(threshold.otherValue)}`;\n      },\n      'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n        return `no es igual a ${Utilities.getValue(threshold.otherValueLabel)}`;\n      },\n      'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n        return `no puede ser igual a ${Utilities.getValue(threshold.otherValueLabel)}`;\n      },\n      'InCollectionValidationRule': (newValue, threshold) => {\n        return `no es un valor valido`;\n      },\n      'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n        return `debe ser ${Utilities.getValue(threshold)} o mayor`;\n      },\n      'MinimumLengthValidationRule': (newValue, threshold) => {\n        return `debe ser almenos de ${Utilities.getValue(threshold)} caracteres`;\n      },\n      'MinimumValueValidationRule': (newValue, threshold) => {\n        return `debe ser ${Utilities.getValue(threshold)} o superior`;\n      },\n      'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n        return `debe ser ${Utilities.getValue(threshold)} o menos`;\n      },\n      'MaximumLengthValidationRule': (newValue, threshold) => {\n        return `no puede medir más de ${Utilities.getValue(threshold)} caracteres`;\n      },\n      'MaximumValueValidationRule': (newValue, threshold) => {\n        return `debe ser menor a ${Utilities.getValue(threshold)}`;\n      },\n      'NumericValidationRule': (newValue, threshold) => {\n        return `debe ser un numero`;\n      },\n      'RegexValidationRule': (newValue, threshold) => {\n        return `no es un valor valido`;\n      },\n      'ContainsOnlyValidationRule': (newValue, threshold) => {\n        return `no es un valor valido`;\n      },\n      'StrongPasswordValidationRule': (newValue, threshold) => {\n          return `debe contener una combinación de letras minúsculas, mayúsculas, dígitos y caracteres especiales`;\n      },\n      'MediumPasswordValidationRule' : (newValue, threshold) => {\n          return `debe poseer al menos ${Utilities.getValue(threshold)} de las siguientes características: letras minúsculas, letras mayúsculas, dígitos o caracteres especiales`;\n      }\n    }\n  };"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/es-MX.js",
    "longname": "src/resources/es-MX.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/es-MX.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/fr-FR.js",
    "memberof": null,
    "longname": "src/resources/fr-FR.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'est obligatoire',\n    'onValidateCallback' : `n'est pas une valeur valide`,\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `ne peut contenir que des caractères alphanumériques ou des espaces`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `ne peut contenir que des caractères alphanumériques`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `ne peut contenir que des lettres`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `ne peut contenir que des lettres ou des espaces`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `doit contenir de ${Utilities.getValue(threshold.minimumLength)} à ${Utilities.getValue(threshold.maximumLength)} caractères`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `doit être entre ${Utilities.getValue(threshold.minimumValue)} et ${Utilities.getValue(threshold.maximumValue)}`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `n'est pas une valeur valide`\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `doit contenir uniquement des caractères numériques`;\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `n'est pas une adresse email valide`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n      return `doit être ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n      return `ne peut pas être ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `doit correspondre à ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `ne doit pas correspondre à ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `n'est pas une valeur valide`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `doit être ${Utilities.getValue(threshold)} ou plus`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `doit contenir au moins ${Utilities.getValue(threshold)} caractères`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `doit être plus que ${Utilities.getValue(threshold)}`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `doit être moins que ${Utilities.getValue(threshold)}`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `ne doit pas contenir plus de ${Utilities.getValue(threshold)} caractères`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `doit être ${Utilities.getValue(threshold)} ou moins`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `doit être une valeur numérique`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `n'est pas une valeur valide`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `n'est pas une valeur valide`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n      return `doit contenir une combinaison de lettres minuscules, de lettres majuscules, de caractères numériques et de caractères spéciaux`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n      return `doit contenir au moins ${Utilities.getValue(threshold)} des caractéristiques suivantes : lettres minuscules, lettres majuscules, caractères numériques ou caractères spéciaux`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/fr-FR.js",
    "longname": "src/resources/fr-FR.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/fr-FR.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/nl-BE.js",
    "memberof": null,
    "longname": "src/resources/nl-BE.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'is verplicht',\n    'onValidateCallback' : 'geen geldige waarde',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `kan enkel alfanumerieke tekens of spaties bevatten`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `kan enkel alfanumerieke tekens bevatten`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `kan enkel letters bevatten`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `kan enkel letters of spaties bevatten`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `moet tussen ${Utilities.getValue(threshold.minimumLength)} en ${Utilities.getValue(threshold.maximumLength)} tekens lang zijn`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `moet tussen ${Utilities.getValue(threshold.minimumValue)} en ${Utilities.getValue(threshold.maximumValue)} zijn`;\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `mag enkel cijfers bevatten`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `geen geldige waarde`\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `is geen geldig email adres`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n      return `moet ${Utilities.getValue(threshold.otherValue)} zijn`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n      return `mag niet ${Utilities.getValue(threshold.otherValue)} zijn`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `moet overeen komen met ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `mag niet overeen komen met ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `moet op zijn minst ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `moet op zijn minst ${Utilities.getValue(threshold)} tekens lang zijn`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `moet op meer dan ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `moet op zijn meest ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `moet minder dan ${Utilities.getValue(threshold)} tekens lang zijn`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `moet minder dan ${Utilities.getValue(threshold)} zijn`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `moet een getal zijn`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n      return `moet een combinatie van letters, hoofdletters, cijfers en speciale tekens zijn`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n        return `moet op zijn minst ${Utilities.getValue(threshold)} van de volgende groepen bevatten: letters, hoofdletters, cijfers of speciale tekens`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/nl-BE.js",
    "longname": "src/resources/nl-BE.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/nl-BE.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/nl-NL.js",
    "memberof": null,
    "longname": "src/resources/nl-NL.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'is verplicht',\n    'onValidateCallback' : 'geen geldige waarde',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `kan enkel alfanumerieke tekens of spaties bevatten`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `kan enkel alfanumerieke tekens bevatten`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `kan enkel letters bevatten`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `kan enkel letters of spaties bevatten`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `moet tussen ${Utilities.getValue(threshold.minimumLength)} en ${Utilities.getValue(threshold.maximumLength)} tekens lang zijn`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `moet tussen ${Utilities.getValue(threshold.minimumValue)} en ${Utilities.getValue(threshold.maximumValue)} zijn`;\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `mag enkel cijfers bevatten`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `geen geldige waarde`\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `is geen geldig email adres`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n      return `moet ${Utilities.getValue(threshold.otherValue)} zijn`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n      return `mag niet ${Utilities.getValue(threshold.otherValue)} zijn`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `moet overeen komen met ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `mag niet overeen komen met ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `moet op zijn minst ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `moet op zijn minst ${Utilities.getValue(threshold)} tekens lang zijn`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `moet op meer dan ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `moet op zijn meest ${Utilities.getValue(threshold)} zijn`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `moet minder dan ${Utilities.getValue(threshold)} tekens lang zijn`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `moet minder dan ${Utilities.getValue(threshold)} zijn`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `moet een getal zijn`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `is geen geldige waarde`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n      return `moet een combinatie van letters, hoofdletters, cijfers en speciale tekens zijn`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n      return `moet op zijn minst ${Utilities.getValue(threshold)} van de volgende groepen bevatten: letters, hoofdletters, cijfers of speciale tekens`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/nl-NL.js",
    "longname": "src/resources/nl-NL.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/nl-NL.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/sv-SE.js",
    "memberof": null,
    "longname": "src/resources/sv-SE.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'är obligatoriskt',\n    'onValidateCallback' : 'är inte ett giltigt värde',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `kan enbart innehålla alfanumeriska tecken eller mellanslag`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `kan enbart innehålla alfanumeriska tecken`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `kan enbart innehålla bokstäver eller mellanslag`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `kan enbart innehålla bokstäver`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `måste vara mellan ${Utilities.getValue(threshold.minimumLength)} och ${Utilities.getValue(threshold.maximumLength)} tecken långt`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `måste vara mellan ${Utilities.getValue(threshold.minimumValue)} och ${Utilities.getValue(threshold.maximumValue)}`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `är inte ett giltigt värde`\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `kan bara innehålla siffror`;\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `är inte en giltig e-postadress`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n        return `ska vara ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n        return `kan inte vara ${Utilities.getValue(threshold.otherValue)}`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `matchar inte ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `får inte matcha ${Utilities.getValue(threshold.otherValueLabel)}`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `är inget giltigt värde`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `måste vara ${Utilities.getValue(threshold)} eller mer`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `behöver vara minst ${Utilities.getValue(threshold)} tecken långt`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `måste vara mer än ${Utilities.getValue(threshold)}`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `måste vara ${Utilities.getValue(threshold)} eller mindre`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `kan inte vara längre än ${Utilities.getValue(threshold)} tecken`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `måste vara mindre än ${Utilities.getValue(threshold)}`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `måste vara ett nummer`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `är inte ett giltigt värde`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `är inte ett giltigt värde`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n        return `ska innehålla en kombination av gemener, versaler, siffror och specialtecken`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n      return `ska innehålla minst ${Utilities.getValue(threshold)} av följande grupperingar: gemener, versaler, siffror eller specialtecken`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/sv-SE.js",
    "longname": "src/resources/sv-SE.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/sv-SE.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/resources/tr-TR.js",
    "memberof": null,
    "longname": "src/resources/tr-TR.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\n\nexport let data = {\n  settings: {\n    'numericRegex': /^-?(?:\\d+)(?:\\,\\d+)?$/\n  },\n  messages: {\n    'isRequired': 'gereklidir',\n    'onValidateCallback' : 'geçerli bir değer giriniz',\n    'AlphaNumericOrWhitespaceValidationRule': (newValue, threshold) => {\n      return `sadece alfanumerik karakterler veya boşluk girebilirsiniz`;\n    },\n    'AlphaNumericValidationRule': (newValue, threshold) => {\n      return `sadece alfanumerik karakterleri girebilirsiniz`;\n    },\n    'AlphaValidationRule' : (newValue, threshold) => {\n      return `sadece harf veya boşluk girebilirsiniz`;\n    },\n    'AlphaOrWhitespaceValidationRule' : (newValue, threshold) => {\n      return `sadece harf veya boşluk girebilirsiniz`;\n    },\n    'BetweenLengthValidationRule': (newValue, threshold) => {\n      return `uzunluğu ${Utilities.getValue(threshold.minimumLength)} ile ${Utilities.getValue(threshold.maximumLength)} arasında olmalıdır`;\n    },\n    'BetweenValueValidationRule': (newValue, threshold) => {\n      return `${Utilities.getValue(threshold.minimumValue)} ile ${Utilities.getValue(threshold.maximumValue)} arasında bir değer giriniz`;\n    },\n    'CustomFunctionValidationRule': (newValue, threshold) => {\n      return `geçerli bir değer giriniz`\n    },\n    'DigitValidationRule': (newValue, threshold) => {\n      return `sadece rakam girebilirsiniz`;\n    },\n    'EmailValidationRule': (newValue, threshold) => {\n      return `geçerli bir e-posta giriniz`;\n    },\n    'EqualityValidationRule': (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold.otherValue)}''e eşit olmalıdır`;\n    },\n    'InEqualityValidationRule' : (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold.otherValue)}''den farklı olmalıdır`;\n    },\n    'EqualityWithOtherLabelValidationRule': (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold.otherValueLabel)}''e eşit olmalıdır`;\n    },\n    'InEqualityWithOtherLabelValidationRule' : (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold.otherValueLabel)}''den farklı olmalıdır`;\n    },\n    'InCollectionValidationRule': (newValue, threshold) => {\n      return `geçersiz değer`;\n    },\n    'MinimumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold)} veya daha fazla olmalıdır`;\n    },\n    'MinimumLengthValidationRule': (newValue, threshold) => {\n      return `değer en az ${Utilities.getValue(threshold)} karakter uzunluğunda olmalıdır`;\n    },\n    'MinimumValueValidationRule': (newValue, threshold) => {\n      return `daha fazla olmalıdır ${Utilities.getValue(threshold)}`;\n    },\n    'MaximumInclusiveValueValidationRule' : (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold)}''dan az olmalı`;\n    },\n    'MaximumLengthValidationRule': (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold)} karakterden uzun olmamalıdır`;\n    },\n    'MaximumValueValidationRule': (newValue, threshold) => {\n      return `değer ${Utilities.getValue(threshold)}''dan az olmalı`;\n    },\n    'NumericValidationRule': (newValue, threshold) => {\n      return `sadece sayı girebilirsiniz`;\n    },\n    'RegexValidationRule': (newValue, threshold) => {\n      return `geçerli bir değer giriniz`;\n    },\n    'ContainsOnlyValidationRule': (newValue, threshold) => {\n      return `geçerli bir değer giriniz`;\n    },\n    'StrongPasswordValidationRule': (newValue, threshold) => {\n      return `küçük harfler, büyük harfler, sayılar ve işaretlerin birleşimi olmalıdır`;\n    },\n    'MediumPasswordValidationRule' : (newValue, threshold) => {\n      return `küçük harfler, büyük harfler, sayılar veya işaretlerden en az ${Utilities.getValue(threshold)} değişik tip olmalı`;\n    }\n  }\n};\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "data",
    "memberof": "src/resources/tr-TR.js",
    "longname": "src/resources/tr-TR.js~data",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/resources/tr-TR.js",
    "importStyle": "{data}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/debouncer.js",
    "memberof": null,
    "longname": "src/validation/debouncer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Validation} from '../validation/validation';\n\nexport class Debouncer{\n  constructor(debounceTimeout){\n    this.currentFunction = null;\n    this.debounceTimeout = debounceTimeout;\n  }\n\n  debounce(func)\n  {\n    this.currentFunction = func;\n    setTimeout(() => {\n        if(func !== null && func !== undefined)\n        {\n          if(func === this.currentFunction) {\n            this.currentFunction = null;\n            func();\n          }\n        }\n    }, this.debounceTimeout);\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Debouncer",
    "memberof": "src/validation/debouncer.js",
    "longname": "src/validation/debouncer.js~Debouncer",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/debouncer.js",
    "importStyle": "{Debouncer}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "debounceTimeout",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentFunction",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#currentFunction",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "debounceTimeout",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#debounceTimeout",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "debounce",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#debounce",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentFunction",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#currentFunction",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentFunction",
    "memberof": "src/validation/debouncer.js~Debouncer",
    "longname": "src/validation/debouncer.js~Debouncer#currentFunction",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/decorators.js",
    "memberof": null,
    "longname": "src/validation/decorators.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "class ValidationMetadata\n{\n  constructor(){\n    this.properties = [];\n  }\n  getOrCreateProperty(propertyName)\n  {\n    var property = this.properties.find(x => x.propertyName === propertyName);\n    if(property === undefined)\n    {\n      property = new ValidationPropertyMetadata(propertyName);\n      this.properties.push(property);\n    }\n    return property;\n  }\n  setup(validation)\n  {\n    this.properties.forEach( (property) => {\n      property.setup(validation);\n    });\n  }\n}\nclass ValidationPropertyMetadata{\n  constructor(propertyName){\n    this.propertyName = propertyName;\n    this.setupSteps = [];\n  }\n  addSetupStep(setupStep){\n    this.setupSteps.push(setupStep);\n  }\n  setup(validation){\n    validation.ensure(this.propertyName);\n    this.setupSteps.forEach((setupStep) => {\n      setupStep(validation);\n    });\n  }\n}\n\n\nexport function ensure(setupStep){\n  return function(target, propertyName){\n    if(target._validationMetadata === undefined){\n      target._validationMetadata = new ValidationMetadata();\n    }\n    var property = target._validationMetadata.getOrCreateProperty(propertyName);\n    property.addSetupStep(setupStep);\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationMetadata",
    "memberof": "src/validation/decorators.js",
    "longname": "src/validation/decorators.js~ValidationMetadata",
    "access": null,
    "export": false,
    "importPath": "aurelia-validation/src/validation/decorators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/decorators.js~ValidationMetadata",
    "longname": "src/validation/decorators.js~ValidationMetadata#constructor",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "properties",
    "memberof": "src/validation/decorators.js~ValidationMetadata",
    "longname": "src/validation/decorators.js~ValidationMetadata#properties",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getOrCreateProperty",
    "memberof": "src/validation/decorators.js~ValidationMetadata",
    "longname": "src/validation/decorators.js~ValidationMetadata#getOrCreateProperty",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setup",
    "memberof": "src/validation/decorators.js~ValidationMetadata",
    "longname": "src/validation/decorators.js~ValidationMetadata#setup",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "validation",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationPropertyMetadata",
    "memberof": "src/validation/decorators.js",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata",
    "access": null,
    "export": false,
    "importPath": "aurelia-validation/src/validation/decorators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/decorators.js~ValidationPropertyMetadata",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata#constructor",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "propertyName",
    "memberof": "src/validation/decorators.js~ValidationPropertyMetadata",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata#propertyName",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "setupSteps",
    "memberof": "src/validation/decorators.js~ValidationPropertyMetadata",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata#setupSteps",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addSetupStep",
    "memberof": "src/validation/decorators.js~ValidationPropertyMetadata",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata#addSetupStep",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "setupStep",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setup",
    "memberof": "src/validation/decorators.js~ValidationPropertyMetadata",
    "longname": "src/validation/decorators.js~ValidationPropertyMetadata#setup",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "validation",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensure",
    "memberof": "src/validation/decorators.js",
    "longname": "src/validation/decorators.js~ensure",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/decorators.js",
    "importStyle": "{ensure}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "setupStep",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/path-observer.js",
    "memberof": null,
    "longname": "src/validation/path-observer.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\n\nexport class PathObserver {\n\n  constructor(observerLocator, subject, path) {\n    this.observerLocator = observerLocator;\n    this.path = path.split('.');\n    this.subject = subject;\n    this.observers = [];\n    this.callbacks = [];\n    if (this.path.length > 1)\n      this.observeParts();\n\n    //TODO: this should be replaced with reuse of the Binding system\n\n  }\n\n  observeParts(propertyName) {\n    //remove old chain until an observer returns non-null\n    if (propertyName !== undefined && propertyName !== null) {\n      for (let i = this.observers.length - 1; i >= 0; i--) {\n        let currentObserver = this.observers[i];\n        if (currentObserver.propertyName === propertyName) {\n          break;\n        }\n        var observer = this.observers.pop();\n        if (observer && observer.subscription) {\n          //cleanup\n          observer.subscription();\n        }\n      }\n    }\n\n    let currentSubject = this.subject;\n    //add new observers\n    var observersAreComplete = this.observers.length === this.path.length;\n    for (let i = 0; i < this.path.length; i++) {\n      let observer = this.observers[i];\n      if (!observer) {\n\n        let currentPath = this.path[i];\n        observer = this.observerLocator.getObserver(currentSubject, currentPath);\n        this.observers.push(observer);\n        let subscription = observer.subscribe((newValue, oldValue) => {\n          this.observeParts(observer.propertyName);\n        });\n        observer.subscription = subscription;\n      }\n\n\n      let currentValue = observer.getValue();\n      if (currentValue === undefined || currentValue === null) {\n        break;\n      }\n      else {\n        currentSubject = currentValue;\n      }\n    }\n\n    //if the last observer is the real one\n    if (!observersAreComplete && this.observers.length === this.path.length) {\n      var actualObserver = this.observers[this.observers.length - 1];\n      for (let i = 0; i < this.callbacks.length; i++) {\n        //TODO proper cleanup of callbacks!\n        actualObserver.subscribe(this.callbacks[i]);\n      }\n    }\n  }\n\n  observePart(part) {\n    if (part !== this.path[this.path.length - 1]) {\n      this.observerParts();\n    }\n  }\n\n  getObserver() {\n    if (this.path.length == 1)\n      return this.observerLocator.getObserver(this.subject, this.path[0]);\n    return this;\n  }\n\n\n  getValue() {\n    //Verify that all observers are current.\n    let expectedSubject = this.subject;\n    for (let i = 0; this.path.length; i++) {\n      let currentObserver = this.observers[i];\n      if (currentObserver === null || currentObserver === undefined) {\n        this.observeParts(this.path[i]);\n        currentObserver = this.observers[i];\n\n        if (currentObserver === null || currentObserver === undefined) {\n          break;\n        }\n      }\n      if (currentObserver.obj !== expectedSubject)\n      //Happens if you set a value somewhere along the binding path and immediately call getValue (on the very last observer)\n      {\n        this.observeParts(this.path[i - 1]);\n        break;\n      }\n      expectedSubject = currentObserver.getValue();\n    }\n\n\n    if (this.observers.length !== this.path.length)\n      return undefined; //Something along the binding path returned null/undefined\n    var value = this.observers[this.observers.length - 1].getValue();\n    return value;\n  }\n\n  subscribe(callback) {\n    this.callbacks.unshift(callback);\n    if (this.observers.length === this.path.length) {\n      return this.observers[this.observers.length - 1].subscribe(callback);\n    }\n    //TODO proper cleanup of callbacks\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PathObserver",
    "memberof": "src/validation/path-observer.js",
    "longname": "src/validation/path-observer.js~PathObserver",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/path-observer.js",
    "importStyle": "{PathObserver}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "observerLocator",
        "types": [
          "*"
        ]
      },
      {
        "name": "subject",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observerLocator",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#observerLocator",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "path",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#path",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subject",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#subject",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observers",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#observers",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "callbacks",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#callbacks",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observeParts",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#observeParts",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "observePart",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#observePart",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "part",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getObserver",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#getObserver",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValue",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#getValue",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "subscribe",
    "memberof": "src/validation/path-observer.js~PathObserver",
    "longname": "src/validation/path-observer.js~PathObserver#subscribe",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/utilities.js",
    "memberof": null,
    "longname": "src/validation/utilities.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export class Utilities {\n  constructor(){}\n\n  static getValue(val){\n    if(val !== undefined && typeof(val) === 'function')\n    {\n      return val();\n    }\n    return val;\n  }\n  static isEmptyValue(val) {\n    if (val === undefined) {\n      return true;\n    }\n    if (val === null) {\n      return true;\n    }\n    if (val === \"\") {\n      return true;\n    }\n    if (typeof (val) === 'string') {\n      if (String.prototype.trim) {\n        val = val.trim();\n      }\n      else {\n        val = val.replace(/^\\s+|\\s+$/g, '');\n      }\n    }\n\n    if (val.length !== undefined) {\n      return 0 === val.length;\n    }\n    return false;\n  }\n};\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Utilities",
    "memberof": "src/validation/utilities.js",
    "longname": "src/validation/utilities.js~Utilities",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/utilities.js",
    "importStyle": "{Utilities}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/utilities.js~Utilities",
    "longname": "src/validation/utilities.js~Utilities#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "getValue",
    "memberof": "src/validation/utilities.js~Utilities",
    "longname": "src/validation/utilities.js~Utilities.getValue",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isEmptyValue",
    "memberof": "src/validation/utilities.js~Utilities",
    "longname": "src/validation/utilities.js~Utilities.isEmptyValue",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validate-custom-attribute-view-strategy.js",
    "memberof": null,
    "longname": "src/validation/validate-custom-attribute-view-strategy.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export class ValidateCustomAttributeViewStrategyBase{\n  constructor(){\n    this.bindingPathAttributes = ['validate', 'value.bind', 'value.two-way'];\n  }\n\n  getValidationProperty(validation, element){\n    var atts = element.attributes;\n    for (let i = 0; i < this.bindingPathAttributes.length; i++) {\n      let attributeName = this.bindingPathAttributes[i];\n      if (atts[attributeName]) {\n        var bindingPath = atts[attributeName].value.trim();\n        if (bindingPath.indexOf('|') != -1)\n          bindingPath = bindingPath.split('|')[0].trim();\n        var validationProperty = validation.result.properties[bindingPath];\n\n        if (attributeName == 'validate' && (validationProperty === null || validationProperty === undefined)) {\n          //Dev explicitly stated to show validation on a field, but there's no rules for this field\n          //Hence, we add an empty validationProperty for that field, without any rules\n          //This way, when 'checkAll()' is called, the input element 'turns green'\n          validation.ensure(bindingPath);\n          validationProperty = validation.result.properties[bindingPath];\n        }\n        return validationProperty;\n      }\n    }\n    return null;\n  }\n\n  prepareElement(validationProperty, element){\n    throw Error('View strategy must implement prepareElement(validationProperty, element)');\n  }\n  updateElement(validationProperty, element){\n    throw Error('View strategy must implement updateElement(validationProperty, element)');\n  }\n}\n\nexport class TWBootstrapViewStrategy extends ValidateCustomAttributeViewStrategyBase {\n  constructor(appendMessageToInput, appendMessageToLabel,helpBlockClass)\n  {\n    super();\n    this.appendMessageToInput = appendMessageToInput;\n    this.appendMessageToLabel = appendMessageToLabel;\n    this.helpBlockClass = helpBlockClass;\n  }\n  searchFormGroup(currentElement, currentDepth) {\n    if (currentDepth === 5) {\n      return null;\n    }\n    if (currentElement.classList && currentElement.classList.contains('form-group')) {\n      return currentElement;\n    }\n    return this.searchFormGroup(currentElement.parentNode, 1 + currentDepth);\n  }\n  findLabels(formGroup, inputId) {\n    var labels = [];\n    this.findLabelsRecursively(formGroup, inputId, labels, 0);\n    return labels;\n  }\n\n  findLabelsRecursively(currentElement, inputId, currentLabels, currentDepth) {\n    if (currentDepth === 5) {\n      return;\n    }\n    if (currentElement.nodeName === \"LABEL\" &&\n      ((currentElement.attributes['for'] && currentElement.attributes['for'].value === inputId) ||\n      (!currentElement.attributes['for']))\n    ) {\n      currentLabels.push(currentElement);\n    }\n\n\n    for (let i = 0; i < currentElement.children.length; i++)\n      this.findLabelsRecursively(currentElement.children[i], inputId, currentLabels, 1 + currentDepth);\n  }\n\n\n  appendMessageToElement(element, validationProperty) {\n    var helpBlock = element.nextSibling;\n    if (helpBlock) {\n      if (!helpBlock.classList) {\n        helpBlock = null;\n      }\n      else if (!helpBlock.classList.contains(this.helpBlockClass)) {\n        helpBlock = null;\n      }\n    }\n\n    if (!helpBlock) {\n      helpBlock = document.createElement(\"p\");\n      helpBlock.classList.add('help-block');\n      helpBlock.classList.add(this.helpBlockClass);\n\n      if (element.nextSibling) {\n        element.parentNode.insertBefore(helpBlock, element.nextSibling);\n      }\n      else {\n        element.parentNode.appendChild(helpBlock);\n      }\n    }\n    if (validationProperty)\n      helpBlock.textContent = validationProperty.message;\n    else\n      helpBlock.textContent = '';\n  }\n\n\n  appendUIVisuals(validationProperty, currentElement) {\n    var formGroup = this.searchFormGroup(currentElement, 0);\n    if (formGroup) {\n      if (validationProperty && validationProperty.isDirty) {\n        if (validationProperty.isValid) {\n          formGroup.classList.remove('has-warning');\n          formGroup.classList.add('has-success');\n        }\n        else {\n          formGroup.classList.remove('has-success');\n          formGroup.classList.add('has-warning');\n        }\n      }\n      else {\n        formGroup.classList.remove('has-warning');\n        formGroup.classList.remove('has-success');\n      }\n      if (this.appendMessageToInput) {\n        this.appendMessageToElement(currentElement, validationProperty);\n      }\n      if (this.appendMessageToLabel) {\n        var labels = this.findLabels(formGroup, currentElement.id);\n        for (var ii = 0; ii < labels.length; ii++) {\n          var label = labels[ii];\n          this.appendMessageToElement(label, validationProperty);\n        }\n      }\n    }\n  }\n  prepareElement(validationProperty, element){\n    this.appendUIVisuals(null, element);\n  }\n  updateElement(validationProperty, element){\n    this.appendUIVisuals(validationProperty, element);\n  }\n}\nexport class ValidateCustomAttributeViewStrategy { }\nValidateCustomAttributeViewStrategy.TWBootstrapAppendToInput = new TWBootstrapViewStrategy(true, false, 'aurelia-validation-message');\nValidateCustomAttributeViewStrategy.TWBootstrapAppendToMessage = new TWBootstrapViewStrategy(false, true, 'aurelia-validation-message');\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidateCustomAttributeViewStrategyBase",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validate-custom-attribute-view-strategy.js",
    "importStyle": "{ValidateCustomAttributeViewStrategyBase}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "bindingPathAttributes",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase#bindingPathAttributes",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValidationProperty",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase#getValidationProperty",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "validation",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepareElement",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase#prepareElement",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateElement",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategyBase#updateElement",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TWBootstrapViewStrategy",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validate-custom-attribute-view-strategy.js",
    "importStyle": "{TWBootstrapViewStrategy}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidateCustomAttributeViewStrategyBase"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#constructor",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "appendMessageToInput",
        "types": [
          "*"
        ]
      },
      {
        "name": "appendMessageToLabel",
        "types": [
          "*"
        ]
      },
      {
        "name": "helpBlockClass",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "appendMessageToInput",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#appendMessageToInput",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "appendMessageToLabel",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#appendMessageToLabel",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "helpBlockClass",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#helpBlockClass",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "searchFormGroup",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#searchFormGroup",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "currentElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentDepth",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findLabels",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#findLabels",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "formGroup",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "findLabelsRecursively",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#findLabelsRecursively",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "currentElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputId",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentLabels",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentDepth",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendMessageToElement",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#appendMessageToElement",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendUIVisuals",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#appendUIVisuals",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentElement",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prepareElement",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#prepareElement",
    "access": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateElement",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~TWBootstrapViewStrategy#updateElement",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "validationProperty",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidateCustomAttributeViewStrategy",
    "memberof": "src/validation/validate-custom-attribute-view-strategy.js",
    "longname": "src/validation/validate-custom-attribute-view-strategy.js~ValidateCustomAttributeViewStrategy",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validate-custom-attribute-view-strategy.js",
    "importStyle": "{ValidateCustomAttributeViewStrategy}",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-config.js",
    "memberof": null,
    "longname": "src/validation/validation-config.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ValidationLocale} from '../validation/validation-locale';\nimport {ValidateCustomAttributeViewStrategy} from '../validation/validate-custom-attribute-view-strategy';\n\nexport class ValidationConfigDefaults{\n}\nValidationConfigDefaults._defaults = {\n  debounceTimeout : 0,\n  dependencies : [],\n  locale : 'en-US',\n  localeResources : 'aurelia-validation/resources/',\n  viewStrategy : ValidateCustomAttributeViewStrategy.TWBootstrapAppendToMessage\n};\nValidationConfigDefaults.defaults = function(){\n  var defaults = {};\n  Object.assign(defaults, ValidationConfigDefaults._defaults);\n  return defaults;\n};\n\nexport class ValidationConfig {\n\n  constructor(innerConfig)\n  {\n    this.innerConfig = innerConfig;\n    this.values = this.innerConfig ? { } : ValidationConfigDefaults.defaults();\n    this.changedHandlers = new Map();\n  }\n\n  getValue(identifier){\n    if(this.values.hasOwnProperty(identifier) !== null && this.values[identifier] !== undefined)\n    {\n      return this.values[identifier];\n    }\n    if(this.innerConfig !== null)\n    {\n      return this.innerConfig.getValue(identifier);\n    }\n    throw Error('Config not found: ' + identifier);\n  }\n  setValue(identifier, value){\n    this.values[identifier] = value;\n    return this; //fluent API\n  }\n\n  onLocaleChanged(callback) {\n    if(this.innerConfig !== undefined) {\n      return this.innerConfig.onLocaleChanged(callback);\n    }\n    else {\n      let id = ++ValidationConfig.uniqueListenerId;\n      this.changedHandlers.set(id, callback);\n      return () => {\n        changedHandlers.delete(id);\n      };\n    }\n  }\n\n  getDebounceTimeout(){\n    return this.getValue('debounceTimeout');\n  }\n  useDebounceTimeout(value)\n  {\n    return this.setValue('debounceTimeout', value);\n  }\n\n  getDependencies(){\n    return this.getValue('dependencies');\n  }\n\n  computedFrom(dependencies){\n    var deps = dependencies;\n    if(typeof(dependencies) === 'string')\n    {\n      deps = [];\n      deps.push(dependencies);\n    }\n    return this.setValue('dependencies', deps);\n  }\n\n  useLocale(localeIdentifier){\n    this.setValue('locale', localeIdentifier);\n    var callbacks = Array.from(this.changedHandlers.values());\n    for(let i = 0; i < callbacks.length; i++)\n    {\n      callbacks[i]();\n    }\n    return this;\n  }\n\n  locale(){\n    return ValidationLocale.Repository.load(this.getValue('locale'), this.getValue('localeResources'));\n  }\n\n  useViewStrategy(viewStrategy){\n    return this.setValue('viewStrategy', viewStrategy);\n  }\n\n  getViewStrategy()\n  {\n    return this.getValue('viewStrategy');\n  }\n\n}\nValidationConfig.uniqueListenerId = 0;\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationConfigDefaults",
    "memberof": "src/validation/validation-config.js",
    "longname": "src/validation/validation-config.js~ValidationConfigDefaults",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-config.js",
    "importStyle": "{ValidationConfigDefaults}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "defaults",
    "memberof": "src/validation/validation-config.js",
    "longname": "src/validation/validation-config.js~defaults",
    "access": null,
    "export": false,
    "importPath": "aurelia-validation/src/validation/validation-config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationConfig",
    "memberof": "src/validation/validation-config.js",
    "longname": "src/validation/validation-config.js~ValidationConfig",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-config.js",
    "importStyle": "{ValidationConfig}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#constructor",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "innerConfig",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "innerConfig",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#innerConfig",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "values",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#values",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "changedHandlers",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#changedHandlers",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValue",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#getValue",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setValue",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#setValue",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onLocaleChanged",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#onLocaleChanged",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDebounceTimeout",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#getDebounceTimeout",
    "access": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useDebounceTimeout",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#useDebounceTimeout",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDependencies",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#getDependencies",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "computedFrom",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#computedFrom",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "dependencies",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useLocale",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#useLocale",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "localeIdentifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "locale",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#locale",
    "access": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "useViewStrategy",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#useViewStrategy",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "viewStrategy",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getViewStrategy",
    "memberof": "src/validation/validation-config.js~ValidationConfig",
    "longname": "src/validation/validation-config.js~ValidationConfig#getViewStrategy",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-group-builder.js",
    "memberof": null,
    "longname": "src/validation/validation-group-builder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as AllRules from '../validation/validation-rules';\nimport * as AllCollections from '../validation/validation-rules-collection'\nimport {ValidationProperty} from '../validation/validation-property';\nimport {ValidationConfig} from '../validation/validation-config';\n\nexport class ValidationGroupBuilder {\n  constructor(observerLocator, validationGroup) {\n    this.observerLocator = observerLocator;\n    this.validationRuleCollections = []; //Flattened out queue of the nested collections\n    this.validationGroup = validationGroup;\n  }\n\n  ensure(propertyName, configurationCallback) {\n    var newValidationProperty = null;\n    this.validationRuleCollections = [];\n\n    for (let i = 0; i < this.validationGroup.validationProperties.length; i++) {\n      if (this.validationGroup.validationProperties[i].propertyName === propertyName) {\n        newValidationProperty = this.validationGroup.validationProperties[i];\n        if(configurationCallback !== undefined && typeof(configurationCallback) === 'function')\n        {\n          throw Error('When creating validation rules on binding path ' + propertyName + ' a configuration callback function was provided, but validation rules have previously already been instantiated for this binding path');\n        }\n        break;\n      }\n    }\n    if (newValidationProperty === null) {\n      var propertyResult = this.validationGroup.result.addProperty(propertyName);\n      var config = new ValidationConfig(this.validationGroup.config);\n      if(configurationCallback !== undefined && typeof(configurationCallback) === 'function')\n      {\n        configurationCallback(config);\n      }\n      newValidationProperty = new ValidationProperty(this.observerLocator, propertyName, this.validationGroup, propertyResult, config );\n      this.validationGroup.validationProperties.push(newValidationProperty);\n    }\n    this.validationRuleCollections.unshift(newValidationProperty.collectionOfValidationRules);\n    return this.validationGroup;\n  }\n\n  isNotEmpty() {\n    this.validationRuleCollections[0].isNotEmpty();\n    this.checkLast();\n    return this.validationGroup;\n  }\n\n  isGreaterThan(minimumValue) {\n    return this.passesRule(new AllRules.MinimumValueValidationRule(minimumValue));\n  }\n  isGreaterThanOrEqualTo(minimumValue) {\n    return this.passesRule(new AllRules.MinimumInclusiveValueValidationRule(minimumValue));\n  }\n\n  isBetween(minimumValue, maximumValue) {\n    return this.passesRule(new AllRules.BetweenValueValidationRule(minimumValue, maximumValue));\n  }\n\n  isIn(collection) {\n    return this.passesRule(new AllRules.InCollectionValidationRule(collection));\n  }\n\n  isLessThan(maximumValue) {\n    return this.passesRule(new AllRules.MaximumValueValidationRule(maximumValue));\n  }\n\n  isLessThanOrEqualTo(maximumValue) {\n    return this.passesRule(new AllRules.MaximumInclusiveValueValidationRule(maximumValue));\n  }\n\n  isEqualTo(otherValue, otherValueLabel) {\n    if(!otherValueLabel)\n      return this.passesRule(new AllRules.EqualityValidationRule(otherValue));\n    else\n      return this.passesRule(new AllRules.EqualityWithOtherLabelValidationRule(otherValue, otherValueLabel))\n  }\n\n  isNotEqualTo(otherValue, otherValueLabel) {\n    if(!otherValueLabel)\n      return this.passesRule(new AllRules.InEqualityValidationRule(otherValue));\n    else\n      return this.passesRule(new AllRules.InEqualityWithOtherLabelValidationRule(otherValue, otherValueLabel))\n  }\n\n  isEmail() {\n    return this.passesRule(new AllRules.EmailValidationRule());\n  }\n\n  hasMinLength(minimumValue) {\n    return this.passesRule(new AllRules.MinimumLengthValidationRule(minimumValue));\n  }\n\n  hasMaxLength(maximumValue) {\n    return this.passesRule(new AllRules.MaximumLengthValidationRule(maximumValue));\n  }\n\n  hasLengthBetween(minimumValue, maximumValue) {\n    return this.passesRule(new AllRules.BetweenLengthValidationRule(minimumValue, maximumValue));\n  }\n\n  isNumber() {\n    return this.passesRule(new AllRules.NumericValidationRule());\n  }\n\n  containsOnlyDigits() {\n    return this.passesRule(new AllRules.DigitValidationRule());\n  }\n\n  containsOnlyAlpha(){\n    return this.passesRule(new AllRules.AlphaValidationRule());\n  }\n\n  containsOnlyAlphaOrWhitespace(){\n    return this.passesRule(new AllRules.AlphaOrWhitespaceValidationRule());\n  }\n\n  containsOnlyAlphanumerics(){\n    return this.passesRule(new AllRules.AlphaNumericValidationRule());\n  }\n\n  containsOnlyAlphanumericsOrWhitespace() {\n    return this.passesRule(new AllRules.AlphaNumericOrWhitespaceValidationRule());\n  }\n\n  isStrongPassword(minimumComplexityLevel) {\n    if(minimumComplexityLevel === 4)\n      return this.passesRule(new AllRules.StrongPasswordValidationRule());\n    else\n      return this.passesRule(new AllRules.MediumPasswordValidationRule(minimumComplexityLevel));\n  }\n\n  containsOnly(regex)\n  {\n    return this.passesRule(new AllRules.ContainsOnlyValidationRule(regex));\n  }\n\n  matches(regex) {\n    return this.passesRule(new AllRules.RegexValidationRule(regex));\n  }\n\n  passes(customFunction, threshold) {\n    return this.passesRule(new AllRules.CustomFunctionValidationRule(customFunction, threshold));\n  }\n\n  passesRule(validationRule) {\n\n    this.validationRuleCollections[0].addValidationRule(validationRule);\n    this.checkLast();\n    return this.validationGroup;\n  }\n\n  checkLast() {\n    var validationProperty = this.validationGroup.validationProperties[this.validationGroup.validationProperties.length - 1];\n    validationProperty.validateCurrentValue(false);\n  }\n\n  withMessage(message) {\n    this.validationRuleCollections[0].withMessage(message);\n    this.checkLast();\n    return this.validationGroup;\n  }\n\n  if(conditionExpression) {\n    //IF is treated as a 'switch' with case 'true' and 'default'\n    var conditionalCollection = new AllCollections.SwitchCaseValidationRulesCollection(conditionExpression);\n    conditionalCollection.case(true);\n    this.validationRuleCollections[0].addValidationRuleCollection(conditionalCollection);\n    this.validationRuleCollections.unshift(conditionalCollection);\n    return this.validationGroup;\n  }\n\n  else() {\n    if (!this.validationRuleCollections[0].default)\n      throw 'Invalid statement: \\'else\\'';\n    //this.validationRuleCollections[0].case(false);\n    this.validationRuleCollections[0].default();//slightly less object creation then 'case false'\n    return this.validationGroup;\n  }\n\n  endIf() {\n    if (!this.validationRuleCollections[0].default)\n      throw 'Invalid statement: \\'endIf\\'';\n    this.validationRuleCollections.shift(); //go up one level in the nested collections\n    this.checkLast();\n    return this.validationGroup;\n  }\n\n  switch(conditionExpression) {\n    var condition = conditionExpression;\n    if (condition === undefined) {\n      let observer = this.validationGroup.validationProperties[this.validationGroup.validationProperties.length - 1].observer;\n      condition = () => {\n        return observer.getValue();\n      };\n    }\n    var conditionalCollection = new AllCollections.SwitchCaseValidationRulesCollection(condition);\n    this.validationRuleCollections[0].addValidationRuleCollection(conditionalCollection);\n    this.validationRuleCollections.unshift(conditionalCollection);\n    return this.validationGroup;\n  }\n\n  case(caseLabel) {\n    if (!this.validationRuleCollections[0].default)\n      throw 'Invalid statement: \\'case\\'';\n    this.validationRuleCollections[0].case(caseLabel);\n    return this.validationGroup;\n  }\n\n  default() {\n    if (!this.validationRuleCollections[0].default)\n      throw 'Invalid statement: \\'case\\'';\n    this.validationRuleCollections[0].default();\n    return this.validationGroup;\n  }\n\n  endSwitch() {\n    if (!this.validationRuleCollections[0].default)\n      throw 'Invalid statement: \\'endIf\\'';\n    this.validationRuleCollections.shift(); //go up one level in the nested collections\n    this.checkLast();\n    return this.validationGroup;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationGroupBuilder",
    "memberof": "src/validation/validation-group-builder.js",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-group-builder.js",
    "importStyle": "{ValidationGroupBuilder}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#constructor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "observerLocator",
        "types": [
          "*"
        ]
      },
      {
        "name": "validationGroup",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observerLocator",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#observerLocator",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationRuleCollections",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#validationRuleCollections",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationGroup",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#validationGroup",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ensure",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#ensure",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "configurationCallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationRuleCollections",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#validationRuleCollections",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEmpty",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isNotEmpty",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isGreaterThan",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isGreaterThan",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isGreaterThanOrEqualTo",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isGreaterThanOrEqualTo",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isBetween",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isBetween",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isIn",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isIn",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLessThan",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isLessThan",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLessThanOrEqualTo",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isLessThanOrEqualTo",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEqualTo",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isEqualTo",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherValueLabel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEqualTo",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isNotEqualTo",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherValueLabel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmail",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isEmail",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasMinLength",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#hasMinLength",
    "access": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasMaxLength",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#hasMaxLength",
    "access": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasLengthBetween",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#hasLengthBetween",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNumber",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isNumber",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyDigits",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnlyDigits",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlpha",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnlyAlpha",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphaOrWhitespace",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnlyAlphaOrWhitespace",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphanumerics",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnlyAlphanumerics",
    "access": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphanumericsOrWhitespace",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnlyAlphanumericsOrWhitespace",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isStrongPassword",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#isStrongPassword",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "minimumComplexityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnly",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#containsOnly",
    "access": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "matches",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#matches",
    "access": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "passes",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#passes",
    "access": null,
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "customFunction",
        "types": [
          "*"
        ]
      },
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "passesRule",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#passesRule",
    "access": null,
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "validationRule",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkLast",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#checkLast",
    "access": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "withMessage",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#withMessage",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "if",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#if",
    "access": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "conditionExpression",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "else",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#else",
    "access": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "endIf",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#endIf",
    "access": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "switch",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#switch",
    "access": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "conditionExpression",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "case",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#case",
    "access": null,
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "caseLabel",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#default",
    "access": null,
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "endSwitch",
    "memberof": "src/validation/validation-group-builder.js~ValidationGroupBuilder",
    "longname": "src/validation/validation-group-builder.js~ValidationGroupBuilder#endSwitch",
    "access": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-group.js",
    "memberof": null,
    "longname": "src/validation/validation-group.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ValidationGroupBuilder} from '../validation/validation-group-builder';\nimport {ValidationResult} from '../validation/validation-result';\nimport {ValidationLocale} from '../validation/validation-locale';\n\n\n/**\n * Encapsulates validation rules and their current validation state for a given subject\n * @class ValidationGroup\n * @constructor\n */\nexport class ValidationGroup {\n  /**\n   * Instantiates a new {ValidationGroup}\n   * @param subject The subject to evaluate\n   * @param observerLocator The observerLocator used to monitor changes on the subject\n   * @param config The configuration\n   */\n  constructor(subject, observerLocator, config) {\n    this.result = new ValidationResult();\n    this.subject = subject;\n    this.validationProperties = [];\n    this.config = config;\n    this.builder = new ValidationGroupBuilder(observerLocator, this);\n    this.onValidateCallbacks = [];\n    this.onPropertyValidationCallbacks = [];\n    this.isValidating = false;\n    this.onDestroy = config.onLocaleChanged( () => {\n      this.validate(false, true) ;});\n\n\n\n\n    if(this.subject.__proto__._validationMetadata)\n    {\n      this.subject.__proto__._validationMetadata.setup(this);\n    }\n\n  }\n\n  destroy(){\n    this.onDestroy(); //todo: what else needs to be done for proper cleanup?\n  }\n\n  clear(){\n    this.validationProperties.forEach( (prop) => { prop.clear();});\n    this.result.clear();\n  }\n\n  onBreezeEntity(){\n    let breezeEntity = this.subject;\n    let me = this;\n    this.onPropertyValidate( (propertyBindingPath) => {\n      this.passes( () => {\n        breezeEntity.entityAspect.validateProperty(propertyBindingPath);\n        var errors = breezeEntity.entityAspect.getValidationErrors(propertyBindingPath);\n        if(errors.length === 0)\n          return true;\n        else\n          return errors[0].errorMessage;\n      });\n    });\n    this.onValidate( () => {\n      breezeEntity.entityAspect.validateEntity();\n      return {};\n    });\n\n    breezeEntity.entityAspect.validationErrorsChanged.subscribe(function () {\n      breezeEntity.entityAspect.getValidationErrors().forEach( (validationError) => {\n          let propertyName = validationError.propertyName;\n          if (!me.result.properties[propertyName]) {  //set up empty validation on the property\n            me.ensure(propertyName);\n          }\n\n          let currentResultProp = me.result.addProperty(propertyName);\n          if (currentResultProp.isValid) {\n\n            currentResultProp.setValidity({\n              isValid: false,\n              message: validationError.errorMessage,\n              failingRule: 'breeze',\n              latestValue: currentResultProp.latestValue\n            }, true);\n          }\n      });\n    });\n  }\n\n\n  /**\n   * Causes complete re-evaluation: gets the latest value, marks the property as 'dirty' (unless false is passed), runs validation rules asynchronously and updates this.result\n   * @returns {Promise} A promise that fulfils when valid, rejects when invalid.\n   */\n  validate(forceDirty = true, forceExecution = true) {\n    this.isValidating = true;\n    var promise = Promise.resolve(true);\n    for (let i = this.validationProperties.length - 1; i >= 0; i--) {\n      let validatorProperty = this.validationProperties[i];\n      promise = promise.then( () => { return validatorProperty.validateCurrentValue(forceDirty, forceExecution); });\n    }\n    promise = promise.catch( () => {\n      console.log(\"Should never get here: a validation property should always resolve to true/false!\");\n      debugger;\n      throw Error(\"Should never get here: a validation property should always resolve to true/false!\");\n    });\n\n\n    this.onValidateCallbacks.forEach( (onValidateCallback) => {\n      promise = promise.then(() => {return this.config.locale();}).then((locale) => {\n        return Promise.resolve(onValidateCallback.validationFunction()).then((callbackResult) => {\n            for (var prop in callbackResult) {\n              if(!this.result.properties[prop])\n              {  //set up empty validation on the property\n                this.ensure(prop);\n              }\n              let resultProp = this.result.addProperty(prop);\n              let result = callbackResult[prop];\n              let newPropResult = {\n                latestValue : resultProp.latestValue\n              };\n              if (result === true || result === null || result === '' ) {\n                if(!resultProp.isValid && resultProp.failingRule === 'onValidateCallback' ) {\n                  newPropResult.failingRule = null;\n                  newPropResult.message = '';\n                  newPropResult.isValid = true;\n                  resultProp.setValidity(newPropResult, true);\n                }\n              }\n              else {\n                if (resultProp.isValid) {\n                  newPropResult.failingRule = 'onValidateCallback';\n                  newPropResult.isValid = false;\n                  if (typeof(result) === 'string') {\n                    newPropResult.message = result;\n                  }\n                  else {\n                    newPropResult.message = locale.translate(newPropResult.failingRule);\n                  }\n                  resultProp.setValidity(newPropResult, true);\n                }\n              }\n            }\n            this.result.checkValidity();\n          },\n          (a,b,c,d,e) => {\n            debugger;\n            this.result.isValid = false;\n            if(onValidateCallback.validationFunctionFailedCallback)\n            {\n              onValidateCallback.validationFunctionFailedCallback(a,b,c,d,e);\n            }\n          });\n      });\n    });\n    promise = promise\n    .then(() => {\n      this.isValidating = false;\n      if(this.result.isValid)\n      {\n        return Promise.resolve(this.result);\n      }\n      else\n      {\n        return Promise.reject(this.result);\n      }\n    });\n      return promise;\n  };\n\n  onValidate(validationFunction, validationFunctionFailedCallback){\n    this.onValidateCallbacks.push( { validationFunction,validationFunctionFailedCallback}) ;\n    return this;\n  }\n\n  onPropertyValidate(validationFunction)\n  {\n    this.onPropertyValidationCallbacks.push(validationFunction);\n    return this;\n  }\n\n  /**\n   * Adds a validation property for the specified path\n   * @param {String} bindingPath the path of the property/field, for example 'firstName' or 'address.muncipality.zipCode'\n   * @param configCallback a configuration callback\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  ensure(bindingPath, configCallback) {\n    this.builder.ensure(bindingPath, configCallback);\n    this.onPropertyValidationCallbacks.forEach((callback) => { callback(bindingPath); });\n    return this;\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being 'isNotEmpty', 'required'\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isNotEmpty() {\n    return this.builder.isNotEmpty();\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being greater than or equal to a threshold\n   * @param minimumValue the threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isGreaterThanOrEqualTo(minimumValue) {\n    return this.builder.isGreaterThanOrEqualTo(minimumValue);\n  }\n  /**\n   * Adds a validation rule that checks a value for being greater than a threshold\n   * @param minimumValue the threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isGreaterThan(minimumValue) {\n    return this.builder.isGreaterThan(minimumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being greater than or equal to a threshold, and less than or equal to another threshold\n   * @param minimumValue The minimum threshold\n   * @param maximumValue The isLessThanOrEqualTo threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isBetween(minimumValue, maximumValue) {\n    return this.builder.isBetween(minimumValue, maximumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being less than a threshold\n   * @param maximumValue The threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isLessThanOrEqualTo(maximumValue) {\n    return this.builder.isLessThanOrEqualTo(maximumValue);\n  }\n  /**\n   * Adds a validation rule that checks a value for being less than or equal to a threshold\n   * @param maximumValue The threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isLessThan(maximumValue){\n    return this.builder.isLessThan(maximumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being equal to a threshold\n   * @param otherValue The threshold\n   * @param otherValueLabel Optional: a label to use in the validation message\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isEqualTo(otherValue, otherValueLabel) {\n    return this.builder.isEqualTo(otherValue, otherValueLabel);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for not being equal to a threshold\n   * @param otherValue The threshold\n   * @param otherValueLabel Optional: a label to use in the validation message\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isNotEqualTo(otherValue, otherValueLabel) {\n    return this.builder.isNotEqualTo(otherValue, otherValueLabel);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being a valid isEmail address\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isEmail() {\n    return this.builder.isEmail();\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being equal to at least one other value in a particular collection\n   * @param collection The threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isIn(collection) {\n    return this.builder.isIn(collection);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for having a length greater than or equal to a specified threshold\n   * @param minimumValue The threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  hasMinLength(minimumValue) {\n    return this.builder.hasMinLength(minimumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for having a length less than a specified threshold\n   * @param maximumValue The threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  hasMaxLength(maximumValue) {\n    return this.builder.hasMaxLength(maximumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for having a length greater than or equal to a specified threshold and less than another threshold\n   * @param minimumValue The min threshold\n   * @param maximumValue The max threshold\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  hasLengthBetween(minimumValue, maximumValue) {\n    return this.builder.hasLengthBetween(minimumValue, maximumValue);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being numeric, this includes formatted numbers like '-3,600.25'\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isNumber() {\n    return this.builder.isNumber();\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being strictly numeric, this excludes formatted numbers like '-3,600.25'\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  containsOnlyDigits() {\n    return this.builder.containsOnlyDigits();\n  }\n\n  containsOnly(regex){\n    return this.builder.containsOnly(regex);\n  }\n\n  containsOnlyAlpha()\n  {\n    return this.builder.containsOnlyAlpha();\n  }\n\n  containsOnlyAlphaOrWhitespace()\n  {\n    return this.builder.containsOnlyAlphaOrWhitespace();\n  }\n  containsOnlyLetters()\n  {\n    return this.builder.containsOnlyAlpha();\n  }\n\n  containsOnlyLettersOrWhitespace()\n  {\n    return this.builder.containsOnlyAlphaOrWhitespace();\n  }\n\n\n  /**\n   * Adds a validation rule that checks a value for only containing alphanumerical characters\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  containsOnlyAlphanumerics() {\n    return this.builder.containsOnlyAlphanumerics();\n  }\n\n  /**\n   * Adds a validation rule that checks a value for only containing alphanumerical characters or whitespace\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  containsOnlyAlphanumericsOrWhitespace() {\n    return this.builder.containsOnlyAlphanumericsOrWhitespace();\n  }\n\n  /**\n   * Adds a validation rule that checks a value for being a strong password. A strong password contains at least the specified of the following groups: lowercase characters, uppercase characters, digits and special characters.\n   * @param minimumComplexityLevel {Number} Optionally, specifiy the number of groups to match. Default is 4.\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  isStrongPassword(minimumComplexityLevel) {\n    return this.builder.isStrongPassword(minimumComplexityLevel);\n  }\n\n\n  /**\n   * Adds a validation rule that checks a value for matching a particular regex\n   * @param regex the regex to match\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  matches(regex) {\n    return this.builder.matches(regex);\n  }\n\n  /**\n   * Adds a validation rule that checks a value for passing a custom function\n   * @param customFunction {Function} The custom function that needs to pass, that takes two arguments: newValue (the value currently being evaluated) and optionally: threshold, and returns true/false.\n   * @param threshold {Object} An optional threshold that will be passed to the customFunction\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  passes(customFunction, threshold) {\n    return this.builder.passes(customFunction, threshold);\n  }\n\n  /**\n   * Adds the {ValidationRule}\n   * @param validationRule {ValudationRule} The rule that needs to pass\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  passesRule(validationRule) {\n    return this.builder.passesRule(validationRule);\n  }\n\n  /**\n   * Specifies that the next validation rules only need to be evaluated when the specified conditionExpression is true\n   * @param conditionExpression {Function} a function that returns true of false.\n   * @param threshold {Object} an optional treshold object that is passed to the conditionExpression\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  if(conditionExpression, threshold) {\n    return this.builder.if(conditionExpression, threshold);\n  }\n\n  /**\n   * Specifies that the next validation rules only need to be evaluated when the previously specified conditionExpression is false.\n   * See: if(conditionExpression, threshold)\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  else() {\n    return this.builder.else();\n  }\n\n  /**\n   * Specifies that the execution of next validation rules no longer depend on the the previously specified conditionExpression.\n   * See: if(conditionExpression, threshold)\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  endIf() {\n    return this.builder.endIf();\n  }\n\n  /**\n   * Specifies that the next validation rules only need to be evaluated when they are preceded by a case that matches the conditionExpression\n   * @param conditionExpression {Function} a function that returns a case label to execute. This is optional, when omitted the case label will be matched using the underlying property's value\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  switch(conditionExpression) {\n    return this.builder.switch(conditionExpression);\n  }\n\n  /**\n   * Specifies that the next validation rules only need to be evaluated when the caseLabel matches the value returned by a preceding switch statement\n   * See: switch(conditionExpression)\n   * @param caseLabel {Object} the case label\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  case(caseLabel) {\n    return this.builder.case(caseLabel);\n  }\n\n  /**\n   * Specifies that the next validation rules only need to be evaluated when not other caseLabel matches the value returned by a preceding switch statement\n   * See: switch(conditionExpression)\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  default() {\n    return this.builder.default();\n  }\n\n  /**\n   * Specifies that the execution of next validation rules no longer depend on the the previously specified conditionExpression.\n   * See: switch(conditionExpression)\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  endSwitch() {\n    return this.builder.endSwitch();\n  }\n\n  /**\n   * Specifies that the execution of the previous validation rule should use the specified error message if it fails\n   * @param message either a static string or a function that takes two arguments: newValue (the value that has been evaluated) and threshold.\n   * @returns {ValidationGroup} returns this ValidationGroup, to enable fluent API\n   */\n  withMessage(message) {\n    return this.builder.withMessage(message);\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationGroup",
    "memberof": "src/validation/validation-group.js",
    "longname": "src/validation/validation-group.js~ValidationGroup",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-group.js",
    "importStyle": "{ValidationGroup}",
    "description": "Encapsulates validation rules and their current validation state for a given subject",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ValidationGroup"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#constructor",
    "access": null,
    "description": "Instantiates a new {ValidationGroup}",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "The subject to evaluate"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "observerLocator",
        "description": "The observerLocator used to monitor changes on the subject"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The configuration"
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "result",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#result",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "subject",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#subject",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationProperties",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#validationProperties",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#config",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "builder",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#builder",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onValidateCallbacks",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onValidateCallbacks",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onPropertyValidationCallbacks",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onPropertyValidationCallbacks",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValidating",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isValidating",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onDestroy",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onDestroy",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#destroy",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#clear",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onBreezeEntity",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onBreezeEntity",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#validate",
    "access": null,
    "description": "Causes complete re-evaluation: gets the latest value, marks the property as 'dirty' (unless false is passed), runs validation rules asynchronously and updates this.result",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that fulfils when valid, rejects when invalid."
      }
    ],
    "params": [
      {
        "name": "forceDirty",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "forceExecution",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that fulfils when valid, rejects when invalid."
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValidating",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isValidating",
    "access": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValidating",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isValidating",
    "access": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onValidate",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onValidate",
    "access": null,
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "validationFunction",
        "types": [
          "*"
        ]
      },
      {
        "name": "validationFunctionFailedCallback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onPropertyValidate",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#onPropertyValidate",
    "access": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "validationFunction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "ensure",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#ensure",
    "access": null,
    "description": "Adds a validation property for the specified path",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "bindingPath",
        "description": "the path of the property/field, for example 'firstName' or 'address.muncipality.zipCode'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "configCallback",
        "description": "a configuration callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEmpty",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isNotEmpty",
    "access": null,
    "description": "Adds a validation rule that checks a value for being 'isNotEmpty', 'required'",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isGreaterThanOrEqualTo",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isGreaterThanOrEqualTo",
    "access": null,
    "description": "Adds a validation rule that checks a value for being greater than or equal to a threshold",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumValue",
        "description": "the threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isGreaterThan",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isGreaterThan",
    "access": null,
    "description": "Adds a validation rule that checks a value for being greater than a threshold",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumValue",
        "description": "the threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isBetween",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isBetween",
    "access": null,
    "description": "Adds a validation rule that checks a value for being greater than or equal to a threshold, and less than or equal to another threshold",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumValue",
        "description": "The minimum threshold"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumValue",
        "description": "The isLessThanOrEqualTo threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLessThanOrEqualTo",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isLessThanOrEqualTo",
    "access": null,
    "description": "Adds a validation rule that checks a value for being less than a threshold",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumValue",
        "description": "The threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isLessThan",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isLessThan",
    "access": null,
    "description": "Adds a validation rule that checks a value for being less than or equal to a threshold",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumValue",
        "description": "The threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEqualTo",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isEqualTo",
    "access": null,
    "description": "Adds a validation rule that checks a value for being equal to a threshold",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "otherValue",
        "description": "The threshold"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "otherValueLabel",
        "description": "Optional: a label to use in the validation message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEqualTo",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isNotEqualTo",
    "access": null,
    "description": "Adds a validation rule that checks a value for not being equal to a threshold",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "otherValue",
        "description": "The threshold"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "otherValueLabel",
        "description": "Optional: a label to use in the validation message"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isEmail",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isEmail",
    "access": null,
    "description": "Adds a validation rule that checks a value for being a valid isEmail address",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isIn",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isIn",
    "access": null,
    "description": "Adds a validation rule that checks a value for being equal to at least one other value in a particular collection",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collection",
        "description": "The threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasMinLength",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#hasMinLength",
    "access": null,
    "description": "Adds a validation rule that checks a value for having a length greater than or equal to a specified threshold",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumValue",
        "description": "The threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasMaxLength",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#hasMaxLength",
    "access": null,
    "description": "Adds a validation rule that checks a value for having a length less than a specified threshold",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumValue",
        "description": "The threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "hasLengthBetween",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#hasLengthBetween",
    "access": null,
    "description": "Adds a validation rule that checks a value for having a length greater than or equal to a specified threshold and less than another threshold",
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumValue",
        "description": "The min threshold"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "maximumValue",
        "description": "The max threshold"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNumber",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isNumber",
    "access": null,
    "description": "Adds a validation rule that checks a value for being numeric, this includes formatted numbers like '-3,600.25'",
    "lineNumber": 313,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyDigits",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyDigits",
    "access": null,
    "description": "Adds a validation rule that checks a value for being strictly numeric, this excludes formatted numbers like '-3,600.25'",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnly",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnly",
    "access": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlpha",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyAlpha",
    "access": null,
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphaOrWhitespace",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyAlphaOrWhitespace",
    "access": null,
    "description": null,
    "lineNumber": 334,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyLetters",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyLetters",
    "access": null,
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyLettersOrWhitespace",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyLettersOrWhitespace",
    "access": null,
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphanumerics",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyAlphanumerics",
    "access": null,
    "description": "Adds a validation rule that checks a value for only containing alphanumerical characters",
    "lineNumber": 353,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "containsOnlyAlphanumericsOrWhitespace",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#containsOnlyAlphanumericsOrWhitespace",
    "access": null,
    "description": "Adds a validation rule that checks a value for only containing alphanumerical characters or whitespace",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isStrongPassword",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#isStrongPassword",
    "access": null,
    "description": "Adds a validation rule that checks a value for being a strong password. A strong password contains at least the specified of the following groups: lowercase characters, uppercase characters, digits and special characters.",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minimumComplexityLevel",
        "description": "{Number} Optionally, specifiy the number of groups to match. Default is 4."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "matches",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#matches",
    "access": null,
    "description": "Adds a validation rule that checks a value for matching a particular regex",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "regex",
        "description": "the regex to match"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "passes",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#passes",
    "access": null,
    "description": "Adds a validation rule that checks a value for passing a custom function",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "customFunction",
        "description": "{Function} The custom function that needs to pass, that takes two arguments: newValue (the value currently being evaluated) and optionally: threshold, and returns true/false."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "threshold",
        "description": "{Object} An optional threshold that will be passed to the customFunction"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "passesRule",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#passesRule",
    "access": null,
    "description": "Adds the {ValidationRule}",
    "lineNumber": 399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "validationRule",
        "description": "{ValudationRule} The rule that needs to pass"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "if",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#if",
    "access": null,
    "description": "Specifies that the next validation rules only need to be evaluated when the specified conditionExpression is true",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "conditionExpression",
        "description": "{Function} a function that returns true of false."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "threshold",
        "description": "{Object} an optional treshold object that is passed to the conditionExpression"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "else",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#else",
    "access": null,
    "description": "Specifies that the next validation rules only need to be evaluated when the previously specified conditionExpression is false.\nSee: if(conditionExpression, threshold)",
    "lineNumber": 418,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "endIf",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#endIf",
    "access": null,
    "description": "Specifies that the execution of next validation rules no longer depend on the the previously specified conditionExpression.\nSee: if(conditionExpression, threshold)",
    "lineNumber": 427,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "switch",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#switch",
    "access": null,
    "description": "Specifies that the next validation rules only need to be evaluated when they are preceded by a case that matches the conditionExpression",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "conditionExpression",
        "description": "{Function} a function that returns a case label to execute. This is optional, when omitted the case label will be matched using the underlying property's value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "case",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#case",
    "access": null,
    "description": "Specifies that the next validation rules only need to be evaluated when the caseLabel matches the value returned by a preceding switch statement\nSee: switch(conditionExpression)",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "caseLabel",
        "description": "{Object} the case label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#default",
    "access": null,
    "description": "Specifies that the next validation rules only need to be evaluated when not other caseLabel matches the value returned by a preceding switch statement\nSee: switch(conditionExpression)",
    "lineNumber": 455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "endSwitch",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#endSwitch",
    "access": null,
    "description": "Specifies that the execution of next validation rules no longer depend on the the previously specified conditionExpression.\nSee: switch(conditionExpression)",
    "lineNumber": 464,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "withMessage",
    "memberof": "src/validation/validation-group.js~ValidationGroup",
    "longname": "src/validation/validation-group.js~ValidationGroup#withMessage",
    "access": null,
    "description": "Specifies that the execution of the previous validation rule should use the specified error message if it fails",
    "lineNumber": 473,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ValidationGroup} returns this ValidationGroup, to enable fluent API"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "either a static string or a function that takes two arguments: newValue (the value that has been evaluated) and threshold."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ValidationGroup"
      ],
      "spread": false,
      "description": "returns this ValidationGroup, to enable fluent API"
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-locale.js",
    "memberof": null,
    "longname": "src/validation/validation-locale.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export class ValidationLocale{\n  constructor(defaults, data)\n  {\n    this.defaults = defaults;\n    this.currentLocale = data;\n  }\n  getValueFor(identifier, category) {\n    if (this.currentLocale && this.currentLocale[category]) {\n      var currentLocaleSetting = this.currentLocale[category][identifier];\n      if (currentLocaleSetting !== undefined && currentLocaleSetting !== null)\n        return currentLocaleSetting;\n    }\n    if (this.defaults[category]) {\n      var defaultSetting = this.defaults[category][identifier];\n      if (defaultSetting !== undefined && defaultSetting !== null)\n        return defaultSetting;\n    }\n    throw 'validation: I18N: Could not find: ' + identifier + ' in category: ' + category;\n  }\n\n\n  setting(settingIdentifier) {\n    return this.getValueFor(settingIdentifier, 'settings');\n  }\n\n  translate(translationIdentifier, newValue, threshold) {\n    var translation = this.getValueFor(translationIdentifier, 'messages');\n    if (typeof translation === 'function') {\n      return translation(newValue, threshold);\n    }\n    if (typeof translation === 'string') {\n      return translation;\n    }\n    throw 'Validation message for ' + translationIdentifier + 'was in an unsupported format';\n  }\n}\n\nclass ValidationLocaleRepository  {\n  constructor(){\n    this.default = null;\n    this.instances = new Map();\n    this.defaults = {\n      settings: {\n        'numericRegex': /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/\n      },\n      messages: {}\n    };\n  }\n  load(localeIdentifier, basePath) {\n    if(!basePath)\n      basePath = 'aurelia-validation/resources/';\n    return new Promise((resolve, reject) => {\n      if(this.instances.has(localeIdentifier)) {\n        let locale = this.instances.get(localeIdentifier);\n        resolve(locale);\n      }\n      else {\n        System.import(basePath + localeIdentifier).then((resource) => {\n          let locale = this.addLocale(localeIdentifier, resource.data);\n          resolve(locale);\n        });\n      }\n    });\n  }\n  addLocale(localeIdentifier, data)\n  {\n    var instance = new ValidationLocale(this.defaults, data);\n    this.instances.set(localeIdentifier, instance);\n    if(this.default === null)\n      this.default = instance;\n    return instance;\n  }\n}\nValidationLocale.Repository = new ValidationLocaleRepository();\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationLocale",
    "memberof": "src/validation/validation-locale.js",
    "longname": "src/validation/validation-locale.js~ValidationLocale",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-locale.js",
    "importStyle": "{ValidationLocale}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "defaults",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaults",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#defaults",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "currentLocale",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#currentLocale",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getValueFor",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#getValueFor",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "identifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "category",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setting",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#setting",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "settingIdentifier",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "translate",
    "memberof": "src/validation/validation-locale.js~ValidationLocale",
    "longname": "src/validation/validation-locale.js~ValidationLocale#translate",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "translationIdentifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationLocaleRepository",
    "memberof": "src/validation/validation-locale.js",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "access": null,
    "export": false,
    "importPath": "aurelia-validation/src/validation/validation-locale.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#constructor",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#default",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "instances",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#instances",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaults",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#defaults",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#load",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "localeIdentifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "basePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addLocale",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#addLocale",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "localeIdentifier",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/validation/validation-locale.js~ValidationLocaleRepository",
    "longname": "src/validation/validation-locale.js~ValidationLocaleRepository#default",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-property.js",
    "memberof": null,
    "longname": "src/validation/validation-property.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as AllCollections from '../validation/validation-rules-collection';\nimport {PathObserver} from '../validation/path-observer';\nimport {Debouncer} from '../validation/debouncer';\n\nexport class ValidationProperty {\n  constructor(observerLocator, propertyName, validationGroup, propertyResult, config) {\n    this.propertyResult = propertyResult;\n    this.propertyName = propertyName;\n    this.validationGroup = validationGroup;\n    this.collectionOfValidationRules = new AllCollections.ValidationRulesCollection();\n    this.config = config;\n    this.latestValue = undefined;\n\n    this.observer = new PathObserver(observerLocator, validationGroup.subject, propertyName)\n      .getObserver();\n\n    this.debouncer = new Debouncer(config.getDebounceTimeout());\n\n    this.observer.subscribe(() => {\n      this.debouncer.debounce( () => {\n        var newValue =   this.observer.getValue();\n        if(newValue !== this.latestValue) {\n          this.validate(newValue, true);\n        }\n      });\n    });\n\n    this.dependencyObservers = [];\n    var dependencies = this.config.getDependencies();\n    for(let i = 0; i < dependencies.length; i++){\n      let dependencyObserver = new PathObserver(observerLocator, validationGroup.subject, dependencies[i])\n        .getObserver();\n      dependencyObserver.subscribe(() => {\n        this.debouncer.debounce( () => {\n          this.validateCurrentValue(true);\n        });\n      });\n      this.dependencyObservers.push(dependencyObserver);\n    }\n  }\n\n  addValidationRule(validationRule) {\n    if (validationRule.validate === undefined) //Can ES6 check on base class??\n      throw new exception(\"That's not a valid validationRule\");\n    this.collectionOfValidationRules.addValidationRule(validationRule);\n    this.validateCurrentValue(false);\n  }\n\n  validateCurrentValue(forceDirty, forceExecution) {\n    return this.validate(this.observer.getValue(), forceDirty, forceExecution);\n  }\n\n  clear(){\n    this.latestValue = this.observer.getValue();\n    this.propertyResult.clear();\n  }\n\n  /**\n   * returns a promise that fulfils and resolves to true/false\n   */\n  validate(newValue, shouldBeDirty, forceExecution) {\n    if( (!this.propertyResult.isDirty && shouldBeDirty) || this.latestValue !== newValue || forceExecution) {\n      this.latestValue = newValue;\n      return this.config.locale().then((locale) => {\n          return this.collectionOfValidationRules.validate(newValue, locale)\n            .then((validationResponse) => {\n              if (this.latestValue === validationResponse.latestValue)\n                this.propertyResult.setValidity(validationResponse, shouldBeDirty);\n              return validationResponse.isValid;\n            })\n            .catch((err) => {\n              console.log(\"Unexpected behavior: a validation-rules-collection should always fulfil\", err);\n              debugger;\n              throw Error(\"Unexpected behavior: a validation-rules-collection should always fulfil\");\n            });\n        },\n        () => {\n          throw Error(\"An exception occurred while trying to load the locale\");\n        });\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationProperty",
    "memberof": "src/validation/validation-property.js",
    "longname": "src/validation/validation-property.js~ValidationProperty",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-property.js",
    "importStyle": "{ValidationProperty}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#constructor",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "observerLocator",
        "types": [
          "*"
        ]
      },
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "validationGroup",
        "types": [
          "*"
        ]
      },
      {
        "name": "propertyResult",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "propertyResult",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#propertyResult",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "propertyName",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#propertyName",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationGroup",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#validationGroup",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "collectionOfValidationRules",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#collectionOfValidationRules",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "config",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#config",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "latestValue",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#latestValue",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "observer",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#observer",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "debouncer",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#debouncer",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "dependencyObservers",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#dependencyObservers",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addValidationRule",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#addValidationRule",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "validationRule",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validateCurrentValue",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#validateCurrentValue",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "forceDirty",
        "types": [
          "*"
        ]
      },
      {
        "name": "forceExecution",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#clear",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "latestValue",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#latestValue",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#validate",
    "access": null,
    "description": "returns a promise that fulfils and resolves to true/false",
    "lineNumber": 61,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "shouldBeDirty",
        "types": [
          "*"
        ]
      },
      {
        "name": "forceExecution",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "latestValue",
    "memberof": "src/validation/validation-property.js~ValidationProperty",
    "longname": "src/validation/validation-property.js~ValidationProperty#latestValue",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-result.js",
    "memberof": null,
    "longname": "src/validation/validation-result.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export class ValidationResult {\n  constructor() {\n    this.isValid = true;\n    this.properties = {};\n  }\n\n  addProperty(name) {\n    if (!this.properties[name]) {\n      this.properties[name] = new ValidationResultProperty(this);\n    }\n    return this.properties[name];\n  }\n\n  checkValidity() {\n    for (let propertyName in this.properties) {\n      if (!this.properties[propertyName].isValid) {\n        this.isValid = false;\n        return;\n      }\n    }\n    this.isValid = true;\n  }\n  clear() {\n    this.isValid = true;\n  }\n}\n\nexport class ValidationResultProperty {\n  constructor(group) {\n    this.group = group;\n    this.onValidateCallbacks = [];\n    this.clear();\n  }\n\n  clear(){\n    this.isValid = true;\n    this.isDirty = false;\n    this.message = '';\n    this.failingRule = null;\n    this.latestValue = null;\n    this.notifyObserversOfChange();\n  }\n\n  onValidate(onValidateCallback) {\n    this.onValidateCallbacks.push(onValidateCallback);\n  }\n\n  notifyObserversOfChange(){\n    for (var i = 0; i < this.onValidateCallbacks.length; i++) {\n      var callback = this.onValidateCallbacks[i];\n      callback(this);\n    }\n  }\n\n  setValidity(validationResponse, shouldBeDirty) {\n    var notifyObservers = (!this.isDirty && shouldBeDirty)\n      || (this.isValid !== validationResponse.isValid)\n      || (this.message !== validationResponse.message);\n\n\n    if (shouldBeDirty)\n      this.isDirty = true;\n    this.message = validationResponse.message;\n    this.failingRule = validationResponse.failingRule;\n    this.isValid = validationResponse.isValid; //Set isValid last in case someone has observed 'isValid'\n    this.latestValue = validationResponse.latestValue;\n    if (this.isValid !== this.group.isValid)\n      this.group.checkValidity();\n\n    if (notifyObservers) {\n      this.notifyObserversOfChange();\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationResult",
    "memberof": "src/validation/validation-result.js",
    "longname": "src/validation/validation-result.js~ValidationResult",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-result.js",
    "importStyle": "{ValidationResult}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#constructor",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#isValid",
    "access": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "properties",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#properties",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addProperty",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#addProperty",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "checkValidity",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#checkValidity",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#isValid",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#isValid",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#clear",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResult",
    "longname": "src/validation/validation-result.js~ValidationResult#isValid",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationResultProperty",
    "memberof": "src/validation/validation-result.js",
    "longname": "src/validation/validation-result.js~ValidationResultProperty",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-result.js",
    "importStyle": "{ValidationResultProperty}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#constructor",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "group",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "group",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#group",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onValidateCallbacks",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#onValidateCallbacks",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "clear",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#clear",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#isValid",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isDirty",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#isDirty",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#message",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "failingRule",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#failingRule",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "latestValue",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#latestValue",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "onValidate",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#onValidate",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "onValidateCallback",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "notifyObserversOfChange",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#notifyObserversOfChange",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setValidity",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#setValidity",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "validationResponse",
        "types": [
          "*"
        ]
      },
      {
        "name": "shouldBeDirty",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isDirty",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#isDirty",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#message",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "failingRule",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#failingRule",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isValid",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#isValid",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "latestValue",
    "memberof": "src/validation/validation-result.js~ValidationResultProperty",
    "longname": "src/validation/validation-result.js~ValidationResultProperty#latestValue",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-rules-collection.js",
    "memberof": null,
    "longname": "src/validation/validation-rules-collection.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\nimport {ValidationLocale} from '../validation/validation-locale';\n\nexport class ValidationRulesCollection {\n  constructor() {\n    this.isRequired = false;\n    this.validationRules = [];\n    this.validationCollections = [];\n    this.isRequiredMessage = null;\n  }\n\n  /**\n   * Returns a promise that fulfils and resolves to simple result status object.\n   */\n  validate(newValue, locale) {\n    if(locale === undefined)\n    {\n      locale = ValidationLocale.Repository.default;\n    }\n    newValue = Utilities.getValue(newValue);\n    let executeRules = true;\n\n    //Is required?\n    if (Utilities.isEmptyValue(newValue)) {\n      if (this.isRequired) {\n        return Promise.resolve({\n          isValid: false,\n          message: this.isRequiredMessage ?\n            ( (typeof(this.isRequiredMessage) === 'function') ? this.isRequiredMessage(newValue) : this.isRequiredMessage  ) :\n            locale.translate('isRequired'),\n          failingRule: 'isRequired',\n          latestValue: newValue\n        });\n      }\n      else {\n        executeRules = false;\n      }\n    }\n\n    var checks = Promise.resolve({\n      isValid: true,\n      message: '',\n      failingRule: null,\n      latestValue: newValue\n    });\n\n    //validate rules\n    if (executeRules) {\n      for (let i = 0; i < this.validationRules.length; i++) {\n        let rule = this.validationRules[i];\n        checks = checks.then( (previousRuleResult) => {\n          //Earlier in the chain, something resolved to an invalid result. Chain it.\n          if(previousRuleResult.isValid  === false)\n          {\n            return previousRuleResult;\n          }\n          else\n          {\n            return rule.validate(newValue, locale).then( (thisRuleResult) => {\n              if(thisRuleResult === false) {\n                return {\n                  isValid: false,\n                  message: rule.explain(),\n                  failingRule: rule.ruleName,\n                  latestValue: newValue\n                };\n              }\n              else\n              {\n                //assertion\n                if(!previousRuleResult.isValid)\n                {\n                  throw Error(\"ValidationRulesCollection.validate caught an unexpected result while validating it's chain of rules.\");\n                }\n                return previousRuleResult;\n              }\n            });\n          }\n        });\n      }\n    }\n\n    //validate collections\n    for (let i = 0; i < this.validationCollections.length; i++) {\n      let validationCollection = this.validationCollections[i];\n      checks = checks.then( (previousValidationResult)=> {\n        if(previousValidationResult.isValid)\n          return validationCollection.validate(newValue, locale);\n        else\n          return previousValidationResult;\n      });\n    }\n\n    return checks;\n  }\n\n  addValidationRule(validationRule) {\n    if (validationRule.validate === undefined) //Can ES6 check on base class??\n      throw new exception(\"That's not a valid validationRule\");\n    this.validationRules.push(validationRule);\n  }\n\n  addValidationRuleCollection(validationRulesCollection) {\n    this.validationCollections.push(validationRulesCollection);\n  }\n\n  isNotEmpty() {\n    this.isRequired = true;\n  }\n\n  withMessage(message) {\n    if(this.validationRules.length === 0)\n      this.isRequiredMessage = message;\n    else\n      this.validationRules[this.validationRules.length - 1].withMessage(message);\n  }\n}\n\nexport class SwitchCaseValidationRulesCollection {\n\n  constructor(conditionExpression) {\n    this.conditionExpression = conditionExpression;\n    this.innerCollections = [];\n    this.defaultCollection = new ValidationRulesCollection();\n    this.caseLabel = '';\n    this.defaultCaseLabel = {description: 'this is the case label for \\'default\\''};\n  }\n\n  case(caseLabel) {\n    this.caseLabel = caseLabel;\n    this.getCurrentCollection(caseLabel, true); //force creation\n  }\n\n  default() {\n    this.caseLabel = this.defaultCaseLabel;\n  }\n\n  getCurrentCollection(caseLabel, createIfNotExists = false) {\n    if (caseLabel === this.defaultCaseLabel)\n      return this.defaultCollection;\n    var currentCollection = null;\n    for (let i = 0; i < this.innerCollections.length; i++) {\n      currentCollection = this.innerCollections[i];\n      if (currentCollection.caseLabel === caseLabel)\n        return currentCollection.collection;\n    }\n    if (createIfNotExists) {\n      currentCollection = {\n        caseLabel: caseLabel,\n        collection: new ValidationRulesCollection()\n      };\n      this.innerCollections.push(currentCollection);\n      return currentCollection.collection;\n    }\n    return null;\n  }\n\n  validate(newValue, locale) {\n    var collection = this.getCurrentCollection(this.conditionExpression(newValue));\n    if (collection !== null)\n      return collection.validate(newValue, locale);\n    else\n      return this.defaultCollection.validate(newValue, locale);\n  }\n\n  addValidationRule(validationRule) {\n    var currentCollection = this.getCurrentCollection(this.caseLabel, true);\n    currentCollection.addValidationRule(validationRule);\n  }\n\n  addValidationRuleCollection(validationRulesCollection) {\n    var currentCollection = this.getCurrentCollection(this.caseLabel, true);\n    currentCollection.addValidationRuleCollection(validationRulesCollection);\n  }\n\n  isNotEmpty() {\n    var collection = this.getCurrentCollection(this.caseLabel);\n    if (collection !== null)\n      collection.isNotEmpty();\n    else\n      this.defaultCollection.isNotEmpty();\n  }\n\n  withMessage(message) {\n    var collection = this.getCurrentCollection(this.caseLabel);\n    if (collection !== null)\n      collection.withMessage(message);\n    else\n      this.defaultCollection.withMessage(message);\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationRulesCollection",
    "memberof": "src/validation/validation-rules-collection.js",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules-collection.js",
    "importStyle": "{ValidationRulesCollection}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isRequired",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#isRequired",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationRules",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#validationRules",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "validationCollections",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#validationCollections",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isRequiredMessage",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#isRequiredMessage",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#validate",
    "access": null,
    "description": "Returns a promise that fulfils and resolves to simple result status object.",
    "lineNumber": 15,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addValidationRule",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#addValidationRule",
    "access": null,
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "validationRule",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addValidationRuleCollection",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#addValidationRuleCollection",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "validationRulesCollection",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEmpty",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#isNotEmpty",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isRequired",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#isRequired",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "withMessage",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#withMessage",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "isRequiredMessage",
    "memberof": "src/validation/validation-rules-collection.js~ValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~ValidationRulesCollection#isRequiredMessage",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SwitchCaseValidationRulesCollection",
    "memberof": "src/validation/validation-rules-collection.js",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules-collection.js",
    "importStyle": "{SwitchCaseValidationRulesCollection}",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#constructor",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "conditionExpression",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "conditionExpression",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#conditionExpression",
    "access": null,
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "innerCollections",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#innerCollections",
    "access": null,
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaultCollection",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#defaultCollection",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "caseLabel",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#caseLabel",
    "access": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "defaultCaseLabel",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#defaultCaseLabel",
    "access": null,
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "case",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#case",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "caseLabel",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "caseLabel",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#caseLabel",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "default",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#default",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "caseLabel",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#caseLabel",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getCurrentCollection",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#getCurrentCollection",
    "access": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "caseLabel",
        "types": [
          "*"
        ]
      },
      {
        "name": "createIfNotExists",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#validate",
    "access": null,
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addValidationRule",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#addValidationRule",
    "access": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "validationRule",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "addValidationRuleCollection",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#addValidationRuleCollection",
    "access": null,
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "validationRulesCollection",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "isNotEmpty",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#isNotEmpty",
    "access": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "withMessage",
    "memberof": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection",
    "longname": "src/validation/validation-rules-collection.js~SwitchCaseValidationRulesCollection#withMessage",
    "access": null,
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/validation/validation-rules.js",
    "memberof": null,
    "longname": "src/validation/validation-rules.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Utilities} from '../validation/utilities';\nimport {ValidationLocale} from '../validation/validation-locale';\n\nexport class ValidationRule {\n  constructor(threshold, onValidate, message) {\n    this.onValidate = onValidate;\n    this.threshold = threshold;\n    this.message = message;\n    this.errorMessage = null;\n    this.ruleName = this.constructor.name;\n  }\n\n  withMessage(message) {\n    this.message = message;\n  }\n\n  explain() {\n    return this.errorMessage;\n  }\n\n  setResult(result, currentValue, locale) {\n    if (result === true || result === undefined || result === null || result === '' ) {\n      this.errorMessage = null;\n      return true;\n    }\n    else {\n      if (typeof(result) === 'string') {\n        this.errorMessage = result;\n      }\n      else {\n        if (this.message) {\n          if (typeof(this.message) === 'function') {\n            this.errorMessage = this.message(currentValue, this.threshold);\n          }\n          else if (typeof(this.message) === 'string') {\n            this.errorMessage = this.message;\n          }\n          else\n            throw 'Unable to handle the error message:' + this.message;\n        }\n        else {\n          this.errorMessage = locale.translate(this.ruleName, currentValue, this.threshold);\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Validation rules: return a promise that fulfills and resolves to true/false\n   */\n  validate(currentValue, locale) {\n    if(locale === undefined)\n    {\n      locale = ValidationLocale.Repository.default;\n    }\n\n    currentValue = Utilities.getValue(currentValue);\n    var result = this.onValidate(currentValue, this.threshold, locale);\n    var promise = Promise.resolve(result);\n\n    var nextPromise = promise.then(\n      (promiseResult) => {\n        return this.setResult(promiseResult, currentValue, locale);\n      },\n      (promiseFailure) => {\n        if( typeof(promiseFailure) === 'string' && promiseFailure !== '')\n          return this.setResult(promiseFailure, currentValue, locale);\n        else\n          return this.setResult(false, currentValue, locale);\n      }\n    );\n    return nextPromise;\n  }\n}\n\nexport class EmailValidationRule extends ValidationRule {\n  //https://github.com/chriso/validator.js/blob/master/LICENSE\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        if (/\\s/.test(newValue)) {\n          return false;\n        }\n        var parts = newValue.split('@');\n        var domain = parts.pop();\n        var user = parts.join('@');\n\n        if (!this.isFQDN(domain)) {\n          return false;\n        }\n        return this.emailUserUtf8Regex.test(user);\n      }\n    );  \n    this.emailUserUtf8Regex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))$/i;\n    this.isFQDN = function (str) {\n      var parts = str.split('.');\n      for (var part, i = 0; i < parts.length; i++) {\n        part = parts[i];\n        if (part.indexOf('__') >= 0) {\n          return false;\n        }\n        part = part.replace(/_/g, '');\n        if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n          return false;\n        }\n        if (part[0] === '-' || part[part.length - 1] === '-' ||\n          part.indexOf('---') >= 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n  }\n}\n\nexport class MinimumLengthValidationRule extends ValidationRule {\n  constructor(minimumLength) {\n    super(\n      minimumLength,\n      (newValue, minimumLength) => {\n        return newValue.length !== undefined && newValue.length >= minimumLength;\n      }\n    );\n  }\n}\n\nexport class MaximumLengthValidationRule extends ValidationRule {\n  constructor(maximumLength) {\n    super(\n      maximumLength,\n      (newValue, maximumLength) => {\n        return newValue.length !== undefined && newValue.length <= maximumLength;\n      }\n    );\n  }\n}\n\nexport class BetweenLengthValidationRule extends ValidationRule {\n  constructor(minimumLength, maximumLength) {\n    super(\n      {minimumLength: minimumLength, maximumLength: maximumLength},\n      (newValue, threshold) => {\n        return newValue.length !== undefined\n          && newValue.length >= threshold.minimumLength\n          && newValue.length <= threshold.maximumLength;\n      }\n    );\n  }\n}\n\nexport class CustomFunctionValidationRule extends ValidationRule {\n  constructor(customFunction, threshold) {\n    super(\n      threshold,\n      customFunction\n    )\n  }\n}\n\nexport class NumericValidationRule extends ValidationRule {\n  constructor() {\n    super(\n      null,\n      (newValue, threshold, locale) => {\n        var numericRegex = locale.setting('numericRegex');\n        var floatValue = parseFloat(newValue);\n        return !Number.isNaN(parseFloat(floatValue))\n          && Number.isFinite(floatValue)\n          && numericRegex.test(newValue);\n      }\n    );\n  }\n}\n\nexport class RegexValidationRule extends ValidationRule {\n  constructor(regex) {\n    super(\n      regex,\n      (newValue, regex) => {\n        return regex.test(newValue);\n      }\n    );\n  }\n}\n\nexport class ContainsOnlyValidationRule extends RegexValidationRule{\n  constructor(regex){\n    super(regex);\n  }\n}\n\nexport class MinimumValueValidationRule extends ValidationRule {\n  constructor(minimumValue) {\n    super(\n      minimumValue,\n      (newValue, minimumValue) => {\n        return Utilities.getValue(minimumValue) < newValue;\n      }\n    );\n  }\n}\n\nexport class MinimumInclusiveValueValidationRule extends ValidationRule {\n  constructor(minimumValue) {\n    super(\n      minimumValue,\n      (newValue, minimumValue) => {\n        return Utilities.getValue(minimumValue) <= newValue;\n      }\n    );\n  }\n}\n\nexport class MaximumValueValidationRule extends ValidationRule {\n  constructor(maximumValue) {\n    super(\n      maximumValue,\n      (newValue, maximumValue) => {\n        return newValue < Utilities.getValue(maximumValue);\n      }\n    );\n  }\n}\n\nexport class MaximumInclusiveValueValidationRule extends ValidationRule{\n  constructor(maximumValue) {\n    super(\n      maximumValue,\n      (newValue, maximumValue) => {\n        return newValue <= Utilities.getValue(maximumValue);\n      }\n    );\n  }\n}\n\nexport class BetweenValueValidationRule extends ValidationRule {\n  constructor(minimumValue, maximumValue) {\n    super(\n      {minimumValue: minimumValue, maximumValue: maximumValue},\n      (newValue, threshold) => {\n        return Utilities.getValue(threshold.minimumValue) <= newValue && newValue <= Utilities.getValue(threshold.maximumValue);\n      }\n    );\n  }\n}\n\nexport class DigitValidationRule extends ValidationRule {\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        return this.digitRegex.test(newValue);\n      }\n    );\n    this.digitRegex = /^\\d+$/;\n  }\n}\n\nexport class AlphaNumericValidationRule extends ValidationRule {\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        return this.alphaNumericRegex.test(newValue);\n      }\n    );\n    this.alphaNumericRegex = /^[a-z0-9]+$/i;\n  }\n}\n\nexport class AlphaValidationRule extends ValidationRule {\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        return this.alphaRegex.test(newValue);\n      }\n    );\n    this.alphaRegex = /^[a-z]+$/i;\n  }\n}\n\n\nexport class AlphaOrWhitespaceValidationRule extends ValidationRule{\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        return this.alphaNumericRegex.test(newValue);\n      }\n    );\n    this.alphaNumericRegex = /^[a-z\\s]+$/i;\n  }\n}\n\n\nexport class AlphaNumericOrWhitespaceValidationRule extends ValidationRule {\n  constructor() {\n    super(\n      null,\n      (newValue, threshold) => {\n        return this.alphaNumericRegex.test(newValue);\n      }\n    );\n    this.alphaNumericRegex = /^[a-z0-9\\s]+$/i;\n  }\n}\n\nexport class MediumPasswordValidationRule extends ValidationRule {\n  constructor(minimumComplexityLevel) {\n    super(\n      (minimumComplexityLevel) ? minimumComplexityLevel : 3,\n      (newValue, threshold) => {\n        if (typeof (newValue) !== 'string')\n          return false;\n        var strength = 0;\n\n        strength += /[A-Z]+/.test(newValue) ? 1 : 0;\n        strength += /[a-z]+/.test(newValue) ? 1 : 0;\n        strength += /[0-9]+/.test(newValue) ? 1 : 0;\n        strength += /[\\W]+/.test(newValue) ? 1 : 0;\n        return strength >= threshold;\n      }\n    );\n  }\n}\n\n\nexport class StrongPasswordValidationRule extends MediumPasswordValidationRule\n{\n  constructor(){\n    super(4);\n  }\n}\n\nexport class EqualityValidationRuleBase extends ValidationRule {\n  constructor(otherValue, equality, otherValueLabel) {\n    super(\n      {\n        otherValue: otherValue,\n        equality: equality,\n        otherValueLabel: otherValueLabel\n      },\n      (newValue, threshold) => {\n        var otherValue = Utilities.getValue(threshold.otherValue);\n        if (newValue instanceof Date && otherValue instanceof Date)\n          return threshold.equality === (newValue.getTime() === otherValue.getTime());\n        return threshold.equality === (newValue === otherValue);\n      }\n    );\n  }\n}\n\nexport class EqualityValidationRule extends EqualityValidationRuleBase{\n  constructor(otherValue){\n    super(otherValue, true);\n  }\n}\n\nexport class EqualityWithOtherLabelValidationRule extends EqualityValidationRuleBase{\n  constructor(otherValue, otherLabel){\n    super(otherValue, true, otherLabel);\n  }\n}\n\nexport class InEqualityValidationRule extends EqualityValidationRuleBase{\n  constructor(otherValue){\n    super(otherValue, false);\n  }\n}\n\nexport class InEqualityWithOtherLabelValidationRule extends EqualityValidationRuleBase{\n  constructor(otherValue, otherLabel){\n    super(otherValue, false, otherLabel);\n  }\n}\n\n\nexport class InCollectionValidationRule extends ValidationRule {\n  constructor(collection) {\n    super(\n      collection,\n      (newValue, threshold) => {\n        var collection = Utilities.getValue(threshold);\n        for (let i = 0; i < collection.length; i++) {\n          if (newValue === collection[i])\n            return true;\n        }\n        return false;\n      }\n    );\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~ValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{ValidationRule}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      },
      {
        "name": "onValidate",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "onValidate",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#onValidate",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "threshold",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#threshold",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#message",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ruleName",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#ruleName",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "withMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#withMessage",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "message",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#message",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "explain",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#explain",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setResult",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#setResult",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "currentValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "errorMessage",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#errorMessage",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "validate",
    "memberof": "src/validation/validation-rules.js~ValidationRule",
    "longname": "src/validation/validation-rules.js~ValidationRule#validate",
    "access": null,
    "description": "Validation rules: return a promise that fulfills and resolves to true/false",
    "lineNumber": 52,
    "params": [
      {
        "name": "currentValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "locale",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EmailValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~EmailValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{EmailValidationRule}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~EmailValidationRule",
    "longname": "src/validation/validation-rules.js~EmailValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "emailUserUtf8Regex",
    "memberof": "src/validation/validation-rules.js~EmailValidationRule",
    "longname": "src/validation/validation-rules.js~EmailValidationRule#emailUserUtf8Regex",
    "access": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimumLengthValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MinimumLengthValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MinimumLengthValidationRule}",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MinimumLengthValidationRule",
    "longname": "src/validation/validation-rules.js~MinimumLengthValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "minimumLength",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MaximumLengthValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MaximumLengthValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MaximumLengthValidationRule}",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MaximumLengthValidationRule",
    "longname": "src/validation/validation-rules.js~MaximumLengthValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "maximumLength",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BetweenLengthValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~BetweenLengthValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{BetweenLengthValidationRule}",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~BetweenLengthValidationRule",
    "longname": "src/validation/validation-rules.js~BetweenLengthValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "minimumLength",
        "types": [
          "*"
        ]
      },
      {
        "name": "maximumLength",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CustomFunctionValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~CustomFunctionValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{CustomFunctionValidationRule}",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~CustomFunctionValidationRule",
    "longname": "src/validation/validation-rules.js~CustomFunctionValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "customFunction",
        "types": [
          "*"
        ]
      },
      {
        "name": "threshold",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NumericValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~NumericValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{NumericValidationRule}",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~NumericValidationRule",
    "longname": "src/validation/validation-rules.js~NumericValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RegexValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~RegexValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{RegexValidationRule}",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~RegexValidationRule",
    "longname": "src/validation/validation-rules.js~RegexValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ContainsOnlyValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~ContainsOnlyValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{ContainsOnlyValidationRule}",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "interface": false,
    "extends": [
      "RegexValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~ContainsOnlyValidationRule",
    "longname": "src/validation/validation-rules.js~ContainsOnlyValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "regex",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimumValueValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MinimumValueValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MinimumValueValidationRule}",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MinimumValueValidationRule",
    "longname": "src/validation/validation-rules.js~MinimumValueValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MinimumInclusiveValueValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MinimumInclusiveValueValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MinimumInclusiveValueValidationRule}",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MinimumInclusiveValueValidationRule",
    "longname": "src/validation/validation-rules.js~MinimumInclusiveValueValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MaximumValueValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MaximumValueValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MaximumValueValidationRule}",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MaximumValueValidationRule",
    "longname": "src/validation/validation-rules.js~MaximumValueValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MaximumInclusiveValueValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MaximumInclusiveValueValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MaximumInclusiveValueValidationRule}",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MaximumInclusiveValueValidationRule",
    "longname": "src/validation/validation-rules.js~MaximumInclusiveValueValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BetweenValueValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~BetweenValueValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{BetweenValueValidationRule}",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~BetweenValueValidationRule",
    "longname": "src/validation/validation-rules.js~BetweenValueValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "minimumValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "maximumValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DigitValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~DigitValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{DigitValidationRule}",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~DigitValidationRule",
    "longname": "src/validation/validation-rules.js~DigitValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "digitRegex",
    "memberof": "src/validation/validation-rules.js~DigitValidationRule",
    "longname": "src/validation/validation-rules.js~DigitValidationRule#digitRegex",
    "access": null,
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AlphaNumericValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~AlphaNumericValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{AlphaNumericValidationRule}",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~AlphaNumericValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaNumericValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "alphaNumericRegex",
    "memberof": "src/validation/validation-rules.js~AlphaNumericValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaNumericValidationRule#alphaNumericRegex",
    "access": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AlphaValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~AlphaValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{AlphaValidationRule}",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~AlphaValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "alphaRegex",
    "memberof": "src/validation/validation-rules.js~AlphaValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaValidationRule#alphaRegex",
    "access": null,
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AlphaOrWhitespaceValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~AlphaOrWhitespaceValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{AlphaOrWhitespaceValidationRule}",
    "description": null,
    "lineNumber": 286,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~AlphaOrWhitespaceValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaOrWhitespaceValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 287,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "alphaNumericRegex",
    "memberof": "src/validation/validation-rules.js~AlphaOrWhitespaceValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaOrWhitespaceValidationRule#alphaNumericRegex",
    "access": null,
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AlphaNumericOrWhitespaceValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~AlphaNumericOrWhitespaceValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{AlphaNumericOrWhitespaceValidationRule}",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~AlphaNumericOrWhitespaceValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaNumericOrWhitespaceValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "alphaNumericRegex",
    "memberof": "src/validation/validation-rules.js~AlphaNumericOrWhitespaceValidationRule",
    "longname": "src/validation/validation-rules.js~AlphaNumericOrWhitespaceValidationRule#alphaNumericRegex",
    "access": null,
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "type": {
      "types": [
        "object"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MediumPasswordValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~MediumPasswordValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{MediumPasswordValidationRule}",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~MediumPasswordValidationRule",
    "longname": "src/validation/validation-rules.js~MediumPasswordValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "params": [
      {
        "name": "minimumComplexityLevel",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "StrongPasswordValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~StrongPasswordValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{StrongPasswordValidationRule}",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "interface": false,
    "extends": [
      "MediumPasswordValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~StrongPasswordValidationRule",
    "longname": "src/validation/validation-rules.js~StrongPasswordValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EqualityValidationRuleBase",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~EqualityValidationRuleBase",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{EqualityValidationRuleBase}",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~EqualityValidationRuleBase",
    "longname": "src/validation/validation-rules.js~EqualityValidationRuleBase#constructor",
    "access": null,
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "equality",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherValueLabel",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EqualityValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~EqualityValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{EqualityValidationRule}",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "interface": false,
    "extends": [
      "EqualityValidationRuleBase"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~EqualityValidationRule",
    "longname": "src/validation/validation-rules.js~EqualityValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EqualityWithOtherLabelValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~EqualityWithOtherLabelValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{EqualityWithOtherLabelValidationRule}",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "interface": false,
    "extends": [
      "EqualityValidationRuleBase"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~EqualityWithOtherLabelValidationRule",
    "longname": "src/validation/validation-rules.js~EqualityWithOtherLabelValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherLabel",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InEqualityValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~InEqualityValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{InEqualityValidationRule}",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "interface": false,
    "extends": [
      "EqualityValidationRuleBase"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~InEqualityValidationRule",
    "longname": "src/validation/validation-rules.js~InEqualityValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 369,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InEqualityWithOtherLabelValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~InEqualityWithOtherLabelValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{InEqualityWithOtherLabelValidationRule}",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "interface": false,
    "extends": [
      "EqualityValidationRuleBase"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~InEqualityWithOtherLabelValidationRule",
    "longname": "src/validation/validation-rules.js~InEqualityWithOtherLabelValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "otherValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherLabel",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InCollectionValidationRule",
    "memberof": "src/validation/validation-rules.js",
    "longname": "src/validation/validation-rules.js~InCollectionValidationRule",
    "access": null,
    "export": true,
    "importPath": "aurelia-validation/src/validation/validation-rules.js",
    "importStyle": "{InCollectionValidationRule}",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "interface": false,
    "extends": [
      "ValidationRule"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/validation/validation-rules.js~InCollectionValidationRule",
    "longname": "src/validation/validation-rules.js~InCollectionValidationRule#constructor",
    "access": null,
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Infinity",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~NaN",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~undefined",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~null",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Object",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~object",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Function",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~function",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Boolean",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~boolean",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Symbol",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Error",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~EvalError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~InternalError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~RangeError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~TypeError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~URIError",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Number",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~number",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Date",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~String",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~string",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~RegExp",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Int8Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Int16Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Int32Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Float32Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Float64Array",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Map",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Set",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~WeakMap",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~WeakSet",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~DataView",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~JSON",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Promise",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Generator",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Reflect",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "DefaultExternal/BuiltinExternal.js",
    "longname": "DefaultExternal/BuiltinExternal.js~Proxy",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "DefaultExternal/WebAPIExternal.js",
    "longname": "DefaultExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "defaultExternal": true
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/asyncValidation.spec.js",
    "memberof": null,
    "longname": "test/asyncValidation.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ValidationRule} from '../src/validation/validation-rules';\nimport {ValidationRulesCollection} from '../src/validation/validation-rules-collection';\n\nexport class TestValidationRule extends ValidationRule {\n  constructor(shouldFail) {\n    super(shouldFail, (newValue, threshold) => {\n      return threshold\n    }, \"test rule\");\n  }\n}\n\ndescribe('Tests on async validation: validation rule', () => {\n  it('should fulfil a valid validation and resolve to true', (done) => {\n    var testRule = new TestValidationRule(true);\n    testRule.validate().then(() => {\n      expect(testRule.explain()).toBe(null);\n      done();\n    });\n  });\n  it('should fulfil an invalid validation and resolve to false', (done) => {\n    var testRule = new TestValidationRule(false);\n    testRule.validate().then(() => {\n      expect(testRule.explain()).toBe('test rule');\n      done();\n    });\n  });\n});\ndescribe('Tests on async validation: validation collection', () => {\n  it('should fulfil with a valid validation', (done) => {\n    var testCollection = new ValidationRulesCollection();\n    testCollection.addValidationRule(new TestValidationRule(true));\n    testCollection.validate('test').then((result) => {\n      expect(result.isValid).toBe(true);\n      done();\n    });\n  });\n  it('should fulfil with an invalid validation', (done) => {\n    var testCollection = new ValidationRulesCollection();\n    testCollection.addValidationRule(new TestValidationRule(false));\n    testCollection.validate('test').then((result) => {\n      expect(result.isValid).toBe(false);\n      done();\n    });\n  });\n});\n\ndescribe('Tests on async validation: validation collection with inner collection', () => {\n  it('should fulfil a valid validation', (done) => {\n    var innerTestCollection = new ValidationRulesCollection();\n    innerTestCollection.addValidationRule(new TestValidationRule(true));\n    var testCollection = new ValidationRulesCollection();\n    testCollection.addValidationRuleCollection(innerTestCollection);\n    testCollection.validate('test').then((result) => {\n      expect(result.isValid).toBe(true);\n      done();\n    });\n  });\n\n  it('should fulfil an invalid validation', (done) => {\n    var innerTestCollection = new ValidationRulesCollection();\n    innerTestCollection.addValidationRule(new TestValidationRule(false));\n    innerTestCollection.isNotEmpty();\n    var testCollection = new ValidationRulesCollection();\n    testCollection.addValidationRuleCollection(innerTestCollection);\n    testCollection.validate().then((result) => {\n      expect(result.isValid).toBe(false);\n      done();\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "test/asyncValidation.spec.js",
    "testDepth": 0,
    "longname": "test/asyncValidation.spec.js~describe0",
    "access": null,
    "description": "Tests on async validation: validation rule",
    "lineNumber": 12
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "test/asyncValidation.spec.js~describe0",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe0.it1",
    "access": null,
    "description": "should fulfil a valid validation and resolve to true",
    "lineNumber": 13
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "test/asyncValidation.spec.js~describe0",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe0.it2",
    "access": null,
    "description": "should fulfil an invalid validation and resolve to false",
    "lineNumber": 20
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe3",
    "testId": 3,
    "memberof": "test/asyncValidation.spec.js",
    "testDepth": 0,
    "longname": "test/asyncValidation.spec.js~describe3",
    "access": null,
    "description": "Tests on async validation: validation collection",
    "lineNumber": 28
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "test/asyncValidation.spec.js~describe3",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe3.it4",
    "access": null,
    "description": "should fulfil with a valid validation",
    "lineNumber": 29
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "test/asyncValidation.spec.js~describe3",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe3.it5",
    "access": null,
    "description": "should fulfil with an invalid validation",
    "lineNumber": 37
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe6",
    "testId": 6,
    "memberof": "test/asyncValidation.spec.js",
    "testDepth": 0,
    "longname": "test/asyncValidation.spec.js~describe6",
    "access": null,
    "description": "Tests on async validation: validation collection with inner collection",
    "lineNumber": 47
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "test/asyncValidation.spec.js~describe6",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe6.it7",
    "access": null,
    "description": "should fulfil a valid validation",
    "lineNumber": 48
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "test/asyncValidation.spec.js~describe6",
    "testDepth": 1,
    "longname": "test/asyncValidation.spec.js~describe6.it8",
    "access": null,
    "description": "should fulfil an invalid validation",
    "lineNumber": 59
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/i18n.spec.js",
    "memberof": null,
    "longname": "test/i18n.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\nimport {Validation} from '../src/validation/validation';\nimport {Expectations} from './expectations';\nimport {ValidationConfig} from '../src/validation/validation-config';\n\nclass TestSubject {\n  constructor(validation, callback) {\n    this.firstName = '';\n    this.wealth = '';\n    this.validation = validation.on(this, callback)\n      .ensure('firstName')\n      .isNotEmpty()\n      .ensure('wealth')\n      .isNotEmpty()\n      .isNumber();\n  }\n\n  static createInstance(callback) {\n    return new TestSubject(new Validation(new ObserverLocator()), callback);\n  }\n}\n\ndescribe('I18N tests: messages', () => {\n  it('should use a default message (en-US) without loading a locale', (done) => {\n    var expectations = new Expectations(expect, done);\n\n    var subject = TestSubject.createInstance(null);\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('is required');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n  it('should result in properly translated default error message for nl-BE', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('nl-BE'); });\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('is verplicht');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n  it('should result in properly translated default error message for nl-NL', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('nl-NL'); });\n      expectations.assert(() => {\n        return subject.validation.validate();\n      }, false);\n      expectations.assert(() => {\n        expect(subject.validation.result.properties.firstName.message).toBe('is verplicht');\n        return subject.validation.validate();\n      }, false);\n      expectations.validate();\n  });\n\n  it('can change locale on the fly', (done) => {\n    var expectations = new Expectations(expect, done);\n    var config = new ValidationConfig();\n    var subject = new TestSubject(new Validation(new ObserverLocator(), config));\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.message;}).toBe('is required');\n    expectations.expectAsync(() => { return config.useLocale('nl-BE');}).toBe(config);\n\n    setTimeout(() => {\n      expectations.expectAsync(() => {return subject.validation.result.properties.firstName.message;} ).toBe('is verplicht');\n      expectations.validate();\n    }, 10);\n  });\n\n  it('should result in properly translated default error message for de-DE', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('de-DE'); });\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('wird benötigt');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n\n  it('should result in properly translated default error message for fr-FR', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('fr-FR'); });\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('est obligatoire');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n\n\n  it('should result in properly translated default error message for es-MX', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('es-MX'); });\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('es obligatorio');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n\n  it('should result in properly translated default error message for en-US', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('en-US'); });\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe('is required');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n});\n\ndescribe('I18N tests: number', () => {\n  it('should use a default number format (en-US) without loading a locale', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.assert(() => {\n      subject.firstName = 'John';\n      subject.wealth = '3,000,000.00';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.wealth = '3.000.000';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.wealth.message).toBe('needs to be a number');\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n   });\n  it('should result in properly translated error message', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance((c) => { c.useLocale('nl-BE'); });\n    expectations.assert(() => {\n      subject.firstName = 'John';\n      subject.wealth = '3000000,00';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.wealth = '3000,000,00';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.wealth.message).toBe('moet een getal zijn');\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe9",
    "testId": 9,
    "memberof": "test/i18n.spec.js",
    "testDepth": 0,
    "longname": "test/i18n.spec.js~describe9",
    "access": null,
    "description": "I18N tests: messages",
    "lineNumber": 23
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it10",
    "access": null,
    "description": "should use a default message (en-US) without loading a locale",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it11",
    "access": null,
    "description": "should result in properly translated default error message for nl-BE",
    "lineNumber": 37
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it12",
    "access": null,
    "description": "should result in properly translated default error message for nl-NL",
    "lineNumber": 50
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it13",
    "access": null,
    "description": "can change locale on the fly",
    "lineNumber": 63
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it14",
    "access": null,
    "description": "should result in properly translated default error message for de-DE",
    "lineNumber": 79
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it15",
    "access": null,
    "description": "should result in properly translated default error message for fr-FR",
    "lineNumber": 92
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it16",
    "access": null,
    "description": "should result in properly translated default error message for es-MX",
    "lineNumber": 106
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it17",
    "testId": 17,
    "memberof": "test/i18n.spec.js~describe9",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe9.it17",
    "access": null,
    "description": "should result in properly translated default error message for en-US",
    "lineNumber": 119
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe18",
    "testId": 18,
    "memberof": "test/i18n.spec.js",
    "testDepth": 0,
    "longname": "test/i18n.spec.js~describe18",
    "access": null,
    "description": "I18N tests: number",
    "lineNumber": 133
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "test/i18n.spec.js~describe18",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe18.it19",
    "access": null,
    "description": "should use a default number format (en-US) without loading a locale",
    "lineNumber": 134
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it20",
    "testId": 20,
    "memberof": "test/i18n.spec.js~describe18",
    "testDepth": 1,
    "longname": "test/i18n.spec.js~describe18.it20",
    "access": null,
    "description": "should result in properly translated error message",
    "lineNumber": 154
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/logicalOperators/if-else.integration.spec.js",
    "memberof": null,
    "longname": "test/logicalOperators/if-else.integration.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\nimport {Validation} from '../../src/validation/validation';\nimport {Expectations} from '../expectations';\n\n\nclass TestSubject {\n  constructor(validation, firstName) {\n    this.firstName = firstName;\n    this.age = 18;\n    this.country = 'US';\n    this.state = 'TX';\n    this.validation = validation.on(this);\n  }\n\n  static createInstance(firstName) {\n    return new TestSubject(new Validation(new ObserverLocator()), firstName);\n  }\n}\n\ndescribe('Integration tests with \\'if\\' and \\'else\\'', () => {\n  it('should work with a simple if statement', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('firstName')\n      .if(() => {\n        return subject.age >= 18;\n      })\n      .passes((newValue) => {\n        return newValue === 'John';\n      });\n\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.firstName = 'Bob';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n\n  it('should work with isNotEmpty', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('firstName')\n      .if(() => {\n        return subject.age >= 18;\n      })\n      .isNotEmpty();\n\n    expectations.assert(() => {\n      return subject.validation.validate()\n    }, true);\n    expectations.assert(() => {\n      subject.firstName = null;\n      return subject.validate();\n    }, false);\n    expectations.assert(() => {\n        subject.age = 15;\n        return subject.validate();\n      }\n      , true);\n    expectations.validate();\n  });\n\n  it('should work with a simple if and else statement', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .if(() => {\n        return subject.country === 'US';\n      })\n      .isIn(['TX', 'FL'])\n      .else()\n      .isNotEmpty();\n\n    expectations.assert(()=> {\n      return subject.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = '';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n  it('should work with nested if and else statement', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .if(() => {\n        return subject.country === 'US';\n      })\n      .isIn(['TX', 'FL']) //either 'TX', 'FL' or empty\n      .else()\n      .if(() => {\n        return subject.country === 'Belgium';\n      })\n      .isIn(['WVL', 'OVL']) //either 'WVL', 'OVL' or empty\n      .else()\n      .isNotEmpty();\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, true);\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, false);\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = '';\n      return subject.validation.validate();\n    }, true);\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = '';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n\n  it('should work with endIf and else statement', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .if(() => {\n        return subject.country === 'US';\n      })\n      .isIn(['TX', 'FL'])\n      .if(() => {\n        return subject.state === 'FL'\n      })\n      .passes(() => {\n        return subject.age >= 65;\n      })\n      .endIf() //without endif, the 'else' would apply if state !== 'FL'\n      .else()\n      .passes(() => {\n        return subject.age >= 18;\n      })\n      .endIf()\n      .isNotEmpty();  //Without the endif, the 'isNotEmpty' would only apply to the above else case\n\n    expectations.assert(() => {\n      subject.age = 18;\n      subject.country = 'US';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n\n    expectations.assert(() => {\n      subject.age = 18;\n      subject.country = 'US';\n      subject.state = '';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.age = 18;\n      subject.country = 'US';\n      subject.state = 'FL';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.age = 70;\n      subject.country = 'US';\n      subject.state = 'FL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.age = 18;\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.age = 18;\n      subject.country = 'Belgium';\n      subject.state = '';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "test/logicalOperators/if-else.integration.spec.js",
    "testDepth": 0,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "access": null,
    "description": "Integration tests with 'if' and 'else'",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "testDepth": 1,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21.it22",
    "access": null,
    "description": "should work with a simple if statement",
    "lineNumber": 21
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "testDepth": 1,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21.it23",
    "access": null,
    "description": "should work with isNotEmpty",
    "lineNumber": 45
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "testDepth": 1,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21.it24",
    "access": null,
    "description": "should work with a simple if and else statement",
    "lineNumber": 70
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "testDepth": 1,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21.it25",
    "access": null,
    "description": "should work with nested if and else statement",
    "lineNumber": 106
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "test/logicalOperators/if-else.integration.spec.js~describe21",
    "testDepth": 1,
    "longname": "test/logicalOperators/if-else.integration.spec.js~describe21.it26",
    "access": null,
    "description": "should work with endIf and else statement",
    "lineNumber": 162
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/logicalOperators/switch-case.integration.spec.js",
    "memberof": null,
    "longname": "test/logicalOperators/switch-case.integration.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\nimport {Validation} from '../../src/validation/validation';\nimport {Expectations} from '../expectations';\n\n\nclass TestSubject {\n  constructor(validation, firstName) {\n    this.firstName = firstName;\n    this.age = 18;\n    this.country = 'US';\n    this.state = 'TX';\n    this.validation = validation.on(this);\n  }\n\n  static createInstance(firstName) {\n    return new TestSubject(new Validation(new ObserverLocator()), firstName);\n  }\n}\n\ndescribe('Integration tests with switch cases', () => {\n  it('should work with a simple switch statement', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .isNotEmpty()\n      .switch(() => {\n        return subject.country;\n      })\n      .case('US')\n      .isIn(['TX', 'FL'])\n      .case('Belgium')\n      .isIn(['WVL', 'OVL']);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.validate();\n\n  });\n\n  it('should work with a simple switch statement containing a default', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .isNotEmpty()\n      .switch(() => {\n        return subject.country;\n      })\n      .case('US')\n      .isIn(['TX', 'FL'])\n      .case('Belgium')\n      .isIn(['WVL', 'OVL'])\n      .default()\n      .hasMinLength(3);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.validate();\n  });\n\n  it('should work with a simple switch statement containing an endcase',\n    (done) => {\n      var expectations = new Expectations(expect, done);\n      var subject = TestSubject.createInstance('John');\n      subject.validation\n        .ensure('state')\n        .isNotEmpty()\n        .switch(() => {\n          return subject.country;\n        })\n        .case('US')\n        .isIn(['TX', 'FL'])\n        .case('Belgium')\n        .isIn(['WVL', 'OVL'])\n        .endSwitch()\n        .hasMinLength(3);\n\n      expectations.assert(() => {\n        subject.country = 'US';\n        subject.state = 'TX';\n        return subject.validation.validate();\n      }, false);\n\n      expectations.assert(() => {\n        subject.country = 'Belgium';\n        subject.state = 'WVL';\n        return subject.validation.validate();\n      }, true);\n\n      expectations.assert(() => {\n        subject.country = 'Belgium';\n        subject.state = 'TX';\n        return subject.validation.validate();\n      }, false);\n\n      expectations.assert(() => {\n        subject.country = 'Germany';\n        subject.state = 'TX';\n        return subject.validation.validate();\n      }, false);\n\n      expectations.assert(() => {\n        subject.country = 'Germany';\n        subject.state = 'WVL';\n        return subject.validation.validate();\n      }, true);\n      expectations.validate();\n    });\n  it('should allow the switch-expression to be optional', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('John');\n    subject.validation\n      .ensure('state')\n      .isNotEmpty()\n      .ensure('country')\n      .isNotEmpty()\n      .switch()\n      .case('US')\n      .passes(() => {\n        return subject.state === 'TX';\n      })\n      .case('Belgium')\n      .passes(() => {\n        return subject.state === 'WVL';\n      })\n      .endSwitch();\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'US';\n      subject.state = 'WVL';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Belgium';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.country = 'Germany';\n      subject.state = '';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.country = '';\n      subject.state = 'TX';\n      return subject.validation.validate();\n    }, false);\n\n\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe27",
    "testId": 27,
    "memberof": "test/logicalOperators/switch-case.integration.spec.js",
    "testDepth": 0,
    "longname": "test/logicalOperators/switch-case.integration.spec.js~describe27",
    "access": null,
    "description": "Integration tests with switch cases",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "test/logicalOperators/switch-case.integration.spec.js~describe27",
    "testDepth": 1,
    "longname": "test/logicalOperators/switch-case.integration.spec.js~describe27.it28",
    "access": null,
    "description": "should work with a simple switch statement",
    "lineNumber": 21
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "test/logicalOperators/switch-case.integration.spec.js~describe27",
    "testDepth": 1,
    "longname": "test/logicalOperators/switch-case.integration.spec.js~describe27.it29",
    "access": null,
    "description": "should work with a simple switch statement containing a default",
    "lineNumber": 70
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "test/logicalOperators/switch-case.integration.spec.js~describe27",
    "testDepth": 1,
    "longname": "test/logicalOperators/switch-case.integration.spec.js~describe27.it30",
    "access": null,
    "description": "should work with a simple switch statement containing an endcase",
    "lineNumber": 125
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it31",
    "testId": 31,
    "memberof": "test/logicalOperators/switch-case.integration.spec.js~describe27",
    "testDepth": 1,
    "longname": "test/logicalOperators/switch-case.integration.spec.js~describe27.it31",
    "access": null,
    "description": "should allow the switch-expression to be optional",
    "lineNumber": 173
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/nested-properties.spec.js",
    "memberof": null,
    "longname": "test/nested-properties.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\nimport {Validation} from '../src/validation/validation';\nimport {Expectations} from './expectations';\n\nclass TestSubject {\n  constructor(validation) {\n    this.company = {\n      name: '',\n      city: '',\n      email: '',\n      taps: 0\n    };\n    this.validation = validation.on(this)\n      .ensure('company.name').isNotEmpty()\n      .ensure('company.city').isNotEmpty()\n      .ensure('company.email').isNotEmpty().isEmail()\n      .ensure('company.taps').isNumber().isBetween(1, 500);\n  }\n\n  static createInstance() {\n    return new TestSubject(new Validation(new ObserverLocator()));\n  }\n}\n\ndescribe('Nested property tests', () => {\n  it('should work on empty, nested properties', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n\n  it('should bind to nested properties', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n\n\n    expectations.assert(() => {\n      subject.company.name = 'Bob the builder construction, inc';\n      subject.company.city = 'Bobs town';\n      subject.company.email = 'Bob@thebuilder.com';\n      subject.company.taps = 5;\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.company.email = 'bob.the.builder';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.company.email = 'Bob@thebuilder.com';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.company = null;\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n\n  });\n\n\n  it('should recover when any part of the nested property path changes', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    expectations.assert(() => {\n      subject.company.name = 'Bob the builder construction, inc';\n      subject.company.city = 'Bobs town';\n      subject.company.email = 'Bob@thebuilder.com';\n      subject.company.taps = 5;\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.company.email = 'bob.the.builder';\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.company.email = 'Bob@thebuilder.com';\n      return subject.validation.validate();\n    }, true);\n\n    expectations.assert(() => {\n      subject.company = null;\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      subject.company = {\n        name: '',\n        city: '',\n        email: '',\n        taps: 0\n      };\n\n      subject.company.name = 'Bob the builder construction, inc';\n      subject.company.city = 'Bobs town';\n      subject.company.email = 'Bob@thebuilder.com';\n      subject.company.taps = 5;\n\n      return subject.validation.validate();\n    }, true);\n\n    expectations.validate();\n  });\n  it('should exist only if the observer-locator cannot handle nested paths ', () => {\n    var subject = TestSubject.createInstance();\n    subject.company.email = 'Bob@thebuilder.com';\n\n    var observer = new ObserverLocator()\n      .getObserver(subject, 'company.isEmail');\n\n    expect(observer.getValue()).toBe(undefined);\n    //If this returns \"expected Bob@thebuilder.com to be undefined\", the custom pathObserver implementation can go :)\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe32",
    "testId": 32,
    "memberof": "test/nested-properties.spec.js",
    "testDepth": 0,
    "longname": "test/nested-properties.spec.js~describe32",
    "access": null,
    "description": "Nested property tests",
    "lineNumber": 25
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it33",
    "testId": 33,
    "memberof": "test/nested-properties.spec.js~describe32",
    "testDepth": 1,
    "longname": "test/nested-properties.spec.js~describe32.it33",
    "access": null,
    "description": "should work on empty, nested properties",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "test/nested-properties.spec.js~describe32",
    "testDepth": 1,
    "longname": "test/nested-properties.spec.js~describe32.it34",
    "access": null,
    "description": "should bind to nested properties",
    "lineNumber": 35
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it35",
    "testId": 35,
    "memberof": "test/nested-properties.spec.js~describe32",
    "testDepth": 1,
    "longname": "test/nested-properties.spec.js~describe32.it35",
    "access": null,
    "description": "should recover when any part of the nested property path changes",
    "lineNumber": 67
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "test/nested-properties.spec.js~describe32",
    "testDepth": 1,
    "longname": "test/nested-properties.spec.js~describe32.it36",
    "access": null,
    "description": "should exist only if the observer-locator cannot handle nested paths ",
    "lineNumber": 111
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/on-validate.spec.js",
    "memberof": null,
    "longname": "test/on-validate.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Validation} from '../src/validation/validation';\nimport {ObserverLocator} from 'aurelia-binding';\nimport {Expectations} from './expectations';\n\nclass TestSubject {\n  constructor(validation, firstName) {\n    this.firstName = firstName;\n    this.lastName = 'kinda random';\n    this.validation = validation.on(this)\n      .ensure('firstName').isNotEmpty().hasMinLength(5) ;\n  }\n\n  static createInstance(firstName) {\n    var subject = new TestSubject(new Validation(new ObserverLocator()), firstName);\n    return subject;\n  }\n}\n\ndescribe('Tests on onValidate callbacks', () => {\n  it('should call the callback even if the result is not valid', (done) =>{\n    var expectations = new Expectations(expect, done);\n    var wasCalled = false;\n    var subject = TestSubject.createInstance('Bob');\n    subject.validation.onValidate( () => {\n      wasCalled = true;\n      return {};\n    });\n\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync(() => { return wasCalled;}).toBe(true);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.failingRule;}).toBe('MinimumLengthValidationRule');\n    expectations.validate();\n  });\n\n  it('should correctly handle the result of the callback if it returns true for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : true }\n    });\n    expectations.assert(subject.validation.validate(), true);\n    expectations.validate();\n  });\n\n  it('should correctly handle the result of the callback if it returns a promise that returns true for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return Promise.resolve({firstName : true });\n    });\n    expectations.assert(subject.validation.validate(), true);\n    expectations.validate();\n  });\n\n  it('should correctly handle the result of the callback if it returns null for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : null }\n    });\n    expectations.assert(subject.validation.validate(), true);\n    expectations.validate();\n  });\n\n  it('should correctly handle the result of the callback if it returns an empty string for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : '' }\n    });\n    expectations.assert(subject.validation.validate(), true);\n    expectations.validate();\n  });\n\n\n\n  it('should correctly handle the result of the callback if it returns false for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : false }\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.message}).toBe('not a valid value');\n    expectations.validate();\n  });\n\n  it('should not overwrite an already failing property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bob');\n    subject.validation.onValidate( () => {\n      return {firstName : false }\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.failingRule;}).toBe('MinimumLengthValidationRule');\n    expectations.validate();\n  });\n\n\n  it('should correctly handle the result of the callback if it returns a promise that returns false for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return Promise.resolve({firstName : false });\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.message}).toBe('not a valid value');\n    expectations.validate();\n  });\n\n\n  it('should correctly handle the result of the callback if it returns a non empty string for a property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : 'this is not valid' }\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync(() => { return subject.validation.result.properties.firstName.message}).toBe('this is not valid');\n    expectations.validate();\n  });\n\n\n  it('should call the callback if the result is invalid due to a previous callback', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return {firstName : false }\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.assert( () => {\n      subject.validation.onValidate( () => {return { firstName : true };});\n      return subject.validation.validate();\n    }, true);\n    expectations.validate();\n  });\n\n  it('should not have to return values for properties that are now valid', (done) => {\n    var shouldFail = true;\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      if(shouldFail)\n        return {firstName : false };\n      else\n       return {};\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.assert( () => {\n      shouldFail = false;\n      return subject.validation.validate();\n    }, true);\n    expectations.validate();\n  });\n\n\n  it('should not have to return values for properties that are now valid and have no other validation rules', (done) => {\n    var shouldFail = true;\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      if(shouldFail)\n        return { lastName : false };\n      else\n        return {};\n    });\n    expectations.assert(subject.validation.validate(), false);\n    expectations.assert( () => {\n      shouldFail = false;\n      return subject.validation.validate();\n    }, true);\n    expectations.validate();\n  });\n\n  it('should have a mechanism to determine rejected promises', (done) => {\n    var shouldFail = true;\n    var wasCalled = false;\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance('Bobbette');\n    subject.validation.onValidate( () => {\n      return Promise.reject('something went wrong...');\n    }, () => {\n        wasCalled = true;\n      }\n    );\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync( () => { return wasCalled; }).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe37",
    "testId": 37,
    "memberof": "test/on-validate.spec.js",
    "testDepth": 0,
    "longname": "test/on-validate.spec.js~describe37",
    "access": null,
    "description": "Tests on onValidate callbacks",
    "lineNumber": 19
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it38",
    "access": null,
    "description": "should call the callback even if the result is not valid",
    "lineNumber": 20
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it39",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns true for a property",
    "lineNumber": 35
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it40",
    "testId": 40,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it40",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns a promise that returns true for a property",
    "lineNumber": 45
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it41",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns null for a property",
    "lineNumber": 55
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it42",
    "testId": 42,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it42",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns an empty string for a property",
    "lineNumber": 65
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it43",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns false for a property",
    "lineNumber": 77
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it44",
    "testId": 44,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it44",
    "access": null,
    "description": "should not overwrite an already failing property",
    "lineNumber": 88
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it45",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns a promise that returns false for a property",
    "lineNumber": 100
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it46",
    "access": null,
    "description": "should correctly handle the result of the callback if it returns a non empty string for a property",
    "lineNumber": 112
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it47",
    "testId": 47,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it47",
    "access": null,
    "description": "should call the callback if the result is invalid due to a previous callback",
    "lineNumber": 124
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it48",
    "access": null,
    "description": "should not have to return values for properties that are now valid",
    "lineNumber": 138
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it49",
    "access": null,
    "description": "should not have to return values for properties that are now valid and have no other validation rules",
    "lineNumber": 157
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "test/on-validate.spec.js~describe37",
    "testDepth": 1,
    "longname": "test/on-validate.spec.js~describe37.it50",
    "access": null,
    "description": "should have a mechanism to determine rejected promises",
    "lineNumber": 175
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/path-observer.spec.js",
    "memberof": null,
    "longname": "test/path-observer.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ObserverLocator} from 'aurelia-binding';\nimport {PathObserver} from '../src/validation/path-observer';\n\n\ndescribe('PathObserver tests', () => {\n  it('should be able to track a path (2 parts)', (done) => {\n    var subject = {\n      company: {\n        responsible: {\n          email: 'bob@thebuilder.com'\n        }\n      }\n    };\n    var observerLocator = new ObserverLocator();\n    var pathObserver = new PathObserver(observerLocator, subject, 'company.responsible.email');\n    expect(pathObserver.getValue()).toBe('bob@thebuilder.com');\n\n    subject.company.responsible.email = 'bob2';\n    setTimeout(() => {\n      expect(pathObserver.getValue()).toBe('bob2');\n\n      subject.company.responsible = null;\n      setTimeout(() => {\n        expect(pathObserver.getValue()).toBe(undefined);\n\n        subject.company = {\n          responsible: {\n            email: 'bob3'\n          }\n        };\n        setTimeout(() => {\n          expect(pathObserver.getValue()).toBe('bob3');\n          done();\n        });\n      });\n\n    });\n\n  });\n\n\n  it('should be able to track a path (3 parts)', (done) => {\n    var subject = {\n      company: {\n        responsible: {\n          email: 'bob@thebuilder.com'\n        }\n      }\n    };\n    var observerLocator = new ObserverLocator();\n    var pathObserver = new PathObserver(observerLocator, subject, 'company.responsible.email');\n    expect(pathObserver.getValue()).toBe('bob@thebuilder.com');\n\n    subject.company.responsible.email = 'bob2';\n    setTimeout(() => {\n      expect(pathObserver.getValue()).toBe('bob2');\n\n      subject.company = null;\n      setTimeout(() => {\n        expect(pathObserver.getValue()).toBe(undefined);\n\n        subject.company = {\n          responsible: {\n            email: 'bob3'\n          }\n        };\n        setTimeout(() => {\n          expect(pathObserver.getValue()).toBe('bob3');\n          done();\n        });\n      });\n\n    });\n\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe51",
    "testId": 51,
    "memberof": "test/path-observer.spec.js",
    "testDepth": 0,
    "longname": "test/path-observer.spec.js~describe51",
    "access": null,
    "description": "PathObserver tests",
    "lineNumber": 5
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "test/path-observer.spec.js~describe51",
    "testDepth": 1,
    "longname": "test/path-observer.spec.js~describe51.it52",
    "access": null,
    "description": "should be able to track a path (2 parts)",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it53",
    "testId": 53,
    "memberof": "test/path-observer.spec.js~describe51",
    "testDepth": 1,
    "longname": "test/path-observer.spec.js~describe51.it53",
    "access": null,
    "description": "should be able to track a path (3 parts)",
    "lineNumber": 42
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validateCustomAttribute/validate-custom-attribute.spec.js",
    "memberof": null,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Validation} from '../../src/validation/validation';\nimport {ValidateCustomAttribute} from '../../src/validation/validate-custom-attribute';\nimport {ValidateCustomAttributeViewStrategy} from '../../src/validation/validate-custom-attribute-view-strategy';\nimport {Expectations} from '../expectations';\nimport {ObserverLocator} from 'aurelia-binding';\n\n\nclass TestSubject {\n  constructor(validation, callback) {\n    this.firstName = 'John';\n    this.lastName = 'Doe';\n    this.address = {};\n    this.validation = validation.on(this, callback)\n      .ensure('firstName')\n      .isNotEmpty()\n      .hasLengthBetween(3, 10)\n      .ensure('lastName')\n      .isNotEmpty()\n      .hasLengthBetween(3, 10);\n  }\n\n  static createInstance(callback) {\n    return new TestSubject(new Validation(new ObserverLocator()), callback);\n  }\n}\n\nclass NestedTestSubject {\n  constructor(validation, callback) {\n    this.address =\n    {\n      street: 'fakestreet',\n      number: '123'\n\n    };\n    this.validationNested = validation.on(this, callback)\n      .ensure('address.street')\n      .isNotEmpty()\n      .hasLengthBetween(3, 10)\n      .ensure('address.number')\n      .isNotEmpty()\n      .hasLengthBetween(1, 10);\n\n    this.validation = validation.on(this.address, callback)\n      .ensure('street')\n      .isNotEmpty()\n      .hasLengthBetween(3, 10)\n      .ensure('number')\n      .isNotEmpty()\n      .hasLengthBetween(1, 10);\n  }\n\n  static createInstance(callback) {\n    return new NestedTestSubject(new Validation(new ObserverLocator()), callback);\n  }\n\n}\nclass TestDOM {\n  static createElement(html) {\n    var element = document.createElement('DIV');\n    element.innerHTML = html;\n    return element.children[0];\n  }\n}\n\ndescribe('Tests on ValidateCustomAttribute', () => {\n  it('should be working with a simple use case', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label for=\"fn\" id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label for=\"ln\"  id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n    subject.firstName = '';\n\n    expectations.assert( subject.validation.validate(), false);\n\n    expectations.assert(() => {\n      //default: adds 'has-warning'/'has-success' to form-group\n      var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n      expect(firstNameGroup.classList.contains('has-warning')).toBe(true);\n\n      var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n      expect(lastNameGroup.classList.contains('has-success')).toBe(true);\n\n\n      //default: adds <p> after label\n      var firstNameLabel = testHTML.querySelector('#labelFirstName');\n      var firstNameMessage = firstNameLabel.nextSibling;\n      expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n      expect(firstNameMessage.textContent).toBe('is required');\n\n\n      //default: adds <p> after element\n      var lastNameLabel = testHTML.querySelector('#labelLastName');\n      var lastNameMessage = lastNameLabel.nextSibling;\n      expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n      expect(lastNameMessage.textContent).toBe('');\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n\n\n  });\n\n  it('should be working with a different view strategy', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance( (config) => {config.useViewStrategy(ValidateCustomAttributeViewStrategy.TWBootstrapAppendToInput)});\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label for=\"fn\" id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label for=\"ln\"  id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n    subject.firstName = '';\n\n    expectations.assert( subject.validation.validate(), false);\n\n    expectations.assert(() => {\n      //default: adds 'has-warning'/'has-success' to form-group\n      var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n      expect(firstNameGroup.classList.contains('has-warning')).toBe(true);\n\n      var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n      expect(lastNameGroup.classList.contains('has-success')).toBe(true);\n\n\n      //new view strategy: adds <p> after input\n      var firstNameLabel = testHTML.querySelector('#fn');\n      var firstNameMessage = firstNameLabel.nextSibling;\n      expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n      expect(firstNameMessage.textContent).toBe('is required');\n\n\n      //default: adds <p> after element\n      var lastNameLabel = testHTML.querySelector('#ln');\n      var lastNameMessage = lastNameLabel.nextSibling;\n      expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n      expect(lastNameMessage.textContent).toBe('');\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n\n\n  });\n\n\n  it('should be working with a bindings that contain a valueFormatter', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label for=\"fn\" id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"firstName | toUpper\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label for=\"ln\"  id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"lastName | trim | toLower\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n    subject.firstName = '';\n\n    expectations.assert( subject.validation.validate(), false);\n\n    expectations.assert(() => {\n//default: adds 'has-warning'/'has-success' to form-group\n      var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n      expect(firstNameGroup.classList.contains('has-warning')).toBe(true);\n\n      var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n      expect(lastNameGroup.classList.contains('has-success')).toBe(true);\n\n\n      //default: adds <p> after label\n      var firstNameLabel = testHTML.querySelector('#labelFirstName');\n      var firstNameMessage = firstNameLabel.nextSibling;\n      expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n      expect(firstNameMessage.textContent).toBe('is required');\n\n\n      //default: adds <p> after element\n      var lastNameLabel = testHTML.querySelector('#labelLastName');\n      var lastNameMessage = lastNameLabel.nextSibling;\n      expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n      expect(lastNameMessage.textContent).toBe('');\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n\n\n  });\n\n\n  it('should add \"success\" to properties that have no rules defined', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupAddress\">\n            <label for=\"ad\" id=\"labelAddress\" >Address</label>\n            <input type=\"text\" value.bind=\"address\" class=\"form-control\" id=\"ad\" placeholder=\"address\" validate=\"address\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n\n    expectations.assert(() => {\n      subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      //default: adds 'has-warning'/'has-success' to form-group\n      var addressGroup = testHTML.querySelector('#formGroupAddress');\n      expect(addressGroup.classList.contains('has-success')).toBe(true);\n\n      //default: adds <p> after label\n      var addressLabel = testHTML.querySelector('#labelAddress');\n      var addressMessage = addressLabel.nextSibling;\n      expect(addressMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(addressMessage.classList.contains('help-block')).toBe(true);\n      expect(addressMessage.textContent).toBe('');\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n\n\n  });\n\n  it('should be working even before validate() is called', (done) => {\n    var subject = TestSubject.createInstance();\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label for=\"fn\" id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label for=\"ln\"  id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n    setTimeout(() => {\n      //default: adds 'has-warning'/'has-success' to form-group\n      var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n      expect(firstNameGroup.classList.contains('has-warning')).toBe(false);\n\n      var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n      expect(lastNameGroup.classList.contains('has-success')).toBe(false);\n\n\n      //default: adds <p> after label\n      var firstNameLabel = testHTML.querySelector('#labelFirstName');\n      var firstNameMessage = firstNameLabel.nextSibling;\n      expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n      expect(firstNameMessage.textContent).toBe('');\n\n\n      //default: adds <p> after element\n      var lastNameLabel = testHTML.querySelector('#labelLastName');\n      var lastNameMessage = lastNameLabel.nextSibling;\n      expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n      expect(lastNameMessage.textContent).toBe('');\n      done();\n    }, 0);\n  });\n\n\n  describe('Tests on ValidateCustomAttribute', () => {\n    it('should be working if labels have no proper \"for\" attribute', (done) => {\n      var expectations = new Expectations(expect, done);\n      var subject = TestSubject.createInstance();\n      var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n      var behavior = new ValidateCustomAttribute(testHTML);\n      behavior.value = subject.validation;\n      behavior.attached();\n\n      subject.firstName = '';\n\n      expectations.assert( subject.validation.validate(), false);\n\n      expectations.assert(() => {\n\n        //default: adds 'has-warning'/'has-success' to form-group\n        var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n        expect(firstNameGroup.classList.contains('has-warning')).toBe(true);\n\n        var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n        expect(lastNameGroup.classList.contains('has-success')).toBe(true);\n\n\n        //default: adds <p> after label\n        var firstNameLabel = testHTML.querySelector('#labelFirstName');\n        var firstNameMessage = firstNameLabel.nextSibling;\n        expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n        expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n        expect(firstNameMessage.textContent).toBe('is required');\n\n\n        //default: adds <p> after element\n        var lastNameLabel = testHTML.querySelector('#labelLastName');\n        var lastNameMessage = lastNameLabel.nextSibling;\n        expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n        expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n        expect(lastNameMessage.textContent).toBe('');\n        return Promise.resolve(true);\n      }, true);\n\n      expectations.validate();\n\n\n    });\n  });\n\n  it('should be working with nested properties', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = NestedTestSubject.createInstance(null);\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupStreet\">\n            <label for=\"fn\" id=\"labelStreet\" >Street</label>\n            <input type=\"text\" value.bind=\"address.street\" class=\"form-control\" id=\"fn\" placeholder=\"street\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupNumber\">\n            <label for=\"ln\"  id=\"labelNumber\">Number</label>\n            <input type=\"text\" value.bind=\"address.number\" class=\"form-control\" id=\"ln\" placeholder=\"number\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validationNested;\n    behavior.attached();\n\n    subject.address.street = '';\n\n    expectations.assert( subject.validationNested.validate(), false);\n\n    expectations.assert(() => {\n\n      //default: adds 'has-warning'/'has-success' to form-group\n      var streetGroup = testHTML.querySelector('#formGroupStreet');\n      expect(streetGroup.classList.contains('has-warning')).toBe(true);\n\n      var numberGroup = testHTML.querySelector('#formGroupNumber');\n      expect(numberGroup.classList.contains('has-success')).toBe(true);\n\n\n      //default: adds <p> after label\n      var streetLabel = testHTML.querySelector('#labelStreet');\n      var streetMessage = streetLabel.nextSibling;\n      expect(streetMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(streetMessage.classList.contains('help-block')).toBe(true);\n      expect(streetMessage.textContent).toBe('is required');\n\n\n      //default: adds <p> after element\n      var numberLabel = testHTML.querySelector('#labelNumber');\n      var numberMessage = numberLabel.nextSibling;\n      expect(numberMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(numberMessage.classList.contains('help-block')).toBe(true);\n      expect(numberMessage.textContent).toBe('');\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n  });\n\n  it('should only use the \"value.bind\" if no extra \"validate\" attribute is present', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance();\n    var testHTML = TestDOM.createElement(`<form role=\"form\" submit.delegate=\"welcome()\" >\n            <div class=\"form-group\" id=\"formGroupFirstName\">\n            <label for=\"fn\" id=\"labelFirstName\" >First Name</label>\n            <input type=\"text\" value.bind=\"lastName\" validate=\"firstName\" class=\"form-control\" id=\"fn\" placeholder=\"first name\">\n            </div>\n            <div class=\"form-group\" id=\"formGroupLastName\">\n            <label for=\"ln\"  id=\"labelLastName\">Last Name</label>\n            <input type=\"text\" value.bind=\"firstName\" validate=\"lastName\" class=\"form-control\" id=\"ln\" placeholder=\"last name\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n            </form>`);\n    var behavior = new ValidateCustomAttribute(testHTML);\n    behavior.value = subject.validation;\n    behavior.attached();\n\n    subject.firstName = '';\n\n    expectations.assert( subject.validation.validate(), false);\n\n    expectations.assert(() => {\n\n      //default: adds 'has-warning'/'has-success' to form-group\n      var firstNameGroup = testHTML.querySelector('#formGroupFirstName');\n      expect(firstNameGroup.classList.contains('has-warning')).toBe(true);\n\n      var lastNameGroup = testHTML.querySelector('#formGroupLastName');\n      expect(lastNameGroup.classList.contains('has-success')).toBe(true);\n\n\n      //default: adds <p> after label\n      var firstNameLabel = testHTML.querySelector('#labelFirstName');\n      var firstNameMessage = firstNameLabel.nextSibling;\n      expect(firstNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(firstNameMessage.classList.contains('help-block')).toBe(true);\n      expect(firstNameMessage.textContent).toBe('is required');\n\n\n      //default: adds <p> after element\n      var lastNameLabel = testHTML.querySelector('#labelLastName');\n      var lastNameMessage = lastNameLabel.nextSibling;\n      expect(lastNameMessage.classList.contains('aurelia-validation-message')).toBe(true);\n      expect(lastNameMessage.classList.contains('help-block')).toBe(true);\n      expect(lastNameMessage.textContent).toBe('');\n\n      return Promise.resolve(true);\n    }, true);\n\n    expectations.validate();\n  });\n});\n\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe54",
    "testId": 54,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js",
    "testDepth": 0,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "access": null,
    "description": "Tests on ValidateCustomAttribute",
    "lineNumber": 65
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it55",
    "access": null,
    "description": "should be working with a simple use case",
    "lineNumber": 66
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it56",
    "testId": 56,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it56",
    "access": null,
    "description": "should be working with a different view strategy",
    "lineNumber": 119
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it57",
    "access": null,
    "description": "should be working with a bindings that contain a valueFormatter",
    "lineNumber": 173
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it58",
    "access": null,
    "description": "should add \"success\" to properties that have no rules defined",
    "lineNumber": 227
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it59",
    "access": null,
    "description": "should be working even before validate() is called",
    "lineNumber": 265
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe60",
    "testId": 60,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.describe60",
    "access": null,
    "description": "Tests on ValidateCustomAttribute",
    "lineNumber": 310
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it61",
    "testId": 61,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.describe60",
    "testDepth": 2,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.describe60.it61",
    "access": null,
    "description": "should be working if labels have no proper \"for\" attribute",
    "lineNumber": 311
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it62",
    "access": null,
    "description": "should be working with nested properties",
    "lineNumber": 366
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54",
    "testDepth": 1,
    "longname": "test/validateCustomAttribute/validate-custom-attribute.spec.js~describe54.it63",
    "access": null,
    "description": "should only use the \"value.bind\" if no extra \"validate\" attribute is present",
    "lineNumber": 418
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validation-api.spec.js",
    "memberof": null,
    "longname": "test/validation-api.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Validation} from '../src/validation/validation';\nimport {ObserverLocator} from 'aurelia-binding';\nimport {Expectations} from './expectations';\nimport {ValidationConfig} from '../src/validation/validation-config';\n\nclass APITest{\n  constructor(propertyValue, validation)\n  {\n    this.propertyValue = propertyValue;\n    this.validation = validation.on(this).ensure('propertyValue');\n  }\n  static Assert( expectations, callback, value, validity )\n  {\n    var subject = new APITest(value, new Validation(new ObserverLocator()));\n    expect(callback(subject.validation)).toBe(subject.validation); //without this, the fluent API would break\n    expectations.assert(subject.validation.validate(), validity); //simple check if it also works\n    expectations.assert( () => { //and a check if valid has message '', invalid has an actual message\n        expect(subject.validation.result.properties.propertyValue.message.length > 1).toBe(!validity);\n      return Promise.resolve(true);\n    }, true);\n  }\n}\n\n//Note: tests are kept short for readability. For each rule, there are extensive tests in test/validationRules\ndescribe('Some simple API tests', ()=>{\n  it('on containsOnly()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return v.containsOnly(/^[a-z]+$/i);}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnly(/^[a-z]+$/i);}, '1', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyAlpha()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlpha();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlpha();}, ' a', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlpha();}, '1', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyAlphaOrWhitespace()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphaOrWhitespace();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphaOrWhitespace();}, 'a a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphaOrWhitespace();}, '1', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyAlphanumericsOrWhitespace()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumericsOrWhitespace();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumericsOrWhitespace();}, '1', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumericsOrWhitespace();}, 'a a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumericsOrWhitespace();}, '*', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyAlphanumerics()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumerics();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumerics();}, '1', true);\n    APITest.Assert(expectations, (v) =>{ return  v.containsOnlyAlphanumerics();}, '*', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyAlphanumerics();}, 'a ', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyDigits()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyDigits();}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyDigits();}, '1.2', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyDigits();}, '1', true);\n    expectations.validate();\n  });\n\n  it('on containsOnlyLetters()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLetters();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLetters();}, 'a ', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLetters();}, '1', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLetters();}, '*', false);\n    expectations.validate();\n  });\n\n  it('on containsOnlyLettersOrWhitespace()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLettersOrWhitespace();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLettersOrWhitespace();}, ' ', true);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLettersOrWhitespace();}, '1', false);\n    APITest.Assert(expectations, (v) => { return  v.containsOnlyLettersOrWhitespace();}, '*', false);\n    expectations.validate();\n  });\n\n  it('on hasLengthBetween()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.hasLengthBetween(2,4);}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.hasLengthBetween(2,3);}, 'ab', true);\n    APITest.Assert(expectations, (v) => { return  v.hasLengthBetween(2,3);}, 'abc', true);\n    APITest.Assert(expectations, (v) => { return  v.hasLengthBetween(2,3);}, 'abcd', false);\n    expectations.validate();\n  });\n\n  it('on hasMinLength()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.hasMinLength(2);}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.hasMinLength(2);}, 'ab', true);\n    expectations.validate();\n  });\n\n  it('on hasMaxLength()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.hasMaxLength(1);}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.hasMaxLength(1);}, 'ab', false);\n    expectations.validate();\n  });\n\n  it('on isBetween()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isBetween(2,3);}, 1, false);\n    APITest.Assert(expectations, (v) => { return  v.isBetween(2,3);}, 2, true);\n    APITest.Assert(expectations, (v) => { return  v.isBetween(2,3);}, 3, true);\n    APITest.Assert(expectations, (v) => { return  v.isBetween(2,3);}, 4, false);\n    expectations.validate();\n  });\n\n  it('on isEmail()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isEmail();}, 'bob@thebuilder.com', true);\n    APITest.Assert(expectations, (v) => { return  v.isEmail();}, 'bob', false);\n    expectations.validate();\n  });\n\n  it('on isEqualTo()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isEqualTo('a');}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.isEqualTo('a');}, 'b', false);\n    expectations.validate();\n  });\n\n  it('on isGreaterThan()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThan(2);}, 1, false);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThan(2);}, 2, false);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThan(2);}, 3, true);\n    expectations.validate();\n  });\n\n  it('on isGreaterThanOrEqualTo()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThanOrEqualTo(2);}, 1, false);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThanOrEqualTo(2);}, 2, true);\n    APITest.Assert(expectations, (v) => { return  v.isGreaterThanOrEqualTo(2);}, 3, true);\n    expectations.validate();\n  });\n\n  it('on isLessThan()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isLessThan(2);}, 1, true);\n    APITest.Assert(expectations, (v) => { return  v.isLessThan(2);}, 2, false);\n    APITest.Assert(expectations, (v) => { return  v.isLessThan(2);}, 3, false);\n    expectations.validate();\n });\n\n  it('on isLessThanOrEqualTo()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isLessThanOrEqualTo(2);}, 1, true);\n    APITest.Assert(expectations, (v) => { return  v.isLessThanOrEqualTo(2);}, 2, true);\n    APITest.Assert(expectations, (v) => { return  v.isLessThanOrEqualTo(2);}, 3, false);\n    expectations.validate();\n  });\n\n  it('on isIn()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isIn(['a','b']);}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.isIn(['a','b']);}, 'b', true);\n    APITest.Assert(expectations, (v) => { return  v.isIn(['a','b']);}, 'c', false);\n    expectations.validate();\n  });\n\n  it('on isNotEmpty()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isNotEmpty();}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.isNotEmpty();}, '', false);\n    APITest.Assert(expectations, (v) => { return  v.isNotEmpty();}, null, false);\n    expectations.validate();\n  });\n\n  it('on isNumber()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isNumber();}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.isNumber();}, 1, true);\n    APITest.Assert(expectations, (v) => { return  v.isNumber();}, '1', true);\n    APITest.Assert(expectations, (v) => { return  v.isNumber();}, '3.14', true);\n    expectations.validate();\n  });\n\n  it('on isStrongPassword()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isStrongPassword();}, 'aB*1', true);\n    APITest.Assert(expectations, (v) => { return  v.isStrongPassword();}, 'aBcD', false);\n    APITest.Assert(expectations, (v) => { return  v.isStrongPassword(2);}, 'aBcD', true);\n    expectations.validate();\n  });\n\n  it('on isNotEqualTo()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isNotEqualTo('a');}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.isNotEqualTo('a');}, 'b', true);\n    expectations.validate();\n  });\n\n\n  it('on matches()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.matches(/^\\d+$/);}, '1', true);\n    APITest.Assert(expectations, (v) => { return  v.matches(/^\\d+$/);}, 'b', false);\n    expectations.validate();\n  });\n\n  it('on passes()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return true; });}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return Promise.resolve(true); });}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return Promise.resolve(false); });}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return Promise.resolve('a custom message'); });}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return Promise.reject(); });}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return false; });}, 'a', false);\n    APITest.Assert(expectations, (v) => { return  v.passes(() => { return 'a custom message'; });}, 'a', false);\n    expectations.validate();\n  });\n\n\n  it('on withMessage()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.isEqualTo('a').withMessage('a custom message');}, 'a', true);\n    APITest.Assert(expectations, (v) => { return  v.isEqualTo('a').withMessage('a custom message');}, 'b', false);\n    APITest.Assert(expectations, (v) => { return  v.isEqualTo('a').withMessage( (newValue, threshold) => { return 'a custom message from a function';});}, 'b', false);\n    APITest.Assert(expectations, (y) => { return  y.isNotEmpty().withMessage('a custom message');}, '', false);\n    APITest.Assert(expectations, (y) => { return  y.isNotEmpty().withMessage( (newValue) => { return 'a custom message from a function';}) ;}, '', false);\n    expectations.validate();\n  });\n\n  it('on onValidate()', (done) => {\n    var expectations = new Expectations(expect, done);\n    APITest.Assert(expectations, (v) => { return  v.onValidate(() => { return  {  'propertyValue' : false }; }) }, 'a', false);\n    expectations.validate();\n  });\n\n});\n\ndescribe('Some simple tests on .result', ()=>{\n  it('on individual valid properties', (done) => {\n    var expectations = new Expectations(expect, done);\n\n    let subject = { password : 'Abc*12345' };\n    subject.validation = new Validation(new ObserverLocator(), new ValidationConfig()).on(subject)\n      .ensure('password').isNotEmpty().hasMinLength(8).isStrongPassword();\n\n    expectations.assert(subject.validation.validate(), true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isValid }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isDirty }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.message }).toBe('');\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.failingRule }).toBe(null);\n    expectations.validate();\n  });\n  it('on individual invalid properties', (done) => {\n    var expectations = new Expectations(expect, done);\n\n    let subject = { password : 'abc' };\n    subject.validation = new Validation(new ObserverLocator(), new ValidationConfig()).on(subject)\n      .ensure('password').isNotEmpty().hasMinLength(8).isStrongPassword();\n\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isValid }).toBe(false);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isDirty }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.message }).toBe('needs to be at least 8 characters long');\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.failingRule }).toBe('MinimumLengthValidationRule');\n    expectations.validate();\n  });\n\n  it('on individual invalid properties after reset', (done) => {\n    var expectations = new Expectations(expect, done);\n\n    let subject = { password : 'abc' };\n    subject.validation = new Validation(new ObserverLocator(), new ValidationConfig()).on(subject)\n      .ensure('password').isNotEmpty().hasMinLength(8).isStrongPassword();\n\n    expectations.assert(subject.validation.validate(), false);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isValid }).toBe(false);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isDirty }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.message }).toBe('needs to be at least 8 characters long');\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.failingRule }).toBe('MinimumLengthValidationRule');\n\n\n    expectations.expectAsync(() =>{\n      subject.password = 'def';\n      subject.validation.clear();\n      return true;\n    }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isValid }).toBe(true);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.isDirty }).toBe(false);\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.message }).toBe('');\n    expectations.expectAsync( () => { return subject.validation.result.properties.password.failingRule }).toBe(null);\n    expectations.validate();\n  });\n\n});\n\ndescribe('Some simple configuration API tests', ()=>{\n  it('on computedFrom with a single dependencies', (done) => {\n    let subject = { password : 'Abc*12345', confirmPassword : 'Abc*12345' };\n    subject.validation = new Validation(new ObserverLocator(), new ValidationConfig()).on(subject)\n      .ensure('password').isNotEmpty().hasMinLength(8).isStrongPassword()\n      .ensure('confirmPassword', (c) => {c.computedFrom('password')}).isNotEmpty().isEqualTo(() => { return subject.password});\n\n    setTimeout(()=>{\n      expect(subject.validation.result.properties.password.isValid).toBe(true);\n      expect(subject.validation.result.properties.confirmPassword.isValid).toBe(true);\n\n      subject.password = 'aBc!54321';\n      setTimeout(()=>{\n        expect(subject.validation.result.properties.password.isValid).toBe(true);\n        expect(subject.validation.result.properties.confirmPassword.isValid).toBe(false);\n        done();\n      },10);\n    });\n  });\n  it('on computedFrom with an array of string dependencies', (done) => {\n    let subject = { password : 'Abc*12345', confirmPassword : 'Abc*12345' };\n    subject.validation = new Validation(new ObserverLocator(), new ValidationConfig()).on(subject)\n      .ensure('password').isNotEmpty().hasMinLength(8).isStrongPassword()\n      .ensure('confirmPassword', (c) => {c.computedFrom(['someProperty','password'])}).isNotEmpty().isEqualTo(() => { return subject.password});\n\n    setTimeout(()=>{\n      expect(subject.validation.result.properties.password.isValid).toBe(true);\n      expect(subject.validation.result.properties.confirmPassword.isValid).toBe(true);\n\n      subject.password = 'aBc!54321';\n      setTimeout(()=>{\n        expect(subject.validation.result.properties.password.isValid).toBe(true);\n        expect(subject.validation.result.properties.confirmPassword.isValid).toBe(false);\n        done();\n      },10);\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe64",
    "testId": 64,
    "memberof": "test/validation-api.spec.js",
    "testDepth": 0,
    "longname": "test/validation-api.spec.js~describe64",
    "access": null,
    "description": "Some simple API tests",
    "lineNumber": 25
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it65",
    "access": null,
    "description": "on containsOnly()",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it66",
    "access": null,
    "description": "on containsOnlyAlpha()",
    "lineNumber": 33
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it67",
    "testId": 67,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it67",
    "access": null,
    "description": "on containsOnlyAlphaOrWhitespace()",
    "lineNumber": 41
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it68",
    "access": null,
    "description": "on containsOnlyAlphanumericsOrWhitespace()",
    "lineNumber": 49
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it69",
    "testId": 69,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it69",
    "access": null,
    "description": "on containsOnlyAlphanumerics()",
    "lineNumber": 58
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it70",
    "access": null,
    "description": "on containsOnlyDigits()",
    "lineNumber": 67
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it71",
    "access": null,
    "description": "on containsOnlyLetters()",
    "lineNumber": 75
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it72",
    "access": null,
    "description": "on containsOnlyLettersOrWhitespace()",
    "lineNumber": 84
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it73",
    "access": null,
    "description": "on hasLengthBetween()",
    "lineNumber": 93
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it74",
    "access": null,
    "description": "on hasMinLength()",
    "lineNumber": 102
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it75",
    "access": null,
    "description": "on hasMaxLength()",
    "lineNumber": 109
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it76",
    "access": null,
    "description": "on isBetween()",
    "lineNumber": 116
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it77",
    "access": null,
    "description": "on isEmail()",
    "lineNumber": 125
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it78",
    "access": null,
    "description": "on isEqualTo()",
    "lineNumber": 132
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it79",
    "testId": 79,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it79",
    "access": null,
    "description": "on isGreaterThan()",
    "lineNumber": 139
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it80",
    "testId": 80,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it80",
    "access": null,
    "description": "on isGreaterThanOrEqualTo()",
    "lineNumber": 147
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it81",
    "access": null,
    "description": "on isLessThan()",
    "lineNumber": 155
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it82",
    "testId": 82,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it82",
    "access": null,
    "description": "on isLessThanOrEqualTo()",
    "lineNumber": 163
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it83",
    "testId": 83,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it83",
    "access": null,
    "description": "on isIn()",
    "lineNumber": 171
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it84",
    "access": null,
    "description": "on isNotEmpty()",
    "lineNumber": 179
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it85",
    "access": null,
    "description": "on isNumber()",
    "lineNumber": 187
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it86",
    "testId": 86,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it86",
    "access": null,
    "description": "on isStrongPassword()",
    "lineNumber": 196
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it87",
    "testId": 87,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it87",
    "access": null,
    "description": "on isNotEqualTo()",
    "lineNumber": 204
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it88",
    "testId": 88,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it88",
    "access": null,
    "description": "on matches()",
    "lineNumber": 212
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it89",
    "testId": 89,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it89",
    "access": null,
    "description": "on passes()",
    "lineNumber": 219
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it90",
    "testId": 90,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it90",
    "access": null,
    "description": "on withMessage()",
    "lineNumber": 232
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it91",
    "testId": 91,
    "memberof": "test/validation-api.spec.js~describe64",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe64.it91",
    "access": null,
    "description": "on onValidate()",
    "lineNumber": 242
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe92",
    "testId": 92,
    "memberof": "test/validation-api.spec.js",
    "testDepth": 0,
    "longname": "test/validation-api.spec.js~describe92",
    "access": null,
    "description": "Some simple tests on .result",
    "lineNumber": 250
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it93",
    "testId": 93,
    "memberof": "test/validation-api.spec.js~describe92",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe92.it93",
    "access": null,
    "description": "on individual valid properties",
    "lineNumber": 251
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "test/validation-api.spec.js~describe92",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe92.it94",
    "access": null,
    "description": "on individual invalid properties",
    "lineNumber": 265
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it95",
    "testId": 95,
    "memberof": "test/validation-api.spec.js~describe92",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe92.it95",
    "access": null,
    "description": "on individual invalid properties after reset",
    "lineNumber": 280
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe96",
    "testId": 96,
    "memberof": "test/validation-api.spec.js",
    "testDepth": 0,
    "longname": "test/validation-api.spec.js~describe96",
    "access": null,
    "description": "Some simple configuration API tests",
    "lineNumber": 308
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it97",
    "testId": 97,
    "memberof": "test/validation-api.spec.js~describe96",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe96.it97",
    "access": null,
    "description": "on computedFrom with a single dependencies",
    "lineNumber": 309
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it98",
    "testId": 98,
    "memberof": "test/validation-api.spec.js~describe96",
    "testDepth": 1,
    "longname": "test/validation-api.spec.js~describe96.it98",
    "access": null,
    "description": "on computedFrom with an array of string dependencies",
    "lineNumber": 327
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validation-config.spec.js",
    "memberof": null,
    "longname": "test/validation-config.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ValidationConfig} from '../src/validation/validation-config';\nimport {ValidateCustomAttributeViewStrategy} from '../src/validation/validate-custom-attribute-view-strategy';\n\ndescribe('ValidationConfig', () => {\n  it('should have default values', () => {\n    var config = new ValidationConfig();\n    //all defaults should go here\n    expect(config.getDebounceTimeout()).toBe(0);\n    expect(config.getDependencies().length).toBe(0);\n    expect(config.getValue('locale')).toBe('en-US');\n    expect(config.getViewStrategy()).toBe(ValidateCustomAttributeViewStrategy.TWBootstrapAppendToMessage);\n  });\n\n  it('should be configurable (API check)', () => {\n    var config = new ValidationConfig();\n    expect(config.useDebounceTimeout(50)).toBe(config); //fluent API check\n    expect(config.getDebounceTimeout()).toBe(50);\n\n    config = new ValidationConfig();\n    expect(config.computedFrom('abc')).toBe(config); //fluent API check\n    expect(config.getDependencies()[0]).toBe('abc');\n\n    config = new ValidationConfig();\n    expect(config.computedFrom(['abc','def'])).toBe(config); //fluent API check\n    expect(config.getDependencies()[1]).toBe('def');\n\n    config = new ValidationConfig();\n    expect(config.useLocale('nl-BE')).toBe(config); //fluent API check\n    expect(config.getValue('locale')).toBe('nl-BE');\n\n    config = new ValidationConfig();\n    expect(config.useViewStrategy(ValidateCustomAttributeViewStrategy.TWBootstrapAppendToInput)).toBe(config);// fluent API check\n    expect(config.getViewStrategy()).toBe(ValidateCustomAttributeViewStrategy.TWBootstrapAppendToInput);\n  });\n\n  it('should never change the defaults', () => {\n    var config1 = new ValidationConfig();\n    var config2 = new ValidationConfig();\n\n    expect(config2.getDebounceTimeout()).toBe(0);\n    config1.useDebounceTimeout(50);\n    expect(config2.getDebounceTimeout()).toBe(0);\n  });\n\n  it('should allow you to set values', () => {\n    var config = new ValidationConfig();\n    config.setValue('test', 'a');\n    expect(config.getValue('test')).toBe('a');\n  });\n\n  it('should get values set on the parent when it does not have a value itself ', () => {\n    var parentConfig = new ValidationConfig();\n    parentConfig.setValue('test', 'a');\n    var config = new ValidationConfig(parentConfig);\n    expect(config.getValue('test')).toBe('a');\n  });\n\n  it('should get not copy the values but instead delegate to the parent', () => {\n    var parentConfig = new ValidationConfig();\n    parentConfig.setValue('test', 'a');\n    var config = new ValidationConfig(parentConfig);\n    expect(config.getValue('test')).toBe('a');\n\n    parentConfig.setValue('test', 'b');\n    expect(config.getValue('test')).toBe('b');\n  });\n\n  it('should allow to override parents with own values', () => {\n    var parentConfig = new ValidationConfig();\n    parentConfig.setValue('test', 'a');\n    var config = new ValidationConfig(parentConfig);\n    expect(config.getValue('test')).toBe('a');\n\n    config.setValue('test', 'c');\n    parentConfig.setValue('test', 'b');\n    expect(config.getValue('test')).toBe('c');\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe99",
    "testId": 99,
    "memberof": "test/validation-config.spec.js",
    "testDepth": 0,
    "longname": "test/validation-config.spec.js~describe99",
    "access": null,
    "description": "ValidationConfig",
    "lineNumber": 4
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it100",
    "testId": 100,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it100",
    "access": null,
    "description": "should have default values",
    "lineNumber": 5
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it101",
    "access": null,
    "description": "should be configurable (API check)",
    "lineNumber": 14
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it102",
    "testId": 102,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it102",
    "access": null,
    "description": "should never change the defaults",
    "lineNumber": 36
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it103",
    "testId": 103,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it103",
    "access": null,
    "description": "should allow you to set values",
    "lineNumber": 45
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it104",
    "testId": 104,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it104",
    "access": null,
    "description": "should get values set on the parent when it does not have a value itself ",
    "lineNumber": 51
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it105",
    "testId": 105,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it105",
    "access": null,
    "description": "should get not copy the values but instead delegate to the parent",
    "lineNumber": 58
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it106",
    "testId": 106,
    "memberof": "test/validation-config.spec.js~describe99",
    "testDepth": 1,
    "longname": "test/validation-config.spec.js~describe99.it106",
    "access": null,
    "description": "should allow to override parents with own values",
    "lineNumber": 68
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validation.spec.js",
    "memberof": null,
    "longname": "test/validation.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Validation} from '../src/validation/validation';\nimport {ObserverLocator} from 'aurelia-binding';\nimport {Expectations} from './expectations';\nimport {ValidationConfig} from '../src/validation/validation-config';\n\nclass TestSubject {\n  constructor(validation, firstName) {\n    this.firstName = firstName;\n    this.validation = validation.on(this);\n  }\n\n  static createInstance(firstName, config) {\n    var subject = new TestSubject(new Validation(new ObserverLocator(), config), firstName);\n    subject.validation\n      .ensure('firstName')\n      .isNotEmpty();\n    return subject;\n  }\n}\n\ndescribe('Basic validation tests', () => {\n  it('should fail if a notempty property is null', (done) => {\n    var subject = TestSubject.createInstance(null);\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(false);\n      done();\n    }, 0);\n  });\n\n\n  it('should fail if a notempty property is an empty string', (done) => {\n    var subject = TestSubject.createInstance('');\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(false);\n      done();\n    }, 0);\n  });\n\n\n  it('should fail if a notempty property contains only whitespace', (done) => {\n    var subject = TestSubject.createInstance('            ');\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(false);\n      done();\n    }, 0);\n  });\n\n\n  it('should not fail if a notempty property is a random string', (done) => {\n    var subject = TestSubject.createInstance('a random string');\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(true);\n      done();\n    }, 0);\n  });\n\n\n  it('should fail if an array is empty', (done) => {\n    var subject = TestSubject.createInstance([]);\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(false);\n      done();\n    }, 0);\n  });\n\n\n  it('should not fail on an array with elements', (done) => {\n    var subject = TestSubject.createInstance(['some element']);\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(true);\n      done();\n    }, 0);\n  });\n\n\n  it('should not fail on an array with empty element', (done) => {\n    var subject = TestSubject.createInstance(['']);\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(true);\n      done();\n    }, 0);\n  });\n\n\n  it('should not fail if value is a function', (done) => {\n    var subject = TestSubject.createInstance(() => {\n      return 'Demo';\n    });\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(true);\n      done();\n    }, 0);\n  });\n\n  it('should evaluate immediately without marking the property as dirty', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = {firstName: 'John'};\n\n    subject.validation = new Validation(new ObserverLocator()).on(subject)\n      .ensure('firstName').isNotEmpty().hasLengthBetween(5, 10);\n\n    setTimeout(() => {\n      expect(subject.validation.result.isValid).toBe(false);\n      expect(subject.validation.result.properties.firstName.isDirty).toBe(false);\n      expectations.assert(() => {\n        return subject.validation.validate();\n      }, false);\n\n      expectations.assert(() => {\n        expect(subject.validation.result.isValid).toBe(false);\n        expect(subject.validation.result.properties.firstName.isDirty).toBe(true);\n        return Promise.resolve(true);\n      }, true);\n\n      expectations.validate();\n    }, 0);\n  });\n\n\n  it('should update the validation automatically when the property changes with nested properties', (done) => {\n    var subject = {company: {name: 'Bob the builder construction, Inc.'}};\n\n    subject.validation = new Validation(new ObserverLocator()).on(subject)\n      .ensure('company.name')\n      .isNotEmpty().hasLengthBetween(5, 10);\n    setTimeout(() => { //Settimeout to allow initial validation\n      expect(subject.validation.result.isValid).toBe(false);\n\n      subject.company.name = 'Bob, Inc.';\n      setTimeout(()=> { //wait 200 ms to allow validation on the new value\n        expect(subject.validation.result.isValid).toBe(true);\n        done();\n      },  50);\n      //Note: cannot really use jasmine.clock() because of the combination of setTimeout and actual promises\n    }, 0);\n  });\n\n\n  it('should update the validation automatically when the property changes', (done) => {\n\n    var subject = TestSubject.createInstance(null);\n\n    setTimeout(() => {\n      expect(subject.validation.result.isValid).toBe(false);\n      subject.firstName = 'Bob the builder';\n      setTimeout(() =>{\n        expect(subject.validation.result.isValid).toBe(true);\n        done();\n\n      }, 50);\n      //Note: cannot really use jasmine.clock() because of the combination of setTimeout and actual promises\n    }, 0);\n  });\n\n\n  it('should not update if the value continuously changes and a debounce time is set on the validation', (done) => {\n    var subject = TestSubject.createInstance(null, new ValidationConfig().useDebounceTimeout(50));\n    subject.validation.ensure('firstName').isNotEmpty().hasLengthBetween(5, 10);\n\n    setTimeout(() => { //Do setTimout 0 to allow initial validation\n      expect(subject.validation.result.isValid).toBe(false);\n\n      subject.firstName = 'Bob';\n      setTimeout(() =>{ //Do setTimout 190, property should not be validated\n        expect(subject.validation.result.isValid).toBe(false);\n\n        subject.firstName = 'Bobby';\n        setTimeout( () => { //Property changed before x ms, property should not be validated\n          expect(subject.validation.result.isValid).toBe(false);\n          setTimeout(() => { //property did not change in last x ms, property should be validated\n            expect(subject.validation.result.isValid).toBe(true);\n            done();\n          }, 21);\n        }, 40);\n      }, 40);\n    }, 0);\n  });\n\n  it('should not update if the value continuously changes and a debounce time is set on the property', (done) => {\n    var subject = new TestSubject(new Validation(new ObserverLocator(), new ValidationConfig()), null);\n    subject.validation.ensure('firstName', (config) => {config.useDebounceTimeout(50)}).isNotEmpty().hasLengthBetween(5, 10);\n\n    setTimeout(() => { //Do setTimout 0 to allow initial validation\n      expect(subject.validation.result.isValid).toBe(false);\n\n      subject.firstName = 'Bob';\n      setTimeout(() =>{ //Do setTimout 190, property should not be validated\n        expect(subject.validation.result.isValid).toBe(false);\n\n        subject.firstName = 'Bobby';\n        setTimeout( () => { //Property changed before x ms, property should not be validated\n          expect(subject.validation.result.isValid).toBe(false);\n          setTimeout(() => { //property did not change in last x ms, property should be validated\n            expect(subject.validation.result.isValid).toBe(true);\n            done();\n          }, 21);\n        }, 40);\n      }, 40);\n    }, 0);\n  });\n\n\n  it('should update the validation when validate() is called', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance(null);\n    setTimeout(() => {\n      expect(subject.validation.result.isValid).toBe(false);\n      expectations.assert(() => {\n        subject.firstName = 'Bob the builder';\n        return subject.validation.validate();\n      }, true);\n      expectations.validate();\n    }, 0);\n  });\n\n\n  it('should update if an array gains elements', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance([]);\n    setTimeout(()=> {\n      expect(subject.validation.result.isValid).toBe(false);\n      expectations.assert(() => {\n        subject.firstName.push('bob the builder');\n        return subject.validation.validate();\n      }, true);\n\n      expectations.assert(() => {\n        subject.firstName.pop();\n        return subject.validation.validate();\n      }, false);\n\n      expectations.validate();\n    }, 0);\n  });\n\n\n  it('should update if an array is overwritten', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance(['a', 'b', 'c']);\n    expect(subject.validation.result.isValid).toBe(true);\n    expectations.assert(() => {\n      subject.firstName = [];\n      return subject.validation.validate();\n    }, false);\n    expectations.validate();\n  });\n\n  it('should use a custom message if one is provided', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance(\"Bob\");\n    subject.validation.ensure('firstName').hasMinLength(10).withMessage(\"Not valid!\");\n\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe(\"Not valid!\");\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n  it('should use a custom message function if one is provided', (done) => {\n    var expectations = new Expectations(expect, done);\n    var subject = TestSubject.createInstance(\"Bob\");\n    subject.validation.ensure('firstName').hasMinLength(10).withMessage((newValue, threshold) => {\n      return newValue + \" is not valid!\";\n    });\n\n    expectations.assert(() => {\n      return subject.validation.validate();\n    }, false);\n\n    expectations.assert(() => {\n      expect(subject.validation.result.properties.firstName.message).toBe(\"Bob is not valid!\");\n      return subject.validation.validate();\n    }, false);\n\n    expectations.validate();\n  });\n\n\n  it('should complete when validation is valid', (done) => {\n    var subject = TestSubject.createInstance(\"Bob\");\n\n    subject.validation.validate().then(() => {\n      expect('validate() should complete').toBe('validate() should complete');\n      done();\n    }, () => {\n      expect('validate() should complete').toBe('validate() rejected');\n      done();\n    });\n  });\n  it('should reject when validation is invalid', (done) => {\n    var subject = TestSubject.createInstance('');\n\n    subject.validation.validate().then(() => {\n      expect('validate() should reject').toBe('validate() completed');\n      done();\n    }, () => {\n      expect('validate() should reject').toBe('validate() should reject');\n      done();\n    });\n  });\n\n\n  it('should set isValidating when validating', (done) => {\n    var subject = TestSubject.createInstance('Bob');\n\n    expect(subject.validation.isValidating).toBe(false);\n    var validation =     subject.validation.validate();\n    expect(subject.validation.isValidating).toBe(true);\n\n    validation.then(() => {\n      expect(subject.validation.isValidating).toBe(false);\n      done();\n    });\n  });\n\n  it('should only set the result based on the latest value', (done) => {\n    var subject = new TestSubject(new Validation(new ObserverLocator()), '');\n    subject.validation.ensure('firstName').passes( () => { return new Promise((fulfil) => {\n      setTimeout(()=>{\n        fulfil(false);\n      }, 10);\n    })});\n    subject.firstName = 'Bob';\n    //Trigger validation on 'Bob', it will fail in 10 ms.\n    subject.validation.validate().then( ()=> {}, ()=> {});\n    setTimeout( () => {\n      subject.firstName = ''; //Meanwhile, set firstName to ''. This is a valid value\n      setTimeout(()=> {\n        //Check that the result from the delayed validation on 'Bob' does not overwrite the reesult of ''.\n        expect(subject.validation.result.properties.firstName.isValid).toBe(true);\n        expect(subject.validation.result.properties.firstName.message).toBe('');\n        done();\n      }, 10);\n    }, 5);\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe107",
    "testId": 107,
    "memberof": "test/validation.spec.js",
    "testDepth": 0,
    "longname": "test/validation.spec.js~describe107",
    "access": null,
    "description": "Basic validation tests",
    "lineNumber": 21
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it108",
    "testId": 108,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it108",
    "access": null,
    "description": "should fail if a notempty property is null",
    "lineNumber": 22
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it109",
    "access": null,
    "description": "should fail if a notempty property is an empty string",
    "lineNumber": 31
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it110",
    "testId": 110,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it110",
    "access": null,
    "description": "should fail if a notempty property contains only whitespace",
    "lineNumber": 40
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it111",
    "testId": 111,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it111",
    "access": null,
    "description": "should not fail if a notempty property is a random string",
    "lineNumber": 49
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it112",
    "access": null,
    "description": "should fail if an array is empty",
    "lineNumber": 58
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it113",
    "testId": 113,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it113",
    "access": null,
    "description": "should not fail on an array with elements",
    "lineNumber": 67
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it114",
    "testId": 114,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it114",
    "access": null,
    "description": "should not fail on an array with empty element",
    "lineNumber": 76
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it115",
    "testId": 115,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it115",
    "access": null,
    "description": "should not fail if value is a function",
    "lineNumber": 85
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it116",
    "testId": 116,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it116",
    "access": null,
    "description": "should evaluate immediately without marking the property as dirty",
    "lineNumber": 95
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it117",
    "testId": 117,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it117",
    "access": null,
    "description": "should update the validation automatically when the property changes with nested properties",
    "lineNumber": 120
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it118",
    "testId": 118,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it118",
    "access": null,
    "description": "should update the validation automatically when the property changes",
    "lineNumber": 139
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it119",
    "testId": 119,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it119",
    "access": null,
    "description": "should not update if the value continuously changes and a debounce time is set on the validation",
    "lineNumber": 156
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it120",
    "testId": 120,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it120",
    "access": null,
    "description": "should not update if the value continuously changes and a debounce time is set on the property",
    "lineNumber": 179
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it121",
    "testId": 121,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it121",
    "access": null,
    "description": "should update the validation when validate() is called",
    "lineNumber": 203
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it122",
    "testId": 122,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it122",
    "access": null,
    "description": "should update if an array gains elements",
    "lineNumber": 217
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it123",
    "testId": 123,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it123",
    "access": null,
    "description": "should update if an array is overwritten",
    "lineNumber": 237
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it124",
    "testId": 124,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it124",
    "access": null,
    "description": "should use a custom message if one is provided",
    "lineNumber": 248
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it125",
    "testId": 125,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it125",
    "access": null,
    "description": "should use a custom message function if one is provided",
    "lineNumber": 264
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it126",
    "testId": 126,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it126",
    "access": null,
    "description": "should complete when validation is valid",
    "lineNumber": 284
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it127",
    "testId": 127,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it127",
    "access": null,
    "description": "should reject when validation is invalid",
    "lineNumber": 295
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it128",
    "testId": 128,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it128",
    "access": null,
    "description": "should set isValidating when validating",
    "lineNumber": 308
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it129",
    "testId": 129,
    "memberof": "test/validation.spec.js~describe107",
    "testDepth": 1,
    "longname": "test/validation.spec.js~describe107.it129",
    "access": null,
    "description": "should only set the result based on the latest value",
    "lineNumber": 321
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/alpha-or-whitespace.spec.js",
    "memberof": null,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {AlphaOrWhitespaceValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on AlphaOrWhitespaceValidationRule', () => {\n  it('should be working with only alpha', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(true);\n    expectations.expectAsync(rule.validate('A')).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with whitespaces', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('a a')).toBe(true); //note: trailing spaces are always trimmed\n    expectations.expectAsync(rule.validate('A A')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with a combination of alpha characters and whitespaces', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate(' aBcDeFgHiJ k L m N o PqRsTuVwXyZ ')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with non alphanumerical characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com')).toBe(false);\n    expectations.expectAsync(rule.validate('123,123')).toBe(false);\n    expectations.expectAsync(rule.validate('abc!')).toBe(false);\n    expectations.expectAsync(rule.validate('!@#$%^&*()_+')).toBe(false);\n    expectations.expectAsync(rule.validate('abc123')).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe130",
    "testId": 130,
    "memberof": "test/validationRules/alpha-or-whitespace.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js~describe130",
    "access": null,
    "description": "Tests on AlphaOrWhitespaceValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it131",
    "testId": 131,
    "memberof": "test/validationRules/alpha-or-whitespace.spec.js~describe130",
    "testDepth": 1,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js~describe130.it131",
    "access": null,
    "description": "should be working with only alpha",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it132",
    "testId": 132,
    "memberof": "test/validationRules/alpha-or-whitespace.spec.js~describe130",
    "testDepth": 1,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js~describe130.it132",
    "access": null,
    "description": "should be working with whitespaces",
    "lineNumber": 14
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it133",
    "testId": 133,
    "memberof": "test/validationRules/alpha-or-whitespace.spec.js~describe130",
    "testDepth": 1,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js~describe130.it133",
    "access": null,
    "description": "should be working with a combination of alpha characters and whitespaces",
    "lineNumber": 22
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it134",
    "testId": 134,
    "memberof": "test/validationRules/alpha-or-whitespace.spec.js~describe130",
    "testDepth": 1,
    "longname": "test/validationRules/alpha-or-whitespace.spec.js~describe130.it134",
    "access": null,
    "description": "should not be working with non alphanumerical characters",
    "lineNumber": 29
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/alpha.spec.js",
    "memberof": null,
    "longname": "test/validationRules/alpha.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {AlphaValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on AlphaValidationRule', () => {\n  it('should be working with only alpha', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(true);\n    expectations.expectAsync(rule.validate('A')).toBe(true);\n    expectations.validate();\n  });\n  it('should not be working with whitespaces', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaValidationRule();\n    expectations.expectAsync(rule.validate('a a')).toBe(false); //note: trailing spaces are always trimmed\n    expectations.expectAsync(rule.validate('A A')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with a combination of alpha characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaValidationRule();\n    expectations.expectAsync(rule.validate('aBcDeFgHiJkLmNoPqRsTuVwXyZ')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with non alphanumerical characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com')).toBe(false);\n    expectations.expectAsync(rule.validate('123,123')).toBe(false);\n    expectations.expectAsync(rule.validate('abc!')).toBe(false);\n    expectations.expectAsync(rule.validate('!@#$%^&*()_+')).toBe(false);\n    expectations.expectAsync(rule.validate('abc123')).toBe(false);\n    expectations.expectAsync(rule.validate(' ')).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe135",
    "testId": 135,
    "memberof": "test/validationRules/alpha.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/alpha.spec.js~describe135",
    "access": null,
    "description": "Tests on AlphaValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it136",
    "testId": 136,
    "memberof": "test/validationRules/alpha.spec.js~describe135",
    "testDepth": 1,
    "longname": "test/validationRules/alpha.spec.js~describe135.it136",
    "access": null,
    "description": "should be working with only alpha",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it137",
    "testId": 137,
    "memberof": "test/validationRules/alpha.spec.js~describe135",
    "testDepth": 1,
    "longname": "test/validationRules/alpha.spec.js~describe135.it137",
    "access": null,
    "description": "should not be working with whitespaces",
    "lineNumber": 14
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it138",
    "testId": 138,
    "memberof": "test/validationRules/alpha.spec.js~describe135",
    "testDepth": 1,
    "longname": "test/validationRules/alpha.spec.js~describe135.it138",
    "access": null,
    "description": "should be working with a combination of alpha characters",
    "lineNumber": 22
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it139",
    "testId": 139,
    "memberof": "test/validationRules/alpha.spec.js~describe135",
    "testDepth": 1,
    "longname": "test/validationRules/alpha.spec.js~describe135.it139",
    "access": null,
    "description": "should not be working with non alphanumerical characters",
    "lineNumber": 29
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/alphanumeric-or-whitespace.spec.js",
    "memberof": null,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {AlphaNumericOrWhitespaceValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on AlphaNumericOrWhitespaceValidationRule', () => {\n  it('should be working with only digits', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('2')).toBe(true);\n    expectations.expectAsync(rule.validate(2)).toBe(true);\n    expectations.expectAsync(rule.validate(' 1 2 3 4 5 6 7 8 9 0')).toBe(true);\n    expectations.expectAsync(rule.validate(1234567890)).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with only characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(true);\n    expectations.expectAsync(rule.validate('a B c D e F g H i J k L m N o P q R s T u V w X y Z')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with a combination of alphanumeric characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('aBcDeFgHiJkLmNoPqRsTuVwXyZ 1234567890')).toBe(true);\n    expectations.expectAsync(rule.validate('1234567890aBcDe F g H i JkLm1234567890NoPq R s T u VwXyZ1234567890')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with non alphanumerical characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('van der haegen j@gmail.com')).toBe(false);\n    expectations.expectAsync(rule.validate('123,1 23')).toBe(false);\n    expectations.expectAsync(rule.validate('abc !')).toBe(false);\n    expectations.expectAsync(rule.validate('!@#$ % ^&*()_+')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with whitespace characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericOrWhitespaceValidationRule();\n    expectations.expectAsync(rule.validate('abc 123')).toBe(true);\n\n    //Note: spaces are always trimmed\n    expectations.expectAsync(rule.validate(' abc 123 ')).toBe(true);\n    expectations.validate();\n\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe140",
    "testId": 140,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "access": null,
    "description": "Tests on AlphaNumericOrWhitespaceValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it141",
    "testId": 141,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140.it141",
    "access": null,
    "description": "should be working with only digits",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it142",
    "testId": 142,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140.it142",
    "access": null,
    "description": "should be working with only characters",
    "lineNumber": 16
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it143",
    "testId": 143,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140.it143",
    "access": null,
    "description": "should be working with a combination of alphanumeric characters",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it144",
    "testId": 144,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140.it144",
    "access": null,
    "description": "should not be working with non alphanumerical characters",
    "lineNumber": 32
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it145",
    "testId": 145,
    "memberof": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric-or-whitespace.spec.js~describe140.it145",
    "access": null,
    "description": "should be working with whitespace characters",
    "lineNumber": 42
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/alphanumeric.spec.js",
    "memberof": null,
    "longname": "test/validationRules/alphanumeric.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {AlphaNumericValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on AlphaNumericValidationRule', () => {\n  it('should be working with only digits', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericValidationRule();\n    expectations.expectAsync(rule.validate('2')).toBe(true);\n    expectations.expectAsync(rule.validate(2)).toBe(true);\n    expectations.expectAsync(rule.validate('1234567890')).toBe(true);\n    expectations.expectAsync(rule.validate(1234567890)).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with only characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcDeFgHiJkLmNoPqRsTuVwXyZ')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with a combination of alphanumeric characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericValidationRule();\n    expectations.expectAsync(rule.validate('aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890')).toBe(true);\n    expectations.expectAsync(rule.validate('1234567890aBcDeFgHiJkLm1234567890NoPqRsTuVwXyZ1234567890')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with non alphanumerical characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com')).toBe(false);\n    expectations.expectAsync(rule.validate('123,123')).toBe(false);\n    expectations.expectAsync(rule.validate('abc!')).toBe(false);\n    expectations.expectAsync(rule.validate('!@#$%^&*()_+')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with whitespace characters', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new AlphaNumericValidationRule();\n    expectations.expectAsync(rule.validate('abc 123')).toBe(false);\n\n    //Note: spaces are no longer trimmed\n    expectations.expectAsync(rule.validate(' abc123 ')).toBe(false);\n    expectations.validate();\n\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe146",
    "testId": 146,
    "memberof": "test/validationRules/alphanumeric.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146",
    "access": null,
    "description": "Tests on AlphaNumericValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it147",
    "testId": 147,
    "memberof": "test/validationRules/alphanumeric.spec.js~describe146",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146.it147",
    "access": null,
    "description": "should be working with only digits",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it148",
    "testId": 148,
    "memberof": "test/validationRules/alphanumeric.spec.js~describe146",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146.it148",
    "access": null,
    "description": "should be working with only characters",
    "lineNumber": 16
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it149",
    "testId": 149,
    "memberof": "test/validationRules/alphanumeric.spec.js~describe146",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146.it149",
    "access": null,
    "description": "should be working with a combination of alphanumeric characters",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it150",
    "testId": 150,
    "memberof": "test/validationRules/alphanumeric.spec.js~describe146",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146.it150",
    "access": null,
    "description": "should not be working with non alphanumerical characters",
    "lineNumber": 32
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it151",
    "testId": 151,
    "memberof": "test/validationRules/alphanumeric.spec.js~describe146",
    "testDepth": 1,
    "longname": "test/validationRules/alphanumeric.spec.js~describe146.it151",
    "access": null,
    "description": "should not be working with whitespace characters",
    "lineNumber": 42
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/between-length.spec.js",
    "memberof": null,
    "longname": "test/validationRules/between-length.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BetweenLengthValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n//Both limits are inclusive\n\ndescribe('Tests on BetweenLengthValidationRule', () => {\n  it('should be working with strings', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenLengthValidationRule(2, 3);\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate('ab')).toBe(true);\n    expectations.expectAsync(rule.validate('abc')).toBe(true);\n    expectations.expectAsync(rule.validate('abcd')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should trim strings before evaluating', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenLengthValidationRule(2, 3);\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate(' a')).toBe(true);\n    expectations.expectAsync(rule.validate('a  ')).toBe(true);\n    expectations.expectAsync(rule.validate('  a  ')).toBe(false);\n    expectations.validate();\n  });\n  it('should be working with arrays', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenLengthValidationRule(2, 3);\n    expectations.expectAsync(rule.validate([1])).toBe(false);\n    expectations.expectAsync(rule.validate([1, 2])).toBe(true);\n    expectations.expectAsync(rule.validate([1, 2, 3])).toBe(true);\n    expectations.expectAsync(rule.validate([1, 2, 3, 4])).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with with any object that has a \"length\" property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenLengthValidationRule(2, 3);\n    expectations.expectAsync(rule.validate({length: 1})).toBe(false);\n    expectations.expectAsync(rule.validate({length: 2})).toBe(true);\n    expectations.expectAsync(rule.validate({length: 3})).toBe(true);\n    expectations.expectAsync(rule.validate({length: 4})).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe152",
    "testId": 152,
    "memberof": "test/validationRules/between-length.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/between-length.spec.js~describe152",
    "access": null,
    "description": "Tests on BetweenLengthValidationRule",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it153",
    "testId": 153,
    "memberof": "test/validationRules/between-length.spec.js~describe152",
    "testDepth": 1,
    "longname": "test/validationRules/between-length.spec.js~describe152.it153",
    "access": null,
    "description": "should be working with strings",
    "lineNumber": 8
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it154",
    "testId": 154,
    "memberof": "test/validationRules/between-length.spec.js~describe152",
    "testDepth": 1,
    "longname": "test/validationRules/between-length.spec.js~describe152.it154",
    "access": null,
    "description": "should trim strings before evaluating",
    "lineNumber": 18
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it155",
    "testId": 155,
    "memberof": "test/validationRules/between-length.spec.js~describe152",
    "testDepth": 1,
    "longname": "test/validationRules/between-length.spec.js~describe152.it155",
    "access": null,
    "description": "should be working with arrays",
    "lineNumber": 27
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it156",
    "testId": 156,
    "memberof": "test/validationRules/between-length.spec.js~describe152",
    "testDepth": 1,
    "longname": "test/validationRules/between-length.spec.js~describe152.it156",
    "access": null,
    "description": "should be working with with any object that has a \"length\" property",
    "lineNumber": 37
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/between-value.spec.js",
    "memberof": null,
    "longname": "test/validationRules/between-value.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BetweenValueValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n//Both limits are inclusive\n\ndescribe('Tests on BetweenValueValidationRule', () => {\n  it('should be working with integers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenValueValidationRule(2, 3);\n    expectations.expectAsync(rule.validate(1)).toBe(false);\n    expectations.expectAsync(rule.validate(2)).toBe(true);\n    expectations.expectAsync(rule.validate(3)).toBe(true);\n    expectations.expectAsync(rule.validate(4)).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenValueValidationRule(2, 3);\n    expectations.expectAsync(rule.validate(1.9)).toBe(false);\n    expectations.expectAsync(rule.validate(2.0)).toBe(true);\n    expectations.expectAsync(rule.validate(2.99)).toBe(true);\n    expectations.expectAsync(rule.validate(4.0)).toBe(false);\n    expectations.validate();\n  });\n\n\n  it('should be working with dates', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new BetweenValueValidationRule(new Date(2000, 1, 1, 1, 1, 1, 1), new Date(2000, 1, 1, 1, 1, 2, 1));\n    expectations.expectAsync(rule.validate(new Date(1999, 1, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 30))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 2, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 2, 2))).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe157",
    "testId": 157,
    "memberof": "test/validationRules/between-value.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/between-value.spec.js~describe157",
    "access": null,
    "description": "Tests on BetweenValueValidationRule",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it158",
    "testId": 158,
    "memberof": "test/validationRules/between-value.spec.js~describe157",
    "testDepth": 1,
    "longname": "test/validationRules/between-value.spec.js~describe157.it158",
    "access": null,
    "description": "should be working with integers",
    "lineNumber": 8
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it159",
    "testId": 159,
    "memberof": "test/validationRules/between-value.spec.js~describe157",
    "testDepth": 1,
    "longname": "test/validationRules/between-value.spec.js~describe157.it159",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 18
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it160",
    "testId": 160,
    "memberof": "test/validationRules/between-value.spec.js~describe157",
    "testDepth": 1,
    "longname": "test/validationRules/between-value.spec.js~describe157.it160",
    "access": null,
    "description": "should be working with dates",
    "lineNumber": 29
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/custom-function.spec.js",
    "memberof": null,
    "longname": "test/validationRules/custom-function.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {CustomFunctionValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on CustomFunctionValidationRule', () => {\n\n\n  it('should be working with simple funtions', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => {\n      return newValue !== '1337';\n    });\n    expectations.expectAsync(rule.validate('1337')).toBe(false);\n\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => {\n      return newValue === '1337';\n    });\n    expectations.expectAsync(rule.validate('1337')).toBe(true);\n    expectations.validate();\n  });\n  it('should be passing the threshold around to the onValidate method', (done) => {\n    var expectations = new Expectations(expect, done);\n    var randomObject = {randomProperty: '1337'};\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => {\n      return newValue === threshold.randomProperty;\n    }, randomObject);\n\n    expectations.expectAsync(rule.validate('1336')).toBe(false);\n    expectations.expectAsync(rule.validate('1337')).toBe(true);\n\n    randomObject.randomProperty = '1336';\n    expectations.expectAsync(rule.validate('1336')).toBe(true);\n    expectations.expectAsync(rule.validate('1337')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be passing the threshold around to the message', (done) => {\n    var expectations = new Expectations(expect, done);\n    var randomObject = {randomProperty: '1337'};\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => {\n      return newValue === threshold.randomProperty;\n    }, randomObject);\n    rule.withMessage((newValue, threshold) => {\n      return `Cool ${threshold.randomProperty}`;\n    });\n\n    expectations.expectAsync(rule.validate('1336')).toBe(false);\n    expectations.expectAsync( () => { return rule.explain();}).toBe('Cool 1337');\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns true', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return true ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns null', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return null ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns undefined', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return undefined ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns an empty string', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return '' ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns false', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return false ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns a message', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return 'this is not good' ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.assert( () => {\n      expect(rule.explain()).toBe('this is not good');\n      return Promise.resolve(true);\n    }, true);\n    expectations.validate();\n  });\n\n\n  it('should succeed when the function returns a promise that resolves to true', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve(true) ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns a promise that resolves to null', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve(null) ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns a promise that resolves to undefined', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve(undefined) ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should succeed when the function returns a promise that resolves to  an empty string', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve('') ; });\n    expectations.expectAsync(rule.validate('')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns a promise that resolves to  false', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve(false) ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns  a promise that resolves to a message', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.resolve('this is not good') ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.expectAsync( () => { return rule.explain();}).toBe('this is not good');\n    expectations.validate();\n  });\n\n  it('should fail when the function returns  a promise that rejects', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.reject() ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns  a promise that rejects to a true', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.reject(true); });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should fail when the function returns  a promise that rejects to a undefined', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.reject( undefined); });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n  it('should fail when the function returns  a promise that rejects to a null', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.reject( null) ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.validate();\n  });\n  it('should fail when the function returns  a promise that rejects to a message', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new CustomFunctionValidationRule((newValue, threshold) => { return Promise.reject('this is not good') ; });\n    expectations.expectAsync(rule.validate('')).toBe(false);\n    expectations.expectAsync( () => { return rule.explain(); }).toBe('this is not good');\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe161",
    "testId": 161,
    "memberof": "test/validationRules/custom-function.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/custom-function.spec.js~describe161",
    "access": null,
    "description": "Tests on CustomFunctionValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it162",
    "testId": 162,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it162",
    "access": null,
    "description": "should be working with simple funtions",
    "lineNumber": 9
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it163",
    "testId": 163,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it163",
    "access": null,
    "description": "should be passing the threshold around to the onValidate method",
    "lineNumber": 22
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it164",
    "testId": 164,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it164",
    "access": null,
    "description": "should be passing the threshold around to the message",
    "lineNumber": 38
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it165",
    "testId": 165,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it165",
    "access": null,
    "description": "should succeed when the function returns true",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it166",
    "testId": 166,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it166",
    "access": null,
    "description": "should succeed when the function returns null",
    "lineNumber": 60
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it167",
    "testId": 167,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it167",
    "access": null,
    "description": "should succeed when the function returns undefined",
    "lineNumber": 67
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it168",
    "testId": 168,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it168",
    "access": null,
    "description": "should succeed when the function returns an empty string",
    "lineNumber": 74
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it169",
    "testId": 169,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it169",
    "access": null,
    "description": "should fail when the function returns false",
    "lineNumber": 81
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it170",
    "testId": 170,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it170",
    "access": null,
    "description": "should fail when the function returns a message",
    "lineNumber": 88
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it171",
    "testId": 171,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it171",
    "access": null,
    "description": "should succeed when the function returns a promise that resolves to true",
    "lineNumber": 100
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it172",
    "testId": 172,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it172",
    "access": null,
    "description": "should succeed when the function returns a promise that resolves to null",
    "lineNumber": 107
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it173",
    "testId": 173,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it173",
    "access": null,
    "description": "should succeed when the function returns a promise that resolves to undefined",
    "lineNumber": 114
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it174",
    "testId": 174,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it174",
    "access": null,
    "description": "should succeed when the function returns a promise that resolves to  an empty string",
    "lineNumber": 121
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it175",
    "testId": 175,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it175",
    "access": null,
    "description": "should fail when the function returns a promise that resolves to  false",
    "lineNumber": 128
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it176",
    "testId": 176,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it176",
    "access": null,
    "description": "should fail when the function returns  a promise that resolves to a message",
    "lineNumber": 135
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it177",
    "testId": 177,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it177",
    "access": null,
    "description": "should fail when the function returns  a promise that rejects",
    "lineNumber": 143
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it178",
    "testId": 178,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it178",
    "access": null,
    "description": "should fail when the function returns  a promise that rejects to a true",
    "lineNumber": 150
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it179",
    "testId": 179,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it179",
    "access": null,
    "description": "should fail when the function returns  a promise that rejects to a undefined",
    "lineNumber": 157
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it180",
    "testId": 180,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it180",
    "access": null,
    "description": "should fail when the function returns  a promise that rejects to a null",
    "lineNumber": 163
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it181",
    "testId": 181,
    "memberof": "test/validationRules/custom-function.spec.js~describe161",
    "testDepth": 1,
    "longname": "test/validationRules/custom-function.spec.js~describe161.it181",
    "access": null,
    "description": "should fail when the function returns  a promise that rejects to a message",
    "lineNumber": 169
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/digit.spec.js",
    "memberof": null,
    "longname": "test/validationRules/digit.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {DigitValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on DigitValidationRule', () => {\n  it('should be working with strings', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new DigitValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate('15')).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with simple numbers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new DigitValidationRule();\n    expectations.expectAsync(rule.validate(3)).toBe(true);\n    expectations.expectAsync(rule.validate(-3)).toBe(false);\n    expectations.validate();\n  });\n  it('should not be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new DigitValidationRule();\n    expectations.expectAsync(rule.validate(3.01)).toBe(false);\n    expectations.validate();\n  });\n  it('should not be working with properly formatted numbers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new DigitValidationRule();\n    expectations.expectAsync(rule.validate('300,000.14')).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe182",
    "testId": 182,
    "memberof": "test/validationRules/digit.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/digit.spec.js~describe182",
    "access": null,
    "description": "Tests on DigitValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it183",
    "testId": 183,
    "memberof": "test/validationRules/digit.spec.js~describe182",
    "testDepth": 1,
    "longname": "test/validationRules/digit.spec.js~describe182.it183",
    "access": null,
    "description": "should be working with strings",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it184",
    "testId": 184,
    "memberof": "test/validationRules/digit.spec.js~describe182",
    "testDepth": 1,
    "longname": "test/validationRules/digit.spec.js~describe182.it184",
    "access": null,
    "description": "should be working with simple numbers",
    "lineNumber": 14
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it185",
    "testId": 185,
    "memberof": "test/validationRules/digit.spec.js~describe182",
    "testDepth": 1,
    "longname": "test/validationRules/digit.spec.js~describe182.it185",
    "access": null,
    "description": "should not be working with decimals",
    "lineNumber": 21
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it186",
    "testId": 186,
    "memberof": "test/validationRules/digit.spec.js~describe182",
    "testDepth": 1,
    "longname": "test/validationRules/digit.spec.js~describe182.it186",
    "access": null,
    "description": "should not be working with properly formatted numbers",
    "lineNumber": 27
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/email.spec.js",
    "memberof": null,
    "longname": "test/validationRules/email.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {EmailValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on EmailValidationRule', () => {\n  it('should be working with valid isEmail addresses', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com')).toBe(true);\n    expectations.expectAsync(rule.validate('bob-the@builder.com')).toBe(true);\n    expectations.expectAsync(rule.validate('long_address_123@some.domain.com.gov.mx')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with missing @', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.jgmail.com')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with addresses without identifier', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('@gmail.com')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with duplicate @', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen@j@gmail.com')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with duplicate .', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com')).toBe(true);\n    expectations.expectAsync(rule.validate('van..der.haegen.j@gmail.com')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with duplicate _', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van_der_haegen_j@g_mail.com')).toBe(true);\n    expectations.expectAsync(rule.validate('van_der_haegen_j@g__mail.com')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not be working with addresses ending in dot', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new EmailValidationRule();\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail.com.')).toBe(false);\n    expectations.expectAsync(rule.validate('van.der.haegen.j@gmail..')).toBe(false);\n    expectations.validate();\n  });\n\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe187",
    "testId": 187,
    "memberof": "test/validationRules/email.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/email.spec.js~describe187",
    "access": null,
    "description": "Tests on EmailValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it188",
    "testId": 188,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it188",
    "access": null,
    "description": "should be working with valid isEmail addresses",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it189",
    "testId": 189,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it189",
    "access": null,
    "description": "should not be working with missing @",
    "lineNumber": 16
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it190",
    "testId": 190,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it190",
    "access": null,
    "description": "should not be working with addresses without identifier",
    "lineNumber": 23
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it191",
    "testId": 191,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it191",
    "access": null,
    "description": "should not be working with duplicate @",
    "lineNumber": 30
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it192",
    "testId": 192,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it192",
    "access": null,
    "description": "should not be working with duplicate .",
    "lineNumber": 37
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it193",
    "testId": 193,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it193",
    "access": null,
    "description": "should not be working with duplicate _",
    "lineNumber": 45
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it194",
    "testId": 194,
    "memberof": "test/validationRules/email.spec.js~describe187",
    "testDepth": 1,
    "longname": "test/validationRules/email.spec.js~describe187.it194",
    "access": null,
    "description": "should not be working with addresses ending in dot",
    "lineNumber": 53
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/equality.spec.js",
    "memberof": null,
    "longname": "test/validationRules/equality.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {EqualityValidationRule} from '../../src/validation/validation-rules';\nimport {EqualityWithOtherLabelValidationRule} from '../../src/validation/validation-rules';\nimport {InEqualityValidationRule} from '../../src/validation/validation-rules';\nimport {InEqualityWithOtherLabelValidationRule } from '../../src/validation/validation-rules';\n\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on EqualityValidationRule', () => {\n  it('should be working with equality', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new EqualityValidationRule('a').validate('a')).toBe(true);\n    expectations.expectAsync(new EqualityValidationRule('a').validate('b')).toBe(false);\n\n    expectations.expectAsync(new EqualityValidationRule(1337).validate(1337)).toBe(true);\n    expectations.expectAsync(new EqualityValidationRule(1337).validate(15)).toBe(false);\n\n    expectations.expectAsync(new EqualityValidationRule(new Date(2000, 1, 1, 1, 1, 1)).validate(new Date(2000, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(new EqualityValidationRule(new Date(2000, 1, 1, 1, 1, 1)).validate(new Date(2044, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with a function', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new EqualityValidationRule(() => {return 'a';}).validate('a')).toBe(true);\n    expectations.expectAsync(new EqualityValidationRule(() => {return 'a';}).validate('b')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with inequality', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new InEqualityValidationRule('a', false).validate('a')).toBe(false);\n    expectations.expectAsync(new InEqualityValidationRule('a', false).validate('b')).toBe(true);\n\n    expectations.expectAsync(new InEqualityValidationRule(1337, false).validate(1337)).toBe(false);\n    expectations.expectAsync(new InEqualityValidationRule(1337, false).validate(15)).toBe(true);\n\n    expectations.expectAsync(new InEqualityValidationRule(new Date(2000, 1, 1, 1, 1, 1), false).validate(new Date(2000, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(new InEqualityValidationRule(new Date(2000, 1, 1, 1, 1, 1), false).validate(new Date(2044, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.validate();\n  });\n\n\n  it('should explain with the otherValueLabel, if present', (done) => {\n    var expectations = new Expectations(expect, done);\n    var ruleEqual = new EqualityValidationRule('a');\n    var ruleInEqual = new InEqualityValidationRule('a');\n    var ruleEqualWithLabel = new EqualityWithOtherLabelValidationRule('a', 'password');\n    var ruleInEqualWithLabel = new InEqualityWithOtherLabelValidationRule('a', 'password');\n\n    expectations.expectAsync(ruleEqual.validate('b')).toBe(false);\n    expectations.expectAsync(ruleInEqual.validate('a')).toBe(false);\n    expectations.expectAsync(ruleEqualWithLabel.validate('b')).toBe(false);\n    expectations.expectAsync(ruleInEqualWithLabel.validate('a')).toBe(false);\n\n    expectations.expectAsync(() => {return ruleEqual.explain();}).toBe('should be a');\n    expectations.expectAsync(() => {return ruleInEqual.explain();}).toBe('cannot be a');\n    expectations.expectAsync(() => {return ruleEqualWithLabel.explain();}).toBe('does not match password');\n    expectations.expectAsync(() => {return ruleInEqualWithLabel.explain();}).toBe('cannot match password');\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe195",
    "testId": 195,
    "memberof": "test/validationRules/equality.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/equality.spec.js~describe195",
    "access": null,
    "description": "Tests on EqualityValidationRule",
    "lineNumber": 10
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it196",
    "testId": 196,
    "memberof": "test/validationRules/equality.spec.js~describe195",
    "testDepth": 1,
    "longname": "test/validationRules/equality.spec.js~describe195.it196",
    "access": null,
    "description": "should be working with equality",
    "lineNumber": 11
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it197",
    "testId": 197,
    "memberof": "test/validationRules/equality.spec.js~describe195",
    "testDepth": 1,
    "longname": "test/validationRules/equality.spec.js~describe195.it197",
    "access": null,
    "description": "should be working with a function",
    "lineNumber": 24
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it198",
    "testId": 198,
    "memberof": "test/validationRules/equality.spec.js~describe195",
    "testDepth": 1,
    "longname": "test/validationRules/equality.spec.js~describe195.it198",
    "access": null,
    "description": "should be working with inequality",
    "lineNumber": 31
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it199",
    "testId": 199,
    "memberof": "test/validationRules/equality.spec.js~describe195",
    "testDepth": 1,
    "longname": "test/validationRules/equality.spec.js~describe195.it199",
    "access": null,
    "description": "should explain with the otherValueLabel, if present",
    "lineNumber": 45
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/in-collection.spec.js",
    "memberof": null,
    "longname": "test/validationRules/in-collection.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {InCollectionValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on InCollectionValidationRule', () => {\n  it('should be working with string arrays', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new InCollectionValidationRule(['a', 'b']).validate('a')).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule(['a', 'b']).validate('b')).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule(['a', 'b']).validate('c')).toBe(false);\n    expectations.expectAsync(new InCollectionValidationRule(['a', 'b']).validate('d')).toBe(false);\n    expectations.validate();\n  });\n  it('should be working with integer', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new InCollectionValidationRule([1, 2]).validate(1)).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule([1, 2]).validate(1)).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule([1, 2]).validate(3)).toBe(false);\n    expectations.expectAsync(new InCollectionValidationRule([1, 2]).validate(4)).toBe(false);\n    expectations.validate();\n  });\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    expectations.expectAsync(new InCollectionValidationRule([1.1, 2.2]).validate(1.1)).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule([1.1, 2.2]).validate(2.2)).toBe(true);\n    expectations.expectAsync(new InCollectionValidationRule([1.1, 2.2]).validate(2.22)).toBe(false);\n    expectations.expectAsync(new InCollectionValidationRule([1.1, 2.2]).validate(0.93)).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe200",
    "testId": 200,
    "memberof": "test/validationRules/in-collection.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/in-collection.spec.js~describe200",
    "access": null,
    "description": "Tests on InCollectionValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it201",
    "testId": 201,
    "memberof": "test/validationRules/in-collection.spec.js~describe200",
    "testDepth": 1,
    "longname": "test/validationRules/in-collection.spec.js~describe200.it201",
    "access": null,
    "description": "should be working with string arrays",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it202",
    "testId": 202,
    "memberof": "test/validationRules/in-collection.spec.js~describe200",
    "testDepth": 1,
    "longname": "test/validationRules/in-collection.spec.js~describe200.it202",
    "access": null,
    "description": "should be working with integer",
    "lineNumber": 15
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it203",
    "testId": 203,
    "memberof": "test/validationRules/in-collection.spec.js~describe200",
    "testDepth": 1,
    "longname": "test/validationRules/in-collection.spec.js~describe200.it203",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 23
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/maximum-inclusive-value.spec.js",
    "memberof": null,
    "longname": "test/validationRules/maximum-inclusive-value.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MaximumInclusiveValueValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MaximumInclusiveValueValidationRule', () => {\n  it('should be working with integers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumInclusiveValueValidationRule(3);\n    expectations.expectAsync(rule.validate(1)).toBe(true);\n    expectations.expectAsync(rule.validate(2)).toBe(true);\n    expectations.expectAsync(rule.validate(3)).toBe(true);\n    expectations.expectAsync(rule.validate(4)).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumInclusiveValueValidationRule(3);\n    expectations.expectAsync(rule.validate(2.9)).toBe(true);\n    expectations.expectAsync(rule.validate(2.99)).toBe(true);\n    expectations.expectAsync(rule.validate(3.00)).toBe(true);\n    expectations.expectAsync(rule.validate(3.01)).toBe(false);\n    expectations.validate();\n  });\n\n\n  it('should be working with dates', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumInclusiveValueValidationRule(new Date(2000, 1, 1, 1, 1, 1, 1));\n    expectations.expectAsync(rule.validate(new Date(1999, 1, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 0))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 2))).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe204",
    "testId": 204,
    "memberof": "test/validationRules/maximum-inclusive-value.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/maximum-inclusive-value.spec.js~describe204",
    "access": null,
    "description": "Tests on MaximumInclusiveValueValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it205",
    "testId": 205,
    "memberof": "test/validationRules/maximum-inclusive-value.spec.js~describe204",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-inclusive-value.spec.js~describe204.it205",
    "access": null,
    "description": "should be working with integers",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it206",
    "testId": 206,
    "memberof": "test/validationRules/maximum-inclusive-value.spec.js~describe204",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-inclusive-value.spec.js~describe204.it206",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it207",
    "testId": 207,
    "memberof": "test/validationRules/maximum-inclusive-value.spec.js~describe204",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-inclusive-value.spec.js~describe204.it207",
    "access": null,
    "description": "should be working with dates",
    "lineNumber": 28
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/maximum-length.spec.js",
    "memberof": null,
    "longname": "test/validationRules/maximum-length.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MaximumLengthValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MaximumLengthValidationRule', () => {\n  it('should be working with strings', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumLengthValidationRule(2);\n    expectations.expectAsync(rule.validate('a')).toBe(true);\n    expectations.expectAsync(rule.validate('ab')).toBe(true);\n    expectations.expectAsync(rule.validate('abc')).toBe(false);\n    expectations.expectAsync(rule.validate('abcd')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should not trim strings before evaluating', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumLengthValidationRule(2);\n    expectations.expectAsync(rule.validate(' a')).toBe(true);\n    expectations.expectAsync(rule.validate('a ')).toBe(true);\n    expectations.expectAsync(rule.validate(' a ')).toBe(false);\n    expectations.expectAsync(rule.validate('  aa  ')).toBe(false);\n    expectations.validate();\n  });\n  it('should be working with arrays', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumLengthValidationRule(2);\n    expectations.expectAsync(rule.validate([1])).toBe(true);\n    expectations.expectAsync(rule.validate([1, 2])).toBe(true);\n    expectations.expectAsync(rule.validate([1, 2, 3])).toBe(false);\n    expectations.expectAsync(rule.validate([1, 2, 3, 4])).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with with any object that has a \"length\" property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumLengthValidationRule(2);\n    expectations.expectAsync(rule.validate({length: 1})).toBe(true);\n    expectations.expectAsync(rule.validate({length: 2})).toBe(true);\n    expectations.expectAsync(rule.validate({length: 3})).toBe(false);\n    expectations.expectAsync(rule.validate({length: 4})).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe208",
    "testId": 208,
    "memberof": "test/validationRules/maximum-length.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/maximum-length.spec.js~describe208",
    "access": null,
    "description": "Tests on MaximumLengthValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it209",
    "testId": 209,
    "memberof": "test/validationRules/maximum-length.spec.js~describe208",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-length.spec.js~describe208.it209",
    "access": null,
    "description": "should be working with strings",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it210",
    "testId": 210,
    "memberof": "test/validationRules/maximum-length.spec.js~describe208",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-length.spec.js~describe208.it210",
    "access": null,
    "description": "should not trim strings before evaluating",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it211",
    "testId": 211,
    "memberof": "test/validationRules/maximum-length.spec.js~describe208",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-length.spec.js~describe208.it211",
    "access": null,
    "description": "should be working with arrays",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it212",
    "testId": 212,
    "memberof": "test/validationRules/maximum-length.spec.js~describe208",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-length.spec.js~describe208.it212",
    "access": null,
    "description": "should be working with with any object that has a \"length\" property",
    "lineNumber": 36
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/maximum-value.spec.js",
    "memberof": null,
    "longname": "test/validationRules/maximum-value.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MaximumValueValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MaximumValueValidationRule', () => {\n  it('should be working with integers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumValueValidationRule(3);\n    expectations.expectAsync(rule.validate(1)).toBe(true);\n    expectations.expectAsync(rule.validate(2)).toBe(true);\n    expectations.expectAsync(rule.validate(3)).toBe(false);\n    expectations.expectAsync(rule.validate(4)).toBe(false);\n    expectations.validate();\n  });\n\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumValueValidationRule(3);\n    expectations.expectAsync(rule.validate(2.9)).toBe(true);\n    expectations.expectAsync(rule.validate(2.99)).toBe(true);\n    expectations.expectAsync(rule.validate(3.00)).toBe(false);\n    expectations.expectAsync(rule.validate(3.01)).toBe(false);\n    expectations.validate();\n  });\n\n\n  it('should be working with dates', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MaximumValueValidationRule(new Date(2000, 1, 1, 1, 1, 1, 1));\n    expectations.expectAsync(rule.validate(new Date(1999, 1, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 0))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 2))).toBe(false);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe213",
    "testId": 213,
    "memberof": "test/validationRules/maximum-value.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/maximum-value.spec.js~describe213",
    "access": null,
    "description": "Tests on MaximumValueValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it214",
    "testId": 214,
    "memberof": "test/validationRules/maximum-value.spec.js~describe213",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-value.spec.js~describe213.it214",
    "access": null,
    "description": "should be working with integers",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it215",
    "testId": 215,
    "memberof": "test/validationRules/maximum-value.spec.js~describe213",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-value.spec.js~describe213.it215",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it216",
    "testId": 216,
    "memberof": "test/validationRules/maximum-value.spec.js~describe213",
    "testDepth": 1,
    "longname": "test/validationRules/maximum-value.spec.js~describe213.it216",
    "access": null,
    "description": "should be working with dates",
    "lineNumber": 28
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/minimum-inclusive-value.spec.js",
    "memberof": null,
    "longname": "test/validationRules/minimum-inclusive-value.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MinimumInclusiveValueValidationRule} from '../../src/validation/validation-rules'\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MinimumValueValidationRule', () => {\n  it('should be working with integers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumInclusiveValueValidationRule(3);\n    expectations.expectAsync(rule.validate(1)).toBe(false);\n    expectations.expectAsync(rule.validate(2)).toBe(false);\n    expectations.expectAsync(rule.validate(3)).toBe(true);\n    expectations.expectAsync(rule.validate(4)).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumInclusiveValueValidationRule(3);\n    expectations.expectAsync(rule.validate(2.9)).toBe(false);\n    expectations.expectAsync(rule.validate(2.99)).toBe(false);\n    expectations.expectAsync(rule.validate(3.00)).toBe(true);\n    expectations.expectAsync(rule.validate(3.01)).toBe(true);\n    expectations.validate();\n  });\n\n\n  it('should be working with dates', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumInclusiveValueValidationRule(new Date(2000, 1, 1, 1, 1, 1, 1));\n    expectations.expectAsync(rule.validate(new Date(1999, 1, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 0))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 1))).toBe(true);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 2))).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe217",
    "testId": 217,
    "memberof": "test/validationRules/minimum-inclusive-value.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/minimum-inclusive-value.spec.js~describe217",
    "access": null,
    "description": "Tests on MinimumValueValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it218",
    "testId": 218,
    "memberof": "test/validationRules/minimum-inclusive-value.spec.js~describe217",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-inclusive-value.spec.js~describe217.it218",
    "access": null,
    "description": "should be working with integers",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it219",
    "testId": 219,
    "memberof": "test/validationRules/minimum-inclusive-value.spec.js~describe217",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-inclusive-value.spec.js~describe217.it219",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it220",
    "testId": 220,
    "memberof": "test/validationRules/minimum-inclusive-value.spec.js~describe217",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-inclusive-value.spec.js~describe217.it220",
    "access": null,
    "description": "should be working with dates",
    "lineNumber": 28
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/minimum-value.spec.js",
    "memberof": null,
    "longname": "test/validationRules/minimum-value.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MinimumValueValidationRule} from '../../src/validation/validation-rules'\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MinimumValueValidationRule', () => {\n  it('should be working with integers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumValueValidationRule(3);\n    expectations.expectAsync(rule.validate(1)).toBe(false);\n    expectations.expectAsync(rule.validate(2)).toBe(false);\n    expectations.expectAsync(rule.validate(3)).toBe(false);\n    expectations.expectAsync(rule.validate(4)).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumValueValidationRule(3);\n    expectations.expectAsync(rule.validate(2.9)).toBe(false);\n    expectations.expectAsync(rule.validate(2.99)).toBe(false);\n    expectations.expectAsync(rule.validate(3.00)).toBe(false);\n    expectations.expectAsync(rule.validate(3.01)).toBe(true);\n    expectations.validate();\n  });\n\n\n  it('should be working with dates', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumValueValidationRule(new Date(2000, 1, 1, 1, 1, 1, 1));\n    expectations.expectAsync(rule.validate(new Date(1999, 1, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 0))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 1))).toBe(false);\n    expectations.expectAsync(rule.validate(new Date(2000, 1, 1, 1, 1, 1, 2))).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe221",
    "testId": 221,
    "memberof": "test/validationRules/minimum-value.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/minimum-value.spec.js~describe221",
    "access": null,
    "description": "Tests on MinimumValueValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it222",
    "testId": 222,
    "memberof": "test/validationRules/minimum-value.spec.js~describe221",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-value.spec.js~describe221.it222",
    "access": null,
    "description": "should be working with integers",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it223",
    "testId": 223,
    "memberof": "test/validationRules/minimum-value.spec.js~describe221",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-value.spec.js~describe221.it223",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it224",
    "testId": 224,
    "memberof": "test/validationRules/minimum-value.spec.js~describe221",
    "testDepth": 1,
    "longname": "test/validationRules/minimum-value.spec.js~describe221.it224",
    "access": null,
    "description": "should be working with dates",
    "lineNumber": 28
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/minum-length.spec.js",
    "memberof": null,
    "longname": "test/validationRules/minum-length.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {MinimumLengthValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on MinimumLengthValidationRule', () => {\n  it('should be working with strings', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumLengthValidationRule(3);\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate('ab')).toBe(false);\n    expectations.expectAsync(rule.validate('abc')).toBe(true);\n    expectations.expectAsync(rule.validate('abcd')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not trim strings before evaluating', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumLengthValidationRule(3);\n    expectations.expectAsync(rule.validate('a ')).toBe(false);\n    expectations.expectAsync(rule.validate(' a')).toBe(false);\n    expectations.expectAsync(rule.validate(' a ')).toBe(true);\n    expectations.expectAsync(rule.validate('  a  ')).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with arrays', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumLengthValidationRule(3);\n    expectations.expectAsync(rule.validate([1])).toBe(false);\n    expectations.expectAsync(rule.validate([1, 2])).toBe(false);\n    expectations.expectAsync(rule.validate([1, 2, 3])).toBe(true);\n    expectations.expectAsync(rule.validate([1, 2, 3, 4])).toBe(true);\n    expectations.validate();\n  });\n\n  it('should be working with with any object that has a \"length\" property', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MinimumLengthValidationRule(3);\n    expectations.expectAsync(rule.validate({length: 1})).toBe(false);\n    expectations.expectAsync(rule.validate({length: 2})).toBe(false);\n    expectations.expectAsync(rule.validate({length: 3})).toBe(true);\n    expectations.expectAsync(rule.validate({length: 4})).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe225",
    "testId": 225,
    "memberof": "test/validationRules/minum-length.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/minum-length.spec.js~describe225",
    "access": null,
    "description": "Tests on MinimumLengthValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it226",
    "testId": 226,
    "memberof": "test/validationRules/minum-length.spec.js~describe225",
    "testDepth": 1,
    "longname": "test/validationRules/minum-length.spec.js~describe225.it226",
    "access": null,
    "description": "should be working with strings",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it227",
    "testId": 227,
    "memberof": "test/validationRules/minum-length.spec.js~describe225",
    "testDepth": 1,
    "longname": "test/validationRules/minum-length.spec.js~describe225.it227",
    "access": null,
    "description": "should not trim strings before evaluating",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it228",
    "testId": 228,
    "memberof": "test/validationRules/minum-length.spec.js~describe225",
    "testDepth": 1,
    "longname": "test/validationRules/minum-length.spec.js~describe225.it228",
    "access": null,
    "description": "should be working with arrays",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it229",
    "testId": 229,
    "memberof": "test/validationRules/minum-length.spec.js~describe225",
    "testDepth": 1,
    "longname": "test/validationRules/minum-length.spec.js~describe225.it229",
    "access": null,
    "description": "should be working with with any object that has a \"length\" property",
    "lineNumber": 36
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/numeric.spec.js",
    "memberof": null,
    "longname": "test/validationRules/numeric.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {NumericValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on NumericValidationRule', () => {\n  it('should be working with strings', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new NumericValidationRule();\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate('15')).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with simple numbers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new NumericValidationRule();\n    expectations.expectAsync(rule.validate(3)).toBe(true);\n    expectations.expectAsync(rule.validate(-3)).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with decimals', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new NumericValidationRule();\n    expectations.expectAsync(rule.validate(3.01)).toBe(true);\n    expectations.expectAsync(rule.validate(-3.15)).toBe(true);\n    expectations.expectAsync(rule.validate(-1234567.890123)).toBe(true);\n    expectations.validate();\n  });\n  it('should be working with properly formatted numbers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new NumericValidationRule();\n    expectations.expectAsync(rule.validate('300,000.14')).toBe(true);\n    expectations.expectAsync(rule.validate('1,234,300,000.14172727')).toBe(true);\n    expectations.expectAsync(rule.validate('-1,234,300,000.14172727')).toBe(true);\n    expectations.expectAsync(rule.validate('.12323121')).toBe(true);\n\n    expectations.expectAsync(rule.validate('3,12,9')).toBe(false);\n    expectations.expectAsync(rule.validate('-3,12.2')).toBe(false);\n    expectations.expectAsync(rule.validate('-3,123.')).toBe(false);\n    expectations.expectAsync(rule.validate('-3,123.7.7')).toBe(false);\n    expectations.expectAsync(rule.validate('-0.733,933')).toBe(false);\n    expectations.validate();\n\n\n  });\n  it('should be working with un-properly formatted numbers', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new NumericValidationRule();\n    expectations.expectAsync(rule.validate('300000.1419191991')).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe230",
    "testId": 230,
    "memberof": "test/validationRules/numeric.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/numeric.spec.js~describe230",
    "access": null,
    "description": "Tests on NumericValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it231",
    "testId": 231,
    "memberof": "test/validationRules/numeric.spec.js~describe230",
    "testDepth": 1,
    "longname": "test/validationRules/numeric.spec.js~describe230.it231",
    "access": null,
    "description": "should be working with strings",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it232",
    "testId": 232,
    "memberof": "test/validationRules/numeric.spec.js~describe230",
    "testDepth": 1,
    "longname": "test/validationRules/numeric.spec.js~describe230.it232",
    "access": null,
    "description": "should be working with simple numbers",
    "lineNumber": 14
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it233",
    "testId": 233,
    "memberof": "test/validationRules/numeric.spec.js~describe230",
    "testDepth": 1,
    "longname": "test/validationRules/numeric.spec.js~describe230.it233",
    "access": null,
    "description": "should be working with decimals",
    "lineNumber": 21
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it234",
    "testId": 234,
    "memberof": "test/validationRules/numeric.spec.js~describe230",
    "testDepth": 1,
    "longname": "test/validationRules/numeric.spec.js~describe230.it234",
    "access": null,
    "description": "should be working with properly formatted numbers",
    "lineNumber": 29
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it235",
    "testId": 235,
    "memberof": "test/validationRules/numeric.spec.js~describe230",
    "testDepth": 1,
    "longname": "test/validationRules/numeric.spec.js~describe230.it235",
    "access": null,
    "description": "should be working with un-properly formatted numbers",
    "lineNumber": 46
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/regex.spec.js",
    "memberof": null,
    "longname": "test/validationRules/regex.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {RegexValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on RegexValidationRule', () => {\n\n  it('should be working', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new RegexValidationRule(/^\\d+$/);\n    expectations.expectAsync(rule.validate('a')).toBe(false);\n    expectations.expectAsync(rule.validate('15')).toBe(true);\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe236",
    "testId": 236,
    "memberof": "test/validationRules/regex.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/regex.spec.js~describe236",
    "access": null,
    "description": "Tests on RegexValidationRule",
    "lineNumber": 6
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it237",
    "testId": 237,
    "memberof": "test/validationRules/regex.spec.js~describe236",
    "testDepth": 1,
    "longname": "test/validationRules/regex.spec.js~describe236.it237",
    "access": null,
    "description": "should be working",
    "lineNumber": 8
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "test/validationRules/strong-password.spec.js",
    "memberof": null,
    "longname": "test/validationRules/strong-password.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {StrongPasswordValidationRule} from '../../src/validation/validation-rules';\nimport {MediumPasswordValidationRule} from '../../src/validation/validation-rules';\nimport {Expectations} from '../expectations';\n\n//No need to test empty values, they are filtered out by the \"ValidationProperty\" depending if they are 'isNotEmpty()'\n\ndescribe('Tests on StrongPasswordValidationRule', () => {\n  it('should be working with strong passwords', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new StrongPasswordValidationRule();\n    expectations.expectAsync(rule.validate('aBcdE*123')).toBe(true);\n    expectations.validate();\n  });\n\n  it('should not be working with a medium password', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new StrongPasswordValidationRule(); //default complexity level is 4\n    expectations.expectAsync(rule.validate('aBcdEfG*1')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcdEfG*')).toBe(false);\n    expectations.expectAsync(rule.validate('aBcdEfG1')).toBe(false);\n    expectations.expectAsync(rule.validate('abcdefg*1')).toBe(false);\n    expectations.expectAsync(rule.validate('ABCDEFG*1')).toBe(false);\n    expectations.validate();\n  });\n\n  it('should give a correct translation', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new StrongPasswordValidationRule(); //default complexity level is 4\n    expectations.expectAsync(rule.validate('aBcdEfG*')).toBe(false);\n    expectations.expectAsync(() => {\n      return rule.explain();\n    }).toBe('should contain a combination of lowercase letters, uppercase letters, digits and special characters');\n    expectations.validate();\n  });\n});\ndescribe('tests on MediumPasswordValidationRule', () => {\n  it('should respect the minimum complexity level', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MediumPasswordValidationRule(); //default complexity level is 3\n    expectations.expectAsync(rule.validate('aBcdEfG*1')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcdEfG*S')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcdEfG1')).toBe(true);\n    expectations.expectAsync(rule.validate('abcdefg*1')).toBe(true);\n    expectations.expectAsync(rule.validate('ABCDEFG*1')).toBe(true);\n    expectations.expectAsync(rule.validate('ABCDEFG123')).toBe(false);\n    expectations.expectAsync(rule.validate('123abcdefg')).toBe(false);\n    expectations.validate();\n  });\n  it('should respect the minimum complexity level', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MediumPasswordValidationRule(2); //default complexity level is 3\n    expectations.expectAsync(rule.validate('aBcdEfG*1')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcdEfG*S')).toBe(true);\n    expectations.expectAsync(rule.validate('aBcdEfG1')).toBe(true);\n    expectations.expectAsync(rule.validate('abcdefg*1')).toBe(true);\n    expectations.expectAsync(rule.validate('ABCDEFG*1')).toBe(true);\n    expectations.expectAsync(rule.validate('ABCDEFG123')).toBe(true);\n    expectations.expectAsync(rule.validate('123abcdefg')).toBe(true);\n    expectations.expectAsync(rule.validate('abcdefg')).toBe(false);\n    expectations.expectAsync(rule.validate('12345789')).toBe(false);\n    expectations.expectAsync(rule.validate('aBcDeFgH')).toBe(true);\n    expectations.validate();\n  });\n  it('should give a correct translation', (done) => {\n    var expectations = new Expectations(expect, done);\n    var rule = new MediumPasswordValidationRule(2); //default complexity level is 3\n    expectations.expectAsync(rule.validate('abcdefghij')).toBe(false);\n    expectations.expectAsync(() => {\n      return rule.explain();\n    }).toBe('should contain at least 2 of the following groups: lowercase letters, uppercase letters, digits or special characters');\n    expectations.validate();\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe238",
    "testId": 238,
    "memberof": "test/validationRules/strong-password.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/strong-password.spec.js~describe238",
    "access": null,
    "description": "Tests on StrongPasswordValidationRule",
    "lineNumber": 7
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it239",
    "testId": 239,
    "memberof": "test/validationRules/strong-password.spec.js~describe238",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe238.it239",
    "access": null,
    "description": "should be working with strong passwords",
    "lineNumber": 8
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it240",
    "testId": 240,
    "memberof": "test/validationRules/strong-password.spec.js~describe238",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe238.it240",
    "access": null,
    "description": "should not be working with a medium password",
    "lineNumber": 15
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it241",
    "testId": 241,
    "memberof": "test/validationRules/strong-password.spec.js~describe238",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe238.it241",
    "access": null,
    "description": "should give a correct translation",
    "lineNumber": 26
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe242",
    "testId": 242,
    "memberof": "test/validationRules/strong-password.spec.js",
    "testDepth": 0,
    "longname": "test/validationRules/strong-password.spec.js~describe242",
    "access": null,
    "description": "tests on MediumPasswordValidationRule",
    "lineNumber": 36
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it243",
    "testId": 243,
    "memberof": "test/validationRules/strong-password.spec.js~describe242",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe242.it243",
    "access": null,
    "description": "should respect the minimum complexity level",
    "lineNumber": 37
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it244",
    "testId": 244,
    "memberof": "test/validationRules/strong-password.spec.js~describe242",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe242.it244",
    "access": null,
    "description": "should respect the minimum complexity level",
    "lineNumber": 49
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it245",
    "testId": 245,
    "memberof": "test/validationRules/strong-password.spec.js~describe242",
    "testDepth": 1,
    "longname": "test/validationRules/strong-password.spec.js~describe242.it245",
    "access": null,
    "description": "should give a correct translation",
    "lineNumber": 64
  }
]
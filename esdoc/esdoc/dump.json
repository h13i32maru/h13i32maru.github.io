[
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/AbstractDoc.js",
    "memberof": null,
    "longname": "src/Doc/AbstractDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport fs from 'fs';\nimport ParamParser from '../Parser/ParamParser.js';\nimport ASTUtil from '../Util/ASTUtil.js';\n\n/**\n * Abstract Doc Class.\n * @todo rename this class name.\n */\nexport default class AbstractDoc {\n  /**\n   * create instance.\n   * @param {AST} ast - this is AST that contains this doc.\n   * @param {ASTNode} node - this is self node.\n   * @param {PathResolver} pathResolver - this is file path resolver that contains this doc.\n   * @param {Tag[]} commentTags - this is tags that self node has.\n   */\n  constructor(ast, node, pathResolver, commentTags = []){\n    this._ast = ast;\n    this._node = node;\n    this._pathResolver = pathResolver;\n    this._commentTags = commentTags;\n    this._value = {};\n\n    Object.defineProperty(this._node, 'doc', {value: this});\n\n    this._apply();\n  }\n\n  /** @type {DocObject[]} */\n  get value() {\n    return JSON.parse(JSON.stringify(this._value));\n  }\n\n  /**\n   * apply doc comment.\n   * @private\n   */\n  _apply() {\n    this['@_kind']();\n    this['@_static']();\n    this['@_variation']();\n    this['@_name']();\n    this['@_memberof']();\n    this['@_longname']();\n    this['@access']();\n    this['@_export']();\n    this['@_importPath']();\n    this['@_importStyle']();\n    this['@desc']();\n    this['@example']();\n    this['@see']();\n    this['@_lineNumber']();\n    this['@deprecated']();\n    this['@experimental']();\n    this['@since']();\n    this['@version']();\n    this['@todo']();\n    this['@ignore']();\n    this['@_pseudoExport']();\n    this['@_undocument']();\n    this['@_unknown']();\n\n    this['@param']();\n    this['@property']();\n    this['@return']();\n    this['@type']();\n    this['@abstract']();\n    this['@override']();\n    this['@throws']();\n    this['@emits']();\n    this['@listens']();\n    this['@_member']();\n    this['@_content']();\n    this['@_generator']();\n  }\n\n  /** for @_kind, does not need to use this tag */\n  ['@_kind']() {\n    this._value.kind = this._findTagValue(['@_kind']);\n  }\n\n  /** for @_static, does not need to use this tag */\n  ['@_static']() {\n    let tag = this._find(['@_static']);\n    if (tag) {\n      if (tag.tagValue === '' || tag.tagValue === 'true') {\n        this._value.static = true;\n      } else {\n        this._value.static = false;\n      }\n    } else {\n      if ('static' in this._node) {\n        this._value.static = this._node.static;\n      } else {\n        this._value.static = true;\n      }\n    }\n  }\n\n  /** for @_variation */\n  ['@_variation']() {\n    this._value.variation = this._findTagValue(['@_variation']);\n  }\n\n  /** for @_name, does not need to use this tag */\n  ['@_name']() {\n    this._value.name = this._findTagValue(['@_name']);\n  }\n\n  /** for @_memberof, does not need to use this tag */\n  ['@_memberof']() {\n    this._value.memberof = this._findTagValue(['@_memberof']);\n  }\n\n  /** for @_longname, does not need to use this tag */\n  ['@_longname']() {\n    let tag = this._find(['@_longname']);\n    if (tag) {\n      this._value.longname = tag.tagValue;\n    } else {\n      let memberof = this._value.memberof;\n      let name = this._value.name;\n      let scope = this._value.static ? '.' : '#';\n      if (memberof.includes('~')) {\n        this._value.longname = `${memberof}${scope}${name}`;\n      } else {\n        this._value.longname = `${memberof}~${name}`;\n      }\n    }\n  }\n\n  /** for @access, @public, @private, @protected */\n  ['@access']() {\n    let tag = this._find(['@access', '@public', '@private', '@protected']);\n    if (tag) {\n      let access;\n      switch (tag.tagName) {\n        case '@access': access = tag.tagValue; break;\n        case '@public': access = 'public'; break;\n        case '@protected': access = 'protected'; break;\n        case '@private': access = 'private'; break;\n      }\n\n      this._value.access = access;\n    } else {\n      this._value.access = null;\n    }\n  }\n\n  /** for @public */\n  ['@public'](){\n    // avoid unknown tag.\n  }\n\n  /** for @protected */\n  ['@protected']() {\n    // avoid unknown tag.\n  }\n\n  /** for @private */\n  ['@private']() {\n    // avoid unknown tag.\n  }\n\n  /** for @_export, does not need to use this tag */\n  ['@_export']() {\n    let tag = this._find(['@_export']);\n    if (tag) {\n      if (tag.tagValue === '' || tag.tagValue === 'true') {\n        this._value.export = true;\n      } else {\n        this._value.export = false;\n      }\n      return;\n    }\n\n    let parent = this._node.parent;\n    while (parent) {\n      if (parent.type === 'ExportDefaultDeclaration') {\n        this._value.export = true;\n        return;\n      } else if (parent.type === 'ExportNamedDeclaration') {\n        this._value.export = true;\n        return;\n      }\n\n      parent = parent.parent;\n    }\n\n    this._value.export = false;\n  }\n\n  /** for @_importPath, does not need to use this tag */\n  ['@_importPath']() {\n    let tag = this._find(['@_importPath']);\n    if (tag) {\n      this._value.importPath = tag.tagValue;\n    } else {\n      this._value.importPath = this._pathResolver.importPath;\n    }\n  }\n\n  /** for @_importStyle, does not need to use this tag */\n  ['@_importStyle']() {\n    let tag = this._find(['@_importStyle']);\n    if (tag) {\n      this._value.importStyle = tag.tagValue;\n      return;\n    }\n\n    if (this._node.__esdoc__pseudo_export) {\n      this._value.importStyle = null;\n      return;\n    }\n\n    let parent = this._node.parent;\n    let name = this._value.name;\n    while (parent) {\n      if (parent.type === 'ExportDefaultDeclaration') {\n        this._value.importStyle = name;\n        return;\n      } else if (parent.type === 'ExportNamedDeclaration') {\n        this._value.importStyle = `{${name}}`;\n        return;\n      }\n      parent = parent.parent;\n    }\n\n    this._value.importStyle = null;\n  }\n\n  /** for @desc */\n  ['@desc']() {\n    this._value.description = this._findTagValue(['@desc']);\n  }\n\n  /** for @example. possible multi tag. */\n  ['@example']() {\n    let tags = this._findAll(['@example']);\n    if (!tags) return;\n    if (!tags.length) return;\n\n    this._value.examples = [];\n    for (let tag of tags) {\n      this._value.examples.push(tag.tagValue);\n    }\n  }\n\n  /** for @see. possible multi tag. */\n  ['@see']() {\n    let tags = this._findAll(['@see']);\n    if (!tags) return;\n    if (!tags.length) return;\n\n    this._value.see = [];\n    for (let tag of tags) {\n      this._value.see.push(tag.tagValue);\n    }\n  }\n\n  /** for @_lineNumber, does not need to use this tag */\n  [\"@_lineNumber\"]() {\n    let tag = this._find(['@_lineNumber']);\n    if (tag) {\n      this._value.lineNumber = tag.tagValue;\n      return;\n    }\n\n    let node = this._node;\n    if (node.loc) {\n      this._value.lineNumber = node.loc.start.line;\n    }\n  }\n\n  /** for @deprecated */\n  ['@deprecated']() {\n    let tag = this._find(['@deprecated']);\n    if (tag) {\n      if (tag.tagValue) {\n        this._value.deprecated = tag.tagValue;\n      } else {\n        this._value.deprecated = true;\n      }\n    }\n  }\n\n  /** for @experimental */\n  ['@experimental'](){\n    let tag = this._find(['@experimental']);\n    if (tag) {\n      if (tag.tagValue) {\n        this._value.experimental = tag.tagValue;\n      } else {\n        this._value.experimental = true;\n      }\n    }\n  }\n\n  /** for @since */\n  ['@since'](){\n    let tag = this._find(['@since']);\n    if (tag) {\n      this._value.since = tag.tagValue;\n    }\n  }\n\n  /** for @version */\n  ['@version'](){\n    let tag = this._find(['@version']);\n    if (tag) {\n      this._value.version = tag.tagValue;\n    }\n  }\n\n  /** for @todo. possible multi tag. */\n  ['@todo'](){\n    let tags = this._findAll(['@todo']);\n    if (tags) {\n      this._value.todo = [];\n      for (let tag of tags) {\n        this._value.todo.push(tag.tagValue);\n      }\n    }\n  }\n\n  /** for @ignore. */\n  ['@ignore'](){\n    let tag = this._find(['@ignore']);\n    if (tag) {\n      this._value.ignore = true;\n    }\n  }\n\n  /** for @_pseudoExport, does not need to use this tag. */\n  ['@_pseudoExport'](){\n    let tag = this._find(['@_pseudoExport']);\n    if (tag) {\n      this._value.pseudoExport = ['', 'true', true].includes(tag.tagValue);\n      return;\n    }\n\n    if (this._node.__esdoc__pseudo_export) {\n      this._value.pseudoExport = true;\n    }\n  }\n\n  /** for @_undocument, does not need to use this tag */\n  ['@_undocument']() {\n    let tag = this._find(['@_undocument']);\n    if (tag) {\n      this._value.undocument = true;\n    }\n  }\n\n  /** for @_unknown, does not need to use this tag */\n  ['@_unknown']() {\n    for (let tag of this._commentTags) {\n      if (this[tag.tagName]) continue;\n\n      if (!this._value.unknown) this._value.unknown = [];\n      this._value.unknown.push(tag);\n    }\n  }\n\n  /** for @param. */\n  ['@param']() {\n    let values = this._findAllTagValues(['@param']);\n    if (!values) return;\n\n    this._value.params = [];\n    for (let value of values) {\n      let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n      let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n      this._value.params.push(result);\n    }\n  }\n\n  /** for @return, @returns. */\n  ['@return']() {\n    let value = this._findTagValue(['@return', '@returns']);\n    if (!value) return;\n\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    this._value.return = result;\n  }\n\n  /** for @property. */\n  ['@property']() {\n    let values = this._findAllTagValues(['@property']);\n    if (!values) return;\n\n    this._value.properties = [];\n    for (let value of values) {\n      let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n      let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n      this._value.properties.push(result);\n    }\n  }\n\n  /** for @type. */\n  ['@type']() {\n    let value = this._findTagValue(['@type']);\n    if (!value) return;\n\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, false, false);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    this._value.type = result;\n  }\n\n  /** for @abstract. */\n  ['@abstract']() {\n    let tag = this._find(['@abstract']);\n    if (tag) {\n      this._value.abstract = true;\n    }\n  }\n\n  /** for @voerride. */\n  ['@override'](){\n    let tag = this._find(['@override']);\n    if (tag) {\n      this._value.override = true;\n    }\n  }\n\n  /** for @throws. */\n  ['@throws'](){\n    let values = this._findAllTagValues(['@throws']);\n    if (!values) return;\n\n    this._value.throws = [];\n    for (let value of values) {\n      let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n      let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n      this._value.throws.push({\n        types: result.types,\n        description: result.description\n      });\n    }\n  }\n\n  /** for @emits. */\n  ['@emits'](){\n    let values = this._findAllTagValues(['@emits']);\n    if (!values) return;\n\n    this._value.emits = [];\n    for (let value of values) {\n      let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n      let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n      this._value.emits.push({\n        types: result.types,\n        description: result.description\n      });\n    }\n  }\n\n  /** for @listens. */\n  ['@listens'](){\n    let values = this._findAllTagValues(['@listens']);\n    if (!values) return;\n\n    this._value.listens = [];\n    for (let value of values) {\n      let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n      let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n      this._value.listens.push({\n        types: result.types,\n        description: result.description\n      });\n    }\n  }\n\n  /** for @_member. */\n  ['@_member']() {\n    let value = this._findTagValue(['@_member']);\n    if (!value) return;\n\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, true, false);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    this._value.type = result;\n  }\n\n  /** for @_content, does not need to use this tag */\n  ['@_content']() {\n    let value = this._findTagValue(['@_content']);\n    if (value) {\n      this._value.content = value;\n    }\n  }\n\n  /** for @_generator, does not need to use this tag */\n  ['@_generator']() {\n    let tag = this._find(['@_generator']);\n    if (tag) {\n      this._value.generator = true;\n    }\n  }\n\n  /**\n   * find all tags.\n   * @param {string[]} names - tag names.\n   * @returns {Tag[]|null} found tags.\n   * @private\n   */\n  _findAll(names) {\n    let results = [];\n    for (let tag of this._commentTags) {\n      if (names.includes(tag.tagName)) results.push(tag);\n    }\n\n    if (results.length) {\n      return results;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * find last tag.\n   * @param {string[]} names - tag names.\n   * @returns {Tag|null} found tag.\n   * @private\n   */\n  _find(names) {\n    let results = this._findAll(names);\n    if (results && results.length) {\n      return results[results.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * find all tag values.\n   * @param {string[]} names - tag names.\n   * @returns {*[]|null} found values.\n   * @private\n   */\n  _findAllTagValues(names) {\n    let tags = this._findAll(names);\n    if (!tags) return null;\n\n    let results = [];\n    for (let tag of tags) {\n      results.push(tag.tagValue);\n    }\n\n    return results;\n  }\n\n  /**\n   * find ta value.\n   * @param {string[]} names - tag names.\n   * @returns {*|null} found value.\n   * @private\n   */\n  _findTagValue(names) {\n    let tag = this._find(names);\n    if (tag) {\n      return tag.tagValue;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * resolve long name.\n   * if the name relates import path, consider import path.\n   * @param {string} name - identifier name.\n   * @returns {string} resolved name.\n   * @private\n   */\n  _resolveLongname(name) {\n    let importPath = ASTUtil.findPathInImportDeclaration(this._ast, name);\n    if (!importPath) return name;\n\n    if (importPath.charAt(0) === '.' || importPath.charAt(0) === '/') {\n      let resolvedPath = this._pathResolver.resolve(importPath);\n      let longname = `${resolvedPath}~${name}`;\n      return longname;\n    } else {\n      let longname = `${importPath}~${name}`;\n      return longname;\n    }\n  }\n\n  /**\n   * flatten member expression property name.\n   * if node structure is [foo [bar [baz [this] ] ] ], flatten is ``this.baz.bar.foo``\n   * @param {ASTNode} node - target member expression node.\n   * @returns {string} flatten property.\n   * @private\n   */\n  _flattenMemberExpression(node) {\n    let results = [];\n    let target = node;\n\n    while(target) {\n      if (target.type === 'ThisExpression') {\n        results.push('this');\n        break;\n      } else if (target.type === 'Identifier') {\n        results.push(target.name);\n        break;\n      } else {\n        results.push(target.property.name);\n        target = target.object;\n      }\n    }\n\n    return results.reverse().join('.');\n  }\n\n  /**\n   * find class in same file, import or external.\n   * @param {string} className - target class name.\n   * @returns {string} found class long name.\n   * @private\n   */\n  _findClassLongname(className) {\n    // find in same file.\n    for (let node of this._ast.body) {\n      if (!['ExportDefaultDeclaration', 'ExportNamedDeclaration'].includes(node.type)) continue;\n      if (node.declaration && node.declaration.type === 'ClassDeclaration' && node.declaration.id.name === className) {\n        return `${this._pathResolver.filePath}~${className}`;\n      }\n    }\n\n    // find in import.\n    let importPath = ASTUtil.findPathInImportDeclaration(this._ast, className);\n    if (importPath) return this._resolveLongname(className);\n\n    // find in external\n    return className;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AbstractDoc",
    "memberof": "src/Doc/AbstractDoc.js",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/AbstractDoc.js",
    "importStyle": "AbstractDoc",
    "description": "Abstract Doc Class.",
    "lineNumber": 10,
    "todo": [
      "rename this class name."
    ],
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "this is AST that contains this doc."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "this is self node."
      },
      {
        "nullable": null,
        "types": [
          "PathResolver"
        ],
        "spread": false,
        "optional": false,
        "name": "pathResolver",
        "description": "this is file path resolver that contains this doc."
      },
      {
        "nullable": null,
        "types": [
          "Tag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "commentTags",
        "description": "this is tags that self node has."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ast",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_ast",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_node",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_node",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_pathResolver",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_pathResolver",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_commentTags",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_commentTags",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_value",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_value",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "value",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#value",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_apply",
    "access": "private",
    "description": "apply doc comment.",
    "lineNumber": 39,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_kind",
    "access": null,
    "description": "for @_kind, does not need to use this tag",
    "lineNumber": 79,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_static",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_static",
    "access": null,
    "description": "for @_static, does not need to use this tag",
    "lineNumber": 84,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_variation",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_variation",
    "access": null,
    "description": "for @_variation",
    "lineNumber": 102,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_name",
    "access": null,
    "description": "for @_name, does not need to use this tag",
    "lineNumber": 107,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_memberof",
    "access": null,
    "description": "for @_memberof, does not need to use this tag",
    "lineNumber": 112,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_longname",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_longname",
    "access": null,
    "description": "for @_longname, does not need to use this tag",
    "lineNumber": 117,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@access",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@access",
    "access": null,
    "description": "for @access, @public, @private, @protected",
    "lineNumber": 134,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@public",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@public",
    "access": null,
    "description": "for @public",
    "lineNumber": 152,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@protected",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@protected",
    "access": null,
    "description": "for @protected",
    "lineNumber": 157,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@private",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@private",
    "access": null,
    "description": "for @private",
    "lineNumber": 162,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_export",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_export",
    "access": null,
    "description": "for @_export, does not need to use this tag",
    "lineNumber": 167,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_importPath",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_importPath",
    "access": null,
    "description": "for @_importPath, does not need to use this tag",
    "lineNumber": 195,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_importStyle",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_importStyle",
    "access": null,
    "description": "for @_importStyle, does not need to use this tag",
    "lineNumber": 205,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@desc",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@desc",
    "access": null,
    "description": "for @desc",
    "lineNumber": 234,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@example",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@example",
    "access": null,
    "description": "for @example. possible multi tag.",
    "lineNumber": 239,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@see",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@see",
    "access": null,
    "description": "for @see. possible multi tag.",
    "lineNumber": 251,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_lineNumber",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_lineNumber",
    "access": null,
    "description": "for @_lineNumber, does not need to use this tag",
    "lineNumber": 263,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@deprecated",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@deprecated",
    "access": null,
    "description": "for @deprecated",
    "lineNumber": 277,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@experimental",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@experimental",
    "access": null,
    "description": "for @experimental",
    "lineNumber": 289,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@since",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@since",
    "access": null,
    "description": "for @since",
    "lineNumber": 301,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@version",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@version",
    "access": null,
    "description": "for @version",
    "lineNumber": 309,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@todo",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@todo",
    "access": null,
    "description": "for @todo. possible multi tag.",
    "lineNumber": 317,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@ignore",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@ignore",
    "access": null,
    "description": "for @ignore.",
    "lineNumber": 328,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_pseudoExport",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_pseudoExport",
    "access": null,
    "description": "for @_pseudoExport, does not need to use this tag.",
    "lineNumber": 336,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_undocument",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_undocument",
    "access": null,
    "description": "for @_undocument, does not need to use this tag",
    "lineNumber": 349,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_unknown",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_unknown",
    "access": null,
    "description": "for @_unknown, does not need to use this tag",
    "lineNumber": 357,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@param",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@param",
    "access": null,
    "description": "for @param.",
    "lineNumber": 367,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@return",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@return",
    "access": null,
    "description": "for @return, @returns.",
    "lineNumber": 380,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@property",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@property",
    "access": null,
    "description": "for @property.",
    "lineNumber": 390,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@type",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@type",
    "access": null,
    "description": "for @type.",
    "lineNumber": 403,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@abstract",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@abstract",
    "access": null,
    "description": "for @abstract.",
    "lineNumber": 413,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@override",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@override",
    "access": null,
    "description": "for @voerride.",
    "lineNumber": 421,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@throws",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@throws",
    "access": null,
    "description": "for @throws.",
    "lineNumber": 429,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@emits",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@emits",
    "access": null,
    "description": "for @emits.",
    "lineNumber": 445,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@listens",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@listens",
    "access": null,
    "description": "for @listens.",
    "lineNumber": 461,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_member",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_member",
    "access": null,
    "description": "for @_member.",
    "lineNumber": 477,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_content",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_content",
    "access": null,
    "description": "for @_content, does not need to use this tag",
    "lineNumber": 487,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_generator",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#@_generator",
    "access": null,
    "description": "for @_generator, does not need to use this tag",
    "lineNumber": 495,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findAll",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_findAll",
    "access": "private",
    "description": "find all tags.",
    "lineNumber": 508,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tag[]|null} found tags."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "tag names."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag[]",
        "null"
      ],
      "spread": false,
      "description": "found tags."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_find",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_find",
    "access": "private",
    "description": "find last tag.",
    "lineNumber": 527,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tag|null} found tag."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "tag names."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag",
        "null"
      ],
      "spread": false,
      "description": "found tag."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findAllTagValues",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_findAllTagValues",
    "access": "private",
    "description": "find all tag values.",
    "lineNumber": 542,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]|null} found values."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "tag names."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]",
        "null"
      ],
      "spread": false,
      "description": "found values."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findTagValue",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_findTagValue",
    "access": "private",
    "description": "find ta value.",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|null} found value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "tag names."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "null"
      ],
      "spread": false,
      "description": "found value."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveLongname",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_resolveLongname",
    "access": "private",
    "description": "resolve long name.\nif the name relates import path, consider import path.",
    "lineNumber": 576,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} resolved name."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "resolved name."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_flattenMemberExpression",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_flattenMemberExpression",
    "access": "private",
    "description": "flatten member expression property name.\nif node structure is [foo [bar [baz [this] ] ] ], flatten is ``this.baz.bar.foo``",
    "lineNumber": 597,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} flatten property."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target member expression node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "flatten property."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findClassLongname",
    "memberof": "src/Doc/AbstractDoc.js~AbstractDoc",
    "longname": "src/Doc/AbstractDoc.js~AbstractDoc#_findClassLongname",
    "access": "private",
    "description": "find class in same file, import or external.",
    "lineNumber": 623,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} found class long name."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "target class name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "found class long name."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/AssignmentDoc.js",
    "memberof": null,
    "longname": "src/Doc/AssignmentDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from 'color-logger';\nimport AbstractDoc from './AbstractDoc.js';\n\n/**\n * Doc Class for Assignment AST node.\n */\nexport default class AssignmentDoc extends AbstractDoc {\n  /**\n   * specify ``variable`` to kind.\n   */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n\n    this._value.kind = 'variable';\n  }\n\n  /**\n   * take out self name from self node.\n   */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n\n    let name = this._flattenMemberExpression(this._node.left).replace(/^this\\./, '');\n    this._value.name = name;\n  }\n\n  /**\n   * take out self memberof from file path.\n   */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n    this._value.memberof = this._pathResolver.filePath;\n  }\n}\n\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AssignmentDoc",
    "memberof": "src/Doc/AssignmentDoc.js",
    "longname": "src/Doc/AssignmentDoc.js~AssignmentDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/AssignmentDoc.js",
    "importStyle": "AssignmentDoc",
    "description": "Doc Class for Assignment AST node.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/AssignmentDoc.js~AssignmentDoc",
    "longname": "src/Doc/AssignmentDoc.js~AssignmentDoc#@_kind",
    "access": null,
    "description": "specify ``variable`` to kind.",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/AssignmentDoc.js~AssignmentDoc",
    "longname": "src/Doc/AssignmentDoc.js~AssignmentDoc#@_name",
    "access": null,
    "description": "take out self name from self node.",
    "lineNumber": 21,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/AssignmentDoc.js~AssignmentDoc",
    "longname": "src/Doc/AssignmentDoc.js~AssignmentDoc#@_memberof",
    "access": null,
    "description": "take out self memberof from file path.",
    "lineNumber": 32,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/ClassDoc.js",
    "memberof": null,
    "longname": "src/Doc/ClassDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs-extra';\nimport AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\nimport NamingUtil from '../Util/NamingUtil.js';\n\n/**\n * Doc Class from Class Declaration AST node.\n */\nexport default class ClassDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    this['@interface']();\n    this['@extends']();\n    this['@implements']();\n  }\n\n  /** specify ``class`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'class';\n  }\n\n  /** take out self name from self node */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n\n    if (this._node.id) {\n      this._value.name = this._node.id.name;\n    } else {\n      this._value.name = NamingUtil.filePathToName(this._pathResolver.filePath);\n    }\n  }\n\n  /** take out self memberof from file path. */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n    this._value.memberof = this._pathResolver.filePath;\n  }\n\n  /** for @interface */\n  ['@interface']() {\n    let tag = this._find(['@interface']);\n    if (tag) {\n      this._value.interface = ['', 'true', true].includes(tag.tagValue);\n    } else {\n      this._value.interface = false;\n    }\n  }\n\n  /** for @extends, does not need to use this tag. */\n  ['@extends']() {\n    let values = this._findAllTagValues(['@extends', '@extend']);\n    if (values) {\n      this._value.extends = [];\n      for (let value of values) {\n        let {typeText} = ParamParser.parseParamValue(value, true, false, false);\n        this._value.extends.push(typeText);\n      }\n      return;\n    }\n\n    if (this._node.superClass) {\n      let node = this._node;\n      let longnames = [];\n      let targets = [];\n\n      if (node.superClass.type === 'CallExpression') {\n        targets.push(node.superClass.callee, ...node.superClass.arguments);\n      } else {\n        targets.push(node.superClass);\n      }\n\n      for (let target of targets) {\n        switch (target.type) {\n          case 'Identifier':\n            longnames.push(this._resolveLongname(target.name));\n            break;\n          case 'MemberExpression':\n            let fullIdentifier = this._flattenMemberExpression(target);\n            let rootIdentifier = fullIdentifier.split('.')[0];\n            let rootLongname = this._resolveLongname(rootIdentifier);\n            let filePath = rootLongname.replace(/~.*/, '');\n            longnames.push(`${filePath}~${fullIdentifier}`);\n            break;\n        }\n      }\n\n      if (node.superClass.type === 'CallExpression') {\n        // expression extends may have non-class, so filter only class by name rule.\n        longnames = longnames.filter((v)=> v.match(/^[A-Z]|^[$_][A-Z]/));\n\n        let filePath = this._pathResolver.fileFullPath;\n        let line = node.superClass.loc.start.line;\n        let start = node.superClass.loc.start.column;\n        let end = node.superClass.loc.end.column;\n        this._value.expressionExtends = this._readSelection(filePath, line, start, end);\n      }\n\n      if (longnames.length) this._value.extends = longnames;\n    }\n  }\n\n  /** for @implements */\n  ['@implements'](){\n    let values = this._findAllTagValues(['@implements', '@implement']);\n    if (!values) return;\n\n    this._value.implements = [];\n    for (let value of values) {\n      let {typeText} = ParamParser.parseParamValue(value, true, false, false);\n      this._value.implements.push(typeText);\n    }\n  }\n\n  /**\n   * read selection text in file.\n   * @param {string} filePath - target file full path.\n   * @param {number} line - line number (one origin).\n   * @param {number} startColumn - start column number (one origin).\n   * @param {number} endColumn - end column number (one origin).\n   * @returns {string} selection text\n   * @private\n   */\n  _readSelection(filePath, line, startColumn, endColumn) {\n    let code = fs.readFileSync(filePath).toString();\n    let lines = code.split('\\n');\n    let selectionLine = lines[line - 1];\n    let tmp = [];\n    for (let i = startColumn; i < endColumn; i++) {\n      tmp.push(selectionLine.charAt(i));\n    }\n    return tmp.join('');\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ClassDoc",
    "memberof": "src/Doc/ClassDoc.js",
    "longname": "src/Doc/ClassDoc.js~ClassDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/ClassDoc.js",
    "importStyle": "ClassDoc",
    "description": "Doc Class from Class Declaration AST node.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 14,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@_kind",
    "access": null,
    "description": "specify ``class`` to kind.",
    "lineNumber": 23,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@_name",
    "access": null,
    "description": "take out self name from self node",
    "lineNumber": 30,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@_memberof",
    "access": null,
    "description": "take out self memberof from file path.",
    "lineNumber": 42,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@interface",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@interface",
    "access": null,
    "description": "for @interface",
    "lineNumber": 49,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@extends",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@extends",
    "access": null,
    "description": "for @extends, does not need to use this tag.",
    "lineNumber": 59,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@implements",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#@implements",
    "access": null,
    "description": "for @implements",
    "lineNumber": 112,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_readSelection",
    "memberof": "src/Doc/ClassDoc.js~ClassDoc",
    "longname": "src/Doc/ClassDoc.js~ClassDoc#_readSelection",
    "access": "private",
    "description": "read selection text in file.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} selection text"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "target file full path."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "line",
        "description": "line number (one origin)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startColumn",
        "description": "start column number (one origin)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endColumn",
        "description": "end column number (one origin)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "selection text"
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/ExternalDoc.js",
    "memberof": null,
    "longname": "src/Doc/ExternalDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from 'color-logger';\nimport AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\n\nlet logger = new Logger('ExternalDoc');\n\n/**\n * Doc Class from virtual comment node of external.\n */\nexport default class ExternalDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** specify ``external`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'external';\n  }\n\n  /** take out self name from tag */\n  ['@_name']() {\n    let value = this._findTagValue(['@_name', '@external']);\n    if (!value) {\n      logger.w(`can not resolve name.`);\n    }\n\n    this._value.name = value;\n\n    let tags = this._findAll(['@_name', '@external']);\n    if (!tags) {\n      logger.w(`can not resolve name.`);\n      return;\n    }\n\n    let name;\n    for (let tag of tags) {\n      let {tagName, tagValue} = tag;\n      if (tagName === '@_name') {\n        name = tagValue;\n      } else if (tagName === '@external') {\n        let {typeText, paramDesc} = ParamParser.parseParamValue(tagValue, true, false, true);\n        name = typeText;\n        this._value.externalLink = paramDesc;\n      }\n    }\n\n    this._value.name = name;\n  }\n\n  /** take out self memberof from file path. */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n    this._value.memberof = this._pathResolver.filePath;\n  }\n\n  /** specify name to longname */\n  ['@_longname']() {\n    super['@_longname']();\n    if (this._value.longname) return;\n    this._value.longname = this._value.name;\n  }\n\n  /** for @external */\n  ['@external']() {\n    // avoid unknown tag.\n  }\n}\n\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "src/Doc/ExternalDoc.js",
    "longname": "src/Doc/ExternalDoc.js~logger",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Doc/ExternalDoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "color-logger~Logger"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ExternalDoc",
    "memberof": "src/Doc/ExternalDoc.js",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/ExternalDoc.js",
    "importStyle": "ExternalDoc",
    "description": "Doc Class from virtual comment node of external.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 15,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#@_kind",
    "access": null,
    "description": "specify ``external`` to kind.",
    "lineNumber": 24,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#@_name",
    "access": null,
    "description": "take out self name from tag",
    "lineNumber": 31,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#@_memberof",
    "access": null,
    "description": "take out self memberof from file path.",
    "lineNumber": 61,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_longname",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#@_longname",
    "access": null,
    "description": "specify name to longname",
    "lineNumber": 68,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@external",
    "memberof": "src/Doc/ExternalDoc.js~ExternalDoc",
    "longname": "src/Doc/ExternalDoc.js~ExternalDoc#@external",
    "access": null,
    "description": "for @external",
    "lineNumber": 75,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/FileDoc.js",
    "memberof": null,
    "longname": "src/Doc/FileDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport AbstractDoc from './AbstractDoc.js';\n\n/**\n * Doc Class from source file.\n */\nexport default class FileDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** specify ``file`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'file';\n  }\n\n  /** take out self name from file path */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n    this._value.name = this._pathResolver.filePath;\n  }\n\n  /** specify name to longname */\n  ['@_longname']() {\n    let value = this._findTagValue(['@_longname']);\n    if (value) {\n      this._value.longname = value;\n    } else {\n      this._value.longname = this._value.name;\n    }\n  }\n\n  /** specify file content to value.content */\n  ['@_content']() {\n    super['@_content']();\n    if ('content' in this._value) return;\n\n    let filePath = this._pathResolver.fileFullPath;\n    let content = fs.readFileSync(filePath, {encode: 'utf8'}).toString();\n    this._value.content = content;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FileDoc",
    "memberof": "src/Doc/FileDoc.js",
    "longname": "src/Doc/FileDoc.js~FileDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/FileDoc.js",
    "importStyle": "FileDoc",
    "description": "Doc Class from source file.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/FileDoc.js~FileDoc",
    "longname": "src/Doc/FileDoc.js~FileDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 12,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/FileDoc.js~FileDoc",
    "longname": "src/Doc/FileDoc.js~FileDoc#@_kind",
    "access": null,
    "description": "specify ``file`` to kind.",
    "lineNumber": 21,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/FileDoc.js~FileDoc",
    "longname": "src/Doc/FileDoc.js~FileDoc#@_name",
    "access": null,
    "description": "take out self name from file path",
    "lineNumber": 28,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_longname",
    "memberof": "src/Doc/FileDoc.js~FileDoc",
    "longname": "src/Doc/FileDoc.js~FileDoc#@_longname",
    "access": null,
    "description": "specify name to longname",
    "lineNumber": 35,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_content",
    "memberof": "src/Doc/FileDoc.js~FileDoc",
    "longname": "src/Doc/FileDoc.js~FileDoc#@_content",
    "access": null,
    "description": "specify file content to value.content",
    "lineNumber": 45,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/FunctionDoc.js",
    "memberof": null,
    "longname": "src/Doc/FunctionDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\nimport NamingUtil from '../Util/NamingUtil.js';\n\n/**\n * Doc Class from Function declaration AST node.\n */\nexport default class FunctionDoc extends AbstractDoc {\n  /** specify ``function`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'function';\n  }\n\n  /** take out self name from self node */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n\n    if (this._node.id) {\n      this._value.name = this._node.id.name;\n    } else {\n      this._value.name = NamingUtil.filePathToName(this._pathResolver.filePath);\n    }\n  }\n\n  /** take out self name from file path */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n    this._value.memberof = this._pathResolver.filePath;\n  }\n\n  /** check generator property in self node */\n  ['@_generator']() {\n    super['@_generator']();\n    if ('generator' in this._value) return;\n\n    this._value.generator = this._node.generator;\n  }\n\n  /** if @param is not exists, guess type of param by using self node. */\n  ['@param']() {\n    super['@param']();\n    if (this._value.params) return;\n\n    this._value.params = ParamParser.guessParams(this._node.params);\n  }\n\n  /** if @return is not exists, guess type of return by using self node. */\n  ['@return']() {\n    super['@return']();\n    if (this._value.return) return;\n\n    let result = ParamParser.guessReturnParam(this._node.body);\n    if (result) {\n      this._value.return = result;\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FunctionDoc",
    "memberof": "src/Doc/FunctionDoc.js",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/FunctionDoc.js",
    "importStyle": "FunctionDoc",
    "description": "Doc Class from Function declaration AST node.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@_kind",
    "access": null,
    "description": "specify ``function`` to kind.",
    "lineNumber": 10,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@_name",
    "access": null,
    "description": "take out self name from self node",
    "lineNumber": 17,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@_memberof",
    "access": null,
    "description": "take out self name from file path",
    "lineNumber": 29,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_generator",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@_generator",
    "access": null,
    "description": "check generator property in self node",
    "lineNumber": 36,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@param",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@param",
    "access": null,
    "description": "if @param is not exists, guess type of param by using self node.",
    "lineNumber": 44,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@return",
    "memberof": "src/Doc/FunctionDoc.js~FunctionDoc",
    "longname": "src/Doc/FunctionDoc.js~FunctionDoc#@return",
    "access": null,
    "description": "if @return is not exists, guess type of return by using self node.",
    "lineNumber": 52,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/MemberDoc.js",
    "memberof": null,
    "longname": "src/Doc/MemberDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractDoc from './AbstractDoc.js';\nimport MethodDoc from './MethodDoc.js';\nimport ParamParser from '../Parser/ParamParser.js'\n\n/**\n * Doc Class from Member Expression AST node.\n */\nexport default class MemberDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** specify ``member`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'member';\n  }\n\n  /** use static property in class */\n  ['@_static']() {\n    let tag = this._find(['@_static']);\n    if (tag) {\n      let value = ['', 'true', true].includes(tag.tagValue);\n      this._value.static = value;\n      return;\n    }\n\n    let parent = this._node.parent;\n    while (parent) {\n      if (parent.type === 'MethodDefinition') {\n        this._value.static = parent.static;\n        break;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  /** take out self name from self node */\n  ['@_name']() {\n    let name;\n    let tags = this._findAll(['@_name', '@_member']);\n    if (tags) {\n      for (let tag of tags) {\n        let {tagName, tagValue} = tag;\n        if (tagName === '@_name') {\n          name = tagValue;\n        } else if (tagName === '@_member') {\n          let {paramName} = ParamParser.parseParamValue(value, true, true, false);\n          name = paramName;\n        }\n      }\n\n    } else {\n      let node = this._node;\n      name = this._flattenMemberExpression(node.left).replace(/^this\\./, '');\n    }\n\n    this._value.name = name;\n  }\n\n  /** borrow {@link MethodDoc#@_memberof} */\n  ['@_memberof']() {\n    MethodDoc.prototype['@_memberof'].call(this);\n  }\n\n  /** if @type is not exists, guess type by using self node */\n  ['@type']() {\n    super['@type']();\n    if (this._value.type) return;\n\n    this._value.type = ParamParser.guessType(this._node.right);\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MemberDoc",
    "memberof": "src/Doc/MemberDoc.js",
    "longname": "src/Doc/MemberDoc.js~MemberDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/MemberDoc.js",
    "importStyle": "MemberDoc",
    "description": "Doc Class from Member Expression AST node.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#@_kind",
    "access": null,
    "description": "specify ``member`` to kind.",
    "lineNumber": 22,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_static",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#@_static",
    "access": null,
    "description": "use static property in class",
    "lineNumber": 29,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#@_name",
    "access": null,
    "description": "take out self name from self node",
    "lineNumber": 48,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#@_memberof",
    "access": null,
    "description": "borrow {@link MethodDoc#@_memberof}",
    "lineNumber": 71,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@type",
    "memberof": "src/Doc/MemberDoc.js~MemberDoc",
    "longname": "src/Doc/MemberDoc.js~MemberDoc#@type",
    "access": null,
    "description": "if @type is not exists, guess type by using self node",
    "lineNumber": 76,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/MethodDoc.js",
    "memberof": null,
    "longname": "src/Doc/MethodDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\n\n/**\n * Doc Class from Method Definition AST node.\n */\nexport default class MethodDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** use kind property of self node. */\n  ['@_kind']() {\n    AbstractDoc.prototype['@_kind'].call(this);\n    if (this._value.kind) return;\n    this._value.kind = this._node.kind;\n  }\n\n  /** take out self name from self node */\n  ['@_name']() {\n    AbstractDoc.prototype['@_name'].call(this);\n    if (this._value.name) return;\n\n    // normally `key.name`, but computed value(aka ['foo']) refers `key.value`.\n    this._value.name = this._node.key.name || this._node.key.value;\n  }\n\n  /** take out memberof from parent class node */\n  ['@_memberof']() {\n    AbstractDoc.prototype['@_memberof'].call(this);\n    if (this._value.memberof) return;\n\n    let memberof;\n    let parent = this._node.parent;\n    while (parent) {\n      if (parent.type === 'ClassDeclaration' || parent.type === 'ClassExpression') {\n        memberof = `${this._pathResolver.filePath}~${parent.doc.value.name}`;\n        this._value.memberof = memberof;\n        return;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  /** if @param is not exists, guess type of param by using self node. but ``get`` and ``set`` are not guessed. */\n  ['@param']() {\n    super['@param']();\n    if (this._value.params) return;\n\n    if (['set', 'get'].includes(this._value.kind)) return;\n\n    this._value.params = ParamParser.guessParams(this._node.value.params);\n  }\n\n  /** if @type is not exists, guess type by using self node. only ``get`` and ``set`` are guess. */\n  ['@type']() {\n    super['@type']();\n    if (this._value.type) return;\n\n    switch (this._value.kind) {\n      case 'set':\n        this._value.type = ParamParser.guessType(this._node.right);\n        break;\n      case 'get':\n        let result = ParamParser.guessReturnParam(this._node.value.body);\n        if (result) this._value.type = result;\n        break;\n    }\n  }\n\n  /** if @return is not exists, guess type of return by usigin self node. but ``constructor``, ``get`` and ``set``are not guessed. */\n  ['@return']() {\n    super['@return']();\n    if (this._value.return) return;\n\n    if (['constructor', 'set', 'get'].includes(this._value.kind)) return;\n\n    let result = ParamParser.guessReturnParam(this._node.value.body);\n    if (result) {\n      this._value.return = result;\n    }\n  }\n\n  /** use generator property of self node. */\n  ['@_generator']() {\n    super['@_generator']();\n    if ('generator' in this._value) return;\n\n    this._value.generator = this._node.value.generator;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "MethodDoc",
    "memberof": "src/Doc/MethodDoc.js",
    "longname": "src/Doc/MethodDoc.js~MethodDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/MethodDoc.js",
    "importStyle": "MethodDoc",
    "description": "Doc Class from Method Definition AST node.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 12,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@_kind",
    "access": null,
    "description": "use kind property of self node.",
    "lineNumber": 21,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@_name",
    "access": null,
    "description": "take out self name from self node",
    "lineNumber": 28,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@_memberof",
    "access": null,
    "description": "take out memberof from parent class node",
    "lineNumber": 37,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@param",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@param",
    "access": null,
    "description": "if @param is not exists, guess type of param by using self node. but ``get`` and ``set`` are not guessed.",
    "lineNumber": 54,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@type",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@type",
    "access": null,
    "description": "if @type is not exists, guess type by using self node. only ``get`` and ``set`` are guess.",
    "lineNumber": 64,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@return",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@return",
    "access": null,
    "description": "if @return is not exists, guess type of return by usigin self node. but ``constructor``, ``get`` and ``set``are not guessed.",
    "lineNumber": 80,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_generator",
    "memberof": "src/Doc/MethodDoc.js~MethodDoc",
    "longname": "src/Doc/MethodDoc.js~MethodDoc#@_generator",
    "access": null,
    "description": "use generator property of self node.",
    "lineNumber": 93,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/TestDoc.js",
    "memberof": null,
    "longname": "src/Doc/TestDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\n\n/**\n * Doc Class from test code file.\n */\nexport default class TestDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    this['@testTarget']();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** use name property of self node. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n\n    switch (this._node.callee.name) {\n      case 'suite': //fall\n      case 'context': // fall\n      case 'describe':\n        this._value.kind = 'testDescribe';\n        break;\n      case 'test': // fall\n      case 'it':\n        this._value.kind = 'testIt';\n        break;\n      default:\n        throw new Error(`unknown name. node.callee.name = ${this._node.callee.name}`);\n    }\n  }\n\n  /** set name and testId from special esdoc property. */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n\n    this._value.name = this._node._esdocTestName;\n    this._value.testId = this._node._esdocTestId;\n  }\n\n  /** set memberof to use parent test nod and file path. */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n\n    let chain = [];\n    let parent = this._node.parent;\n    while (parent) {\n      if (parent._esdocTestName) chain.push(parent._esdocTestName);\n      parent = parent.parent;\n    }\n\n    let filePath = this._pathResolver.filePath;\n\n    if (chain.length) {\n      this._value.memberof = `${filePath}~${chain.reverse().join('.')}`;\n      this._value.testDepth = chain.length;\n    } else {\n      this._value.memberof = filePath;\n      this._value.testDepth = 0;\n    }\n  }\n\n  /** set describe by using test node arguments. */\n  ['@desc']() {\n    super['@desc']();\n    if (this._value.description) return;\n\n    this._value.description = this._node.arguments[0].value;\n  }\n\n  /** for @testTarget. */\n  ['@testTarget']() {\n    let values = this._findAllTagValues(['@test', '@testTarget']);\n    if (!values) return;\n\n    this._value.testTargets = [];\n    for (let value of values) {\n      let {typeText} = ParamParser.parseParamValue(value, true, false, false);\n      this._value.testTargets.push(typeText);\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TestDoc",
    "memberof": "src/Doc/TestDoc.js",
    "longname": "src/Doc/TestDoc.js~TestDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/TestDoc.js",
    "importStyle": "TestDoc",
    "description": "Doc Class from test code file.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 12,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#@_kind",
    "access": null,
    "description": "use name property of self node.",
    "lineNumber": 23,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#@_name",
    "access": null,
    "description": "set name and testId from special esdoc property.",
    "lineNumber": 43,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#@_memberof",
    "access": null,
    "description": "set memberof to use parent test nod and file path.",
    "lineNumber": 52,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@desc",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#@desc",
    "access": null,
    "description": "set describe by using test node arguments.",
    "lineNumber": 75,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@testTarget",
    "memberof": "src/Doc/TestDoc.js~TestDoc",
    "longname": "src/Doc/TestDoc.js~TestDoc#@testTarget",
    "access": null,
    "description": "for @testTarget.",
    "lineNumber": 83,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/TestFileDoc.js",
    "memberof": null,
    "longname": "src/Doc/TestFileDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import FileDoc from './FileDoc.js';\n\n/**\n * Doc class for test code file.\n */\nexport default class TestFileDoc extends FileDoc {\n  /** set ``testFile`` to kind. */\n  ['@_kind']() {\n    this._value.kind = 'testFile';\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TestFileDoc",
    "memberof": "src/Doc/TestFileDoc.js",
    "longname": "src/Doc/TestFileDoc.js~TestFileDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/TestFileDoc.js",
    "importStyle": "TestFileDoc",
    "description": "Doc class for test code file.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/Doc/FileDoc.js~FileDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/TestFileDoc.js~TestFileDoc",
    "longname": "src/Doc/TestFileDoc.js~TestFileDoc#@_kind",
    "access": null,
    "description": "set ``testFile`` to kind.",
    "lineNumber": 8,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/TypedefDoc.js",
    "memberof": null,
    "longname": "src/Doc/TypedefDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from 'color-logger';\nimport AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js';\n\nlet logger = new Logger('TypedefDoc');\n\n/**\n * Doc class for virtual comment node of typedef.\n */\nexport default class TypedefDoc extends AbstractDoc {\n  /**\n   * apply own tag.\n   * @private\n   */\n  _apply() {\n    super._apply();\n\n    this['@typedef']();\n\n    delete this._value.export;\n    delete this._value.importPath;\n    delete this._value.importStyle;\n  }\n\n  /** specify ``typedef`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n    this._value.kind = 'typedef';\n  }\n\n  /** set name by using tag. */\n  ['@_name']() {\n    let tags = this._findAll(['@_name', '@typedef']);\n    if (!tags) {\n      logger.w(`can not resolve name.`);\n      return;\n    }\n\n    let name;\n    for (let tag of tags) {\n      let {tagName, tagValue} = tag;\n      if (tagName === '@_name') {\n        name = tagValue;\n      } else if (tagName === '@typedef') {\n        let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(tagValue, true, true, false);\n        name = paramName;\n      }\n    }\n\n    this._value.name = name;\n  }\n\n  /** set memberof by using file path. */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n\n    let memberof;\n    let parent = this._node.parent;\n    while (parent) {\n      if (parent.type === 'ClassDeclaration') {\n        memberof = `${this._pathResolver.filePath}~${parent.id.name}`;\n        this._value.memberof = memberof;\n        return;\n      }\n      parent = parent.parent;\n    }\n\n    this._value.memberof = this._pathResolver.filePath;\n  }\n\n  /** for @typedef */\n  ['@typedef']() {\n    let value = this._findTagValue(['@typedef']);\n    if (!value) return;\n\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value, true, true, false);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n\n    delete result.description;\n    delete result.nullable;\n    delete result.spread;\n\n    this._value.type = result;\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "src/Doc/TypedefDoc.js",
    "longname": "src/Doc/TypedefDoc.js~logger",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Doc/TypedefDoc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "color-logger~Logger"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TypedefDoc",
    "memberof": "src/Doc/TypedefDoc.js",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/TypedefDoc.js",
    "importStyle": "TypedefDoc",
    "description": "Doc class for virtual comment node of typedef.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_apply",
    "memberof": "src/Doc/TypedefDoc.js~TypedefDoc",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc#_apply",
    "access": "private",
    "description": "apply own tag.",
    "lineNumber": 15,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/TypedefDoc.js~TypedefDoc",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc#@_kind",
    "access": null,
    "description": "specify ``typedef`` to kind.",
    "lineNumber": 26,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/TypedefDoc.js~TypedefDoc",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc#@_name",
    "access": null,
    "description": "set name by using tag.",
    "lineNumber": 33,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/TypedefDoc.js~TypedefDoc",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc#@_memberof",
    "access": null,
    "description": "set memberof by using file path.",
    "lineNumber": 55,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@typedef",
    "memberof": "src/Doc/TypedefDoc.js~TypedefDoc",
    "longname": "src/Doc/TypedefDoc.js~TypedefDoc#@typedef",
    "access": null,
    "description": "for @typedef",
    "lineNumber": 74,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Doc/VariableDoc.js",
    "memberof": null,
    "longname": "src/Doc/VariableDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import AbstractDoc from './AbstractDoc.js';\nimport ParamParser from '../Parser/ParamParser.js'\nimport ASTUtil from '../Util/ASTUtil.js';\n\n/**\n * Doc Class from Variable Declaration AST node.\n */\nexport default class VariableDoc extends AbstractDoc {\n  /** specify ``variable`` to kind. */\n  ['@_kind']() {\n    super['@_kind']();\n    if (this._value.kind) return;\n\n    this._value.kind = 'variable';\n  }\n\n  /** set name by using self node. */\n  ['@_name']() {\n    super['@_name']();\n    if (this._value.name) return;\n\n    this._value.name = this._node.declarations[0].id.name;\n  }\n\n  /** set memberof by using file path. */\n  ['@_memberof']() {\n    super['@_memberof']();\n    if (this._value.memberof) return;\n    this._value.memberof = this._pathResolver.filePath;\n  }\n\n  /** if @type is not exists, guess type by using self node. */\n  ['@type']() {\n    super['@type']();\n    if (this._value.type) return;\n\n    if (this._node.declarations[0].init.type === 'NewExpression') {\n      let className = this._node.declarations[0].init.callee.name;\n      let longname = this._findClassLongname(className);\n      this._value.type = {types: [longname]};\n    } else {\n      this._value.type = ParamParser.guessType(this._node.declarations[0].init);\n    }\n  }\n}\n\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "VariableDoc",
    "memberof": "src/Doc/VariableDoc.js",
    "longname": "src/Doc/VariableDoc.js~VariableDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Doc/VariableDoc.js",
    "importStyle": "VariableDoc",
    "description": "Doc Class from Variable Declaration AST node.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Doc/AbstractDoc.js~AbstractDoc"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_kind",
    "memberof": "src/Doc/VariableDoc.js~VariableDoc",
    "longname": "src/Doc/VariableDoc.js~VariableDoc#@_kind",
    "access": null,
    "description": "specify ``variable`` to kind.",
    "lineNumber": 10,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_name",
    "memberof": "src/Doc/VariableDoc.js~VariableDoc",
    "longname": "src/Doc/VariableDoc.js~VariableDoc#@_name",
    "access": null,
    "description": "set name by using self node.",
    "lineNumber": 18,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@_memberof",
    "memberof": "src/Doc/VariableDoc.js~VariableDoc",
    "longname": "src/Doc/VariableDoc.js~VariableDoc#@_memberof",
    "access": null,
    "description": "set memberof by using file path.",
    "lineNumber": 26,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "@type",
    "memberof": "src/Doc/VariableDoc.js~VariableDoc",
    "longname": "src/Doc/VariableDoc.js~VariableDoc#@type",
    "access": null,
    "description": "if @type is not exists, guess type by using self node.",
    "lineNumber": 33,
    "params": [],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ESDoc.js",
    "memberof": null,
    "longname": "src/ESDoc.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import es6shim from 'core-js/shim';\nimport fs from 'fs';\nimport path from 'path';\nimport assert from 'assert';\nimport Logger from 'color-logger';\nimport ASTUtil from './Util/ASTUtil.js';\nimport ESParser from './Parser/ESParser';\nimport PathResolver from './Util/PathResolver.js';\nimport DocFactory from './Factory/DocFactory.js';\nimport TestDocFactory from './Factory/TestDocFactory.js';\nimport InvalidCodeLogger from './Util/InvalidCodeLogger.js';\n\nlet logger = new Logger('ESDoc');\n\n/**\n * API Documentation Generator.\n *\n * @example\n * let config = {source: './src', destination: './esdoc'};\n * ESDoc.generate(config, (results, config)=>{\n *   console.log(results);\n * });\n */\nexport default class ESDoc {\n  /**\n   * Generate documentation.\n   * @param {ESDocConfig} config - config for generation.\n   * @param {function(results: Object[], asts: Object[], config: ESDocConfig)} publisher - callback for output html.\n   */\n  static generate(config, publisher) {\n    assert(typeof publisher === 'function');\n    assert(config.source);\n    assert(config.destination);\n\n    this._setDefaultConfig(config);\n\n    Logger.debug = !!config.debug;\n    let includes = config.includes.map((v) => new RegExp(v));\n    let excludes = config.excludes.map((v) => new RegExp(v));\n    let pathPrefix = config.importPathPrefix;\n\n    let packageName = null;\n    let mainFilePath = null;\n    if (config.package) {\n      try {\n        let packageJSON = fs.readFileSync(config.package, {encode: 'utf8'});\n        let packageConfig = JSON.parse(packageJSON);\n        packageName = packageConfig.name;\n        mainFilePath = packageConfig.main;\n      } catch (e) {\n        // ignore\n      }\n    }\n\n    let results = [];\n    let asts = [];\n\n    this._walk(config.source, (filePath)=>{\n      let match = false;\n      for (let reg of includes) {\n        if (filePath.match(reg)) {\n          match = true;\n          break;\n        }\n      }\n      if (!match) return;\n\n      for (let reg of excludes) {\n        if (filePath.match(reg)) return;\n      }\n\n      let temp = this._traverse(config.source, filePath, packageName, mainFilePath, pathPrefix);\n      if (!temp) return;\n      results.push(...temp.results);\n\n      let relativeFilePath = path.relative(path.dirname(config.source), filePath);\n      asts.push({filePath: 'source' + path.sep + relativeFilePath, ast: temp.ast});\n    });\n\n    if (config.builtinExternal) {\n      this._useBuiltinExternal(results);\n    }\n\n    if (config.test) {\n      this._generateForTest(config, results, asts);\n    }\n\n    publisher(results, asts, config);\n  }\n\n  /**\n   * Generate document from test code.\n   * @param {ESDocConfig} config - config for generating.\n   * @param {DocObject[]} results - push DocObject to this.\n   * @param {AST[]} asts - push ast to this.\n   * @private\n   */\n  static _generateForTest(config, results, asts) {\n    let includes = config.test.includes.map((v) => new RegExp(v));\n    let excludes = config.test.excludes.map((v) => new RegExp(v));\n\n    this._walk(config.test.source, (filePath)=>{\n      let match = false;\n      for (let reg of includes) {\n        if (filePath.match(reg)) {\n          match = true;\n          break;\n        }\n      }\n      if (!match) return;\n\n      for (let reg of excludes) {\n        if (filePath.match(reg)) return;\n      }\n\n      let temp = this._traverseForTest(config.test.type, config.test.source, filePath);\n      if (!temp) return;\n      results.push(...temp.results);\n\n      let relativeFilePath = path.relative(path.dirname(config.test.source), filePath);\n      asts.push({filePath: 'test' + path.sep + relativeFilePath, ast: temp.ast});\n    });\n  }\n\n  /**\n   * set default config to specified config.\n   * @param {ESDocConfig} config - specified config.\n   * @private\n   */\n  static _setDefaultConfig(config) {\n    if (!config.includes) config.includes = ['\\\\.(js|es6)$'];\n\n    if (!config.excludes) config.excludes = ['\\\\.config\\\\.(js|es6)$'];\n\n    if (!config.access) config.access = ['public', 'protected'];\n\n    if (!('autoPrivate' in config)) config.autoPrivate = true;\n\n    if (!('unexportIdentifier' in config)) config.unexportIdentifier = false;\n\n    if (!('builtinExternal' in config)) config.builtinExternal = true;\n\n    if (!('undocumentIdentifier' in config)) config.undocumentIdentifier = true;\n\n    if (!('coverage' in config)) config.coverage = true;\n\n    if (!config.index) config.index = './README.md';\n\n    if (!config.package) config.package = './package.json';\n\n    if (!config.importPathPrefix) config.importPathPrefix = '';\n\n    if (!config.styles) config.styles = [];\n\n    if (!config.scripts) config.scripts = [];\n\n    if (config.test) {\n      assert(config.test.type);\n      assert(config.test.source);\n      if (!config.test.includes) config.test.includes = ['(spec|Spec|test|Test)\\\\.(js|es6)$'];\n      if (!config.test.excludes) config.test.excludes = ['\\\\.config\\\\.(js|es6)$'];\n    }\n  }\n\n  /**\n   * Use built-in external document.\n   * built-in external has number, string, boolean, etc...\n   * @param {DocObject[]} results - this method pushes DocObject to this param.\n   * @private\n   * @see {@link src/BuiltinExternal/ECMAScriptExternal.js}\n   */\n  static _useBuiltinExternal(results) {\n    let dirPath = path.resolve(__dirname, './BuiltinExternal/');\n    this._walk(dirPath, (filePath)=>{\n      let temp = this._traverse(dirPath, filePath);\n      temp.results.forEach((v)=> v.builtinExternal = true);\n      let res = temp.results.filter(v => v.kind === 'external');\n      results.push(...res);\n    });\n  }\n\n  /**\n   * walk recursive in directory.\n   * @param {string} dirPath - target directory path.\n   * @param {function(entryPath: string)} callback - callback for find file.\n   * @private\n   */\n  static _walk(dirPath, callback) {\n    let entries = fs.readdirSync(dirPath);\n\n    for (let entry of entries) {\n      let entryPath = path.resolve(dirPath, entry);\n      let stat = fs.statSync(entryPath);\n\n      if (stat.isFile()) {\n        callback(entryPath);\n      } else if (stat.isDirectory()) {\n        this._walk(entryPath, callback);\n      }\n    }\n  }\n\n  /**\n   * traverse doc comment in JavaScript file.\n   * @param {string} inDirPath - root directory path.\n   * @param {string} filePath - target JavaScript file path.\n   * @param {string} [packageName] - npm package name of target.\n   * @param {string} [mainFilePath] - npm main file path of target.\n   * @param {string} [pathPrefix] - prefix of import path from root directory.\n   * @returns {Object} - return document that is traversed.\n   * @property {DocObject[]} results - this is contained JavaScript file.\n   * @property {AST} ast - this is AST of JavaScript file.\n   * @private\n   */\n  static _traverse(inDirPath, filePath, packageName, mainFilePath, pathPrefix) {\n    logger.i(`parsing: ${filePath}`);\n    let ast;\n    try {\n      ast = ESParser.parse(filePath);\n    } catch(e) {\n      logger.w(`fail parse: ${filePath}`);\n      return null;\n    }\n\n    let pathResolver = new PathResolver(inDirPath, filePath, packageName, mainFilePath, pathPrefix);\n    let factory = new DocFactory(ast, pathResolver);\n\n    ASTUtil.traverse(ast, (node, parent)=>{\n      try {\n        factory.push(node, parent);\n      } catch(e) {\n        InvalidCodeLogger.show(filePath, node);\n        throw e;\n      }\n    });\n\n    return {results: factory.results, ast: ast};\n  }\n\n  /**\n   * traverse doc comment in test code file.\n   * @param {string} type - test code type.\n   * @param {string} inDirPath - root directory path.\n   * @param {string} filePath - target test code file path.\n   * @returns {Object} return document info that is traversed.\n   * @property {DocObject[]} results - this is contained test code.\n   * @property {AST} ast - this is AST of test code.\n   * @private\n   */\n  static _traverseForTest(type, inDirPath, filePath) {\n    let ast;\n    try {\n      ast = ESParser.parse(filePath);\n    } catch(e) {\n      logger.w(`fail parse: ${filePath}`);\n      return null;\n    }\n    let pathResolver = new PathResolver(inDirPath, filePath);\n    let factory = new TestDocFactory(type, ast, pathResolver);\n\n    ASTUtil.traverse(ast, (node, parent)=>{\n      try {\n        factory.push(node, parent);\n      } catch(e) {\n        InvalidCodeLogger.show(filePath, node);\n        throw e;\n      }\n    });\n\n    return {results: factory.results, ast: ast};\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "src/ESDoc.js",
    "longname": "src/ESDoc.js~logger",
    "access": null,
    "export": false,
    "importPath": "esdoc",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "color-logger~Logger"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ESDoc",
    "memberof": "src/ESDoc.js",
    "longname": "src/ESDoc.js~ESDoc",
    "access": null,
    "export": true,
    "importPath": "esdoc",
    "importStyle": "ESDoc",
    "description": "API Documentation Generator.",
    "examples": [
      "let config = {source: './src', destination: './esdoc'};\nESDoc.generate(config, (results, config)=>{\n  console.log(results);\n});"
    ],
    "lineNumber": 24,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "generate",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc.generate",
    "access": null,
    "description": "Generate documentation.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "config for generation."
      },
      {
        "nullable": null,
        "types": [
          "function(results: Object[], asts: Object[], config: ESDocConfig)"
        ],
        "spread": false,
        "optional": false,
        "name": "publisher",
        "description": "callback for output html."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_generateForTest",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._generateForTest",
    "access": "private",
    "description": "Generate document from test code.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "config for generating."
      },
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "push DocObject to this."
      },
      {
        "nullable": null,
        "types": [
          "AST[]"
        ],
        "spread": false,
        "optional": false,
        "name": "asts",
        "description": "push ast to this."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_setDefaultConfig",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._setDefaultConfig",
    "access": "private",
    "description": "set default config to specified config.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "specified config."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_useBuiltinExternal",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._useBuiltinExternal",
    "access": "private",
    "description": "Use built-in external document.\nbuilt-in external has number, string, boolean, etc...",
    "see": [
      "{@link src/BuiltinExternal/ECMAScriptExternal.js}"
    ],
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "this method pushes DocObject to this param."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_walk",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._walk",
    "access": "private",
    "description": "walk recursive in directory.",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "dirPath",
        "description": "target directory path."
      },
      {
        "nullable": null,
        "types": [
          "function(entryPath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for find file."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_traverse",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._traverse",
    "access": "private",
    "description": "traverse doc comment in JavaScript file.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - return document that is traversed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "inDirPath",
        "description": "root directory path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "target JavaScript file path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "packageName",
        "description": "npm package name of target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "mainFilePath",
        "description": "npm main file path of target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pathPrefix",
        "description": "prefix of import path from root directory."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "this is contained JavaScript file."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "this is AST of JavaScript file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "return document that is traversed."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_traverseForTest",
    "memberof": "src/ESDoc.js~ESDoc",
    "longname": "src/ESDoc.js~ESDoc._traverseForTest",
    "access": "private",
    "description": "traverse doc comment in test code file.",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} return document info that is traversed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "test code type."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "inDirPath",
        "description": "root directory path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "target test code file path."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "this is contained test code."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "this is AST of test code."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "return document info that is traversed."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ESDocCLI.js",
    "memberof": null,
    "longname": "src/ESDocCLI.js",
    "access": null,
    "description": null,
    "lineNumber": 2,
    "content": "#!/usr/bin/env node\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport minimist from 'minimist';\nimport ESDoc from './ESDoc.js';\nimport defaultPublisher from './Publisher/publish.js';\nimport NPMUtil from './Util/NPMUtil.js';\n\n/**\n * Command Line Interface for ESDoc.\n *\n * @example\n * let cli = new ESDocCLI(process.argv);\n * cli.exec();\n */\nexport default class ESDocCLI {\n  /**\n   * Create instance.\n   * @param {Object} argv - this is node.js argv(``process.argv``)\n   */\n  constructor(argv) {\n    /** @type {ESDocCLIArgv} */\n    this._argv = minimist(argv.slice(2));\n\n    if (this._argv.h || this._argv.help) {\n      this._showHelp();\n      process.exit(0)\n    }\n\n    if (this._argv.v || this._argv.version) {\n      this._showVersion();\n      process.exit(0)\n    }\n  }\n\n  /**\n   * execute to generate document.\n   */\n  exec() {\n    let config;\n    if (this._argv.c) {\n      config = this._createConfigFromJSONFile(this._argv.c);\n    } else {\n      this._showHelp();\n      process.exit(1);\n    }\n\n    ESDoc.generate(config, defaultPublisher);\n  }\n\n  /**\n   * show help of ESDoc\n   * @private\n   */\n  _showHelp() {\n    console.log('usage: esdoc [-c esdoc.json]');\n  }\n\n  /**\n   * show version of ESDoc\n   * @private\n   */\n  _showVersion() {\n    let packageObj = NPMUtil.findPackage();\n    if (packageObj) {\n      console.log(packageObj.version);\n    } else {\n      console.log('0.0.0');\n    }\n  }\n\n  /**\n   * create config object from config file.\n   * @param {string} configFilePath - config file path.\n   * @return {ESDocConfig} config object.\n   * @private\n   */\n  _createConfigFromJSONFile(configFilePath) {\n    configFilePath = path.resolve(configFilePath);\n    let configJSON = fs.readFileSync(configFilePath, {encode: 'utf8'});\n    let config = JSON.parse(configJSON);\n\n    return config;\n  }\n}\n\n// if this file is directory executed, work as CLI.\nlet executedFilePath = fs.realpathSync(process.argv[1]);\nif (executedFilePath === __filename) {\n  let cli = new ESDocCLI(process.argv);\n  cli.exec();\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ESDocCLI",
    "memberof": "src/ESDocCLI.js",
    "longname": "src/ESDocCLI.js~ESDocCLI",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/ESDocCLI.js",
    "importStyle": "ESDocCLI",
    "description": "Command Line Interface for ESDoc.",
    "examples": [
      "let cli = new ESDocCLI(process.argv);\ncli.exec();"
    ],
    "lineNumber": 17,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#constructor",
    "access": null,
    "description": "Create instance.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "argv",
        "description": "this is node.js argv(``process.argv``)"
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_argv",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#_argv",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ESDocCLIArgv"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#exec",
    "access": null,
    "description": "execute to generate document.",
    "lineNumber": 40,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_showHelp",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#_showHelp",
    "access": "private",
    "description": "show help of ESDoc",
    "lineNumber": 56,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_showVersion",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#_showVersion",
    "access": "private",
    "description": "show version of ESDoc",
    "lineNumber": 64,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createConfigFromJSONFile",
    "memberof": "src/ESDocCLI.js~ESDocCLI",
    "longname": "src/ESDocCLI.js~ESDocCLI#_createConfigFromJSONFile",
    "access": "private",
    "description": "create config object from config file.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "configFilePath",
        "description": "config file path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ESDocConfig"
      ],
      "spread": false,
      "description": "config object."
    },
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "executedFilePath",
    "memberof": "src/ESDocCLI.js",
    "longname": "src/ESDocCLI.js~executedFilePath",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/ESDocCLI.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Factory/DocFactory.js",
    "memberof": null,
    "longname": "src/Factory/DocFactory.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from 'color-logger';\nimport CommentParser from '../Parser/CommentParser.js';\nimport FileDoc from '../Doc/FileDoc.js';\nimport ClassDoc from '../Doc/ClassDoc.js';\nimport MethodDoc from '../Doc/MethodDoc.js';\nimport MemberDoc from '../Doc/MemberDoc.js';\nimport FunctionDoc from '../Doc/FunctionDoc.js';\nimport VariableDoc from '../Doc/VariableDoc.js';\nimport AssignmentDoc from '../Doc/AssignmentDoc.js';\nimport TypedefDoc from '../Doc/TypedefDoc.js';\nimport ExternalDoc from '../Doc/ExternalDoc.js';\nimport ASTUtil from '../Util/ASTUtil.js';\n\nlet already = Symbol('already');\nlet logger = new Logger('DocFactory');\n\n/**\n * Doc factory class.\n *\n * @example\n * let factory = new DocFactory(ast, pathResolver);\n * factory.push(node, parentNode);\n * let results = factory.results;\n */\nexport default class DocFactory {\n  /**\n   * @type {DocObject[]}\n   */\n  get results() {\n    return [...this._results];\n  }\n\n  /**\n   * create instance.\n   * @param {AST} ast - AST of source code.\n   * @param {PathResolver} pathResolver - path resolver of source code.\n   */\n  constructor(ast, pathResolver) {\n    this._ast = ast;\n    this._pathResolver = pathResolver;\n    this._results = [];\n    this._processedClassNodes = [];\n\n    this._inspectExportDefaultDeclaration();\n    this._inspectExportNamedDeclaration();\n\n    // file doc\n    let doc = new FileDoc(ast, ast, pathResolver, []);\n    this._results.push(doc.value);\n\n    // ast does not child, so only comment.\n    if (ast.body.length === 0 && ast.leadingComments) {\n      let results = this._traverseComments(ast, null, ast.leadingComments);\n      this._results.push(...results);\n    }\n  }\n\n  /**\n   * inspect ExportDefaultDeclaration.\n   *\n   * case1: separated export\n   *\n   * ```javascript\n   * class Foo {}\n   * export default Foo;\n   * ```\n   *\n   * case2: export instance(directly).\n   *\n   * ```javascript\n   * class Foo {}\n   * export default new Foo();\n   * ```\n   *\n   * case3: export instance(indirectly).\n   *\n   * ```javascript\n   * class Foo {}\n   * let foo = new Foo();\n   * export default foo;\n   * ```\n   *\n   * @private\n   * @todo support function export.\n   */\n  _inspectExportDefaultDeclaration() {\n    let pseudoExportNodes = [];\n\n    for (let exportNode of this._ast.body) {\n      if (exportNode.type !== 'ExportDefaultDeclaration') continue;\n\n      let targetClassName = null;\n      let targetVariableName = null;\n      let pseudoClassExport;\n\n      switch(exportNode.declaration.type) {\n        case 'NewExpression':\n          targetClassName = exportNode.declaration.callee.name;\n          targetVariableName = targetClassName.replace(/^./, c => c.toLowerCase());\n          pseudoClassExport = true;\n          break;\n        case 'Identifier':\n          let varNode = ASTUtil.findVariableDeclarationAndNewExpressionNode(exportNode.declaration.name, this._ast);\n          if (varNode) {\n            targetClassName = varNode.declarations[0].init.callee.name;\n            targetVariableName = exportNode.declaration.name;\n            pseudoClassExport = true;\n            varNode.type = 'Identifier'; // to ignore\n          } else {\n            targetClassName = exportNode.declaration.name;\n            targetVariableName = targetClassName.replace(/^./, c => c.toLowerCase());\n            pseudoClassExport = false;\n          }\n          break;\n        default:\n          logger.w(`unknown export declaration type. type = \"${exportNode.declaration.type}\"`);\n          break;\n      }\n\n      let classNode = ASTUtil.findClassDeclarationNode(targetClassName, this._ast);\n      if (classNode) {\n        let pseudoExportNode1 = this._copy(exportNode);\n        pseudoExportNode1.declaration = this._copy(classNode);\n        pseudoExportNode1.leadingComments = null;\n        pseudoExportNode1.declaration.__esdoc__pseudo_export = pseudoClassExport;\n\n        let pseudoExportNode2 = this._copy(exportNode);\n        pseudoExportNode2.declaration = ASTUtil.createVariableDeclarationAndNewExpressionNode(targetVariableName, targetClassName, exportNode.loc);\n\n        pseudoExportNodes.push(pseudoExportNode1);\n        pseudoExportNodes.push(pseudoExportNode2);\n\n        classNode.type = 'Identifier'; // to ignore\n        exportNode.type = 'Identifier'; // to ignore\n      }\n\n      let functionNode = ASTUtil.findFunctionDeclarationNode(exportNode.declaration.name, this._ast);\n      if (functionNode) {\n        let pseudoExportNode = this._copy(exportNode);\n        pseudoExportNode.declaration = this._copy(functionNode);\n        exportNode.type = 'Identifier'; // to ignore\n        functionNode.type = 'Identifier'; // to ignore\n        pseudoExportNodes.push(pseudoExportNode);\n      }\n\n      let variableNode = ASTUtil.findVariableDeclarationNode(exportNode.declaration.name, this._ast);\n      if (variableNode) {\n        let pseudoExportNode = this._copy(exportNode);\n        pseudoExportNode.declaration = this._copy(variableNode);\n        exportNode.type = 'Identifier'; // to ignore\n        variableNode.type = 'Identifier'; // to ignore\n        pseudoExportNodes.push(pseudoExportNode);\n      }\n    }\n\n    this._ast.body.push(...pseudoExportNodes);\n  }\n\n  /**\n   * inspect ExportNamedDeclaration.\n   *\n   * case1: separated export\n   *\n   * ```javascript\n   * class Foo {}\n   * export {Foo};\n   * ```\n   *\n   * case2: export instance(indirectly).\n   *\n   * ```javascript\n   * class Foo {}\n   * let foo = new Foo();\n   * export {foo};\n   * ```\n   *\n   * @private\n   * @todo support function export.\n   */\n  _inspectExportNamedDeclaration() {\n    let pseudoExportNodes = [];\n\n    for (let exportNode of this._ast.body) {\n      if (exportNode.type !== 'ExportNamedDeclaration') continue;\n\n      if (exportNode.declaration && exportNode.declaration.type === 'VariableDeclaration') {\n        for (let declaration of exportNode.declaration.declarations) {\n          if (declaration.init.type !== 'NewExpression') continue;\n\n          let classNode = ASTUtil.findClassDeclarationNode(declaration.init.callee.name, this._ast);\n          if (classNode) {\n            let pseudoExportNode = this._copy(exportNode);\n            pseudoExportNode.declaration = this._copy(classNode);\n            pseudoExportNode.leadingComments = null;\n            pseudoExportNodes.push(pseudoExportNode);\n            pseudoExportNode.declaration.__esdoc__pseudo_export = true;\n            classNode.type = 'Identifier'; // to ignore\n          }\n        }\n        continue;\n      }\n\n      for (let specifier of exportNode.specifiers) {\n        if (specifier.type !== 'ExportSpecifier') continue;\n\n        let targetClassName = null;\n        let pseudoClassExport;\n\n        let varNode = ASTUtil.findVariableDeclarationAndNewExpressionNode(specifier.exported.name, this._ast);\n        if (varNode) {\n          targetClassName = varNode.declarations[0].init.callee.name;\n          pseudoClassExport = true;\n\n          let pseudoExportNode = this._copy(exportNode);\n          pseudoExportNode.declaration = this._copy(varNode);\n          pseudoExportNode.specifiers = null;\n          pseudoExportNodes.push(pseudoExportNode);\n\n          varNode.type = 'Identifier'; // to ignore\n        } else {\n          targetClassName = specifier.exported.name;\n          pseudoClassExport = false;\n        }\n\n        let classNode = ASTUtil.findClassDeclarationNode(targetClassName, this._ast);\n        if (classNode) {\n          let pseudoExportNode = this._copy(exportNode);\n          pseudoExportNode.declaration = this._copy(classNode);\n          pseudoExportNode.leadingComments = null;\n          pseudoExportNode.specifiers = null;\n          pseudoExportNode.declaration.__esdoc__pseudo_export = pseudoClassExport;\n          pseudoExportNodes.push(pseudoExportNode);\n          classNode.type = 'Identifier'; // to ignore\n        }\n\n        let functionNode = ASTUtil.findFunctionDeclarationNode(specifier.exported.name, this._ast);\n        if (functionNode) {\n          let pseudoExportNode = this._copy(exportNode);\n          pseudoExportNode.declaration = this._copy(functionNode);\n          pseudoExportNode.leadingComments = null;\n          pseudoExportNode.specifiers = null;\n          functionNode.type = 'Identifier'; // to ignore\n          pseudoExportNodes.push(pseudoExportNode);\n        }\n\n        let variableNode = ASTUtil.findVariableDeclarationNode(specifier.exported.name, this._ast);\n        if (variableNode) {\n          let pseudoExportNode = this._copy(exportNode);\n          pseudoExportNode.declaration = this._copy(variableNode);\n          pseudoExportNode.leadingComments = null;\n          pseudoExportNode.specifiers = null;\n          variableNode.type = 'Identifier'; // to ignore\n          pseudoExportNodes.push(pseudoExportNode);\n        }\n      }\n    }\n\n    this._ast.body.push(...pseudoExportNodes);\n  }\n\n  /**\n   * push node, and factory processes node.\n   * @param {ASTNode} node - target node.\n   * @param {ASTNode} parentNode - parent node of target node.\n   */\n  push(node, parentNode) {\n    if (node === this._ast) return;\n\n    if (node[already]) return;\n\n    let isLastNodeInParent = this._isLastNodeInParent(node, parentNode);\n\n    node[already] = true;\n    Object.defineProperty(node, 'parent', {value: parentNode});\n\n    // unwrap export declaration\n    if (['ExportDefaultDeclaration', 'ExportNamedDeclaration'].includes(node.type)) {\n      parentNode = node;\n      node = this._unwrapExportDeclaration(node);\n      if (!node) return;\n      node[already] = true;\n      Object.defineProperty(node, 'parent', {value: parentNode});\n    }\n\n    let results = this._traverseComments(parentNode, node, node.leadingComments);\n    this._results.push(...results);\n\n    // for trailing comments.\n    // traverse with only last node, because prevent duplication of trailing comments.\n    if (node.trailingComments && isLastNodeInParent) {\n      let results = this._traverseComments(parentNode, null, node.trailingComments);\n      this._results.push(...results);\n    }\n  }\n\n  /**\n   * traverse comments of node, and create doc object.\n   * @param {ASTNode} parentNode - parent of target node.\n   * @param {ASTNode} node - target node.\n   * @param {ASTNode[]} comments - comment nodes.\n   * @returns {DocObject[]} created doc objects.\n   * @private\n   */\n  _traverseComments(parentNode, node, comments) {\n    if (!node) {\n      let virtualNode = {};\n      Object.defineProperty(virtualNode, 'parent', {value: parentNode});\n      node = virtualNode;\n    }\n\n    // hack: leadingComment of MethodDefinition with Literal is not valid by espree(v2.0.2)\n    if (node.type === 'MethodDefinition' && node.key.type === 'Literal') {\n      let line = node.loc.start.line - 1;\n      for (let comment of this._ast.comments || []) {\n        if (comment.loc.end.line === line) {\n          comments = [comment];\n          break;\n        }\n      }\n    }\n\n    if (comments && comments.length) {\n      let temp = [];\n      for (let comment of comments) {\n        if (CommentParser.isESDoc(comment)) temp.push(comment);\n      }\n      comments = temp;\n    } else {\n      comments = [];\n    }\n\n    if (comments.length === 0) {\n      comments = [{type: 'Block', value: '* @_undocument'}];\n    }\n\n    let results = [];\n    let lastComment = comments[comments.length - 1];\n    for (let comment of comments) {\n      let tags = CommentParser.parse(comment);\n\n      let doc;\n      if (comment === lastComment) {\n        doc = this._createDoc(node, tags);\n      } else {\n        let virtualNode = {};\n        Object.defineProperty(virtualNode, 'parent', {value: parentNode});\n        doc = this._createDoc(virtualNode, tags);\n      }\n\n      if (doc) results.push(doc.value);\n    }\n\n    return results;\n  }\n\n  /**\n   * create Doc.\n   * @param {ASTNode} node - target node.\n   * @param {Tag[]} tags - tags of target node.\n   * @returns {AbstractDoc} created Doc.\n   * @private\n   */\n  _createDoc(node, tags) {\n    let result = this._decideType(tags, node);\n    let type = result.type;\n    node = result.node;\n\n    if (!type) return null;\n\n    if (type === 'Class') {\n      this._processedClassNodes.push(node);\n    }\n\n    let clazz;\n    switch (type) {\n      case 'Class':   clazz = ClassDoc; break;\n      case 'Method':  clazz = MethodDoc; break;\n      case 'Member':  clazz = MemberDoc; break;\n      case 'Function': clazz = FunctionDoc; break;\n      case 'Variable': clazz = VariableDoc; break;\n      case 'Assignment': clazz = AssignmentDoc; break;\n      case 'Typedef': clazz = TypedefDoc; break;\n      case 'External': clazz = ExternalDoc; break;\n    }\n\n    if (!clazz) return;\n    if (!node.type) node.type = type;\n\n    return new clazz(this._ast, node, this._pathResolver, tags);\n  }\n\n  /**\n   * decide Doc type by using tags and node.\n   * @param {Tag[]} tags - tags of node.\n   * @param {ASTNode} node - target node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideType(tags, node) {\n    let type = null;\n    for (let tag of tags) {\n      let tagName = tag.tagName;\n      switch (tagName) {\n        case '@_class':    type = 'Class'; break;\n        case '@_member':   type = 'Member'; break;\n        case '@_method':   type = 'Method'; break;\n        case '@_function': type = 'Function'; break;\n        case '@_var':      type = 'Variable'; break;\n        case '@typedef':  type = 'Typedef'; break;\n        case '@external': type = 'External'; break;\n      }\n    }\n\n    if (type) return {type, node};\n\n    if (!node) return {type, node};\n\n    switch (node.type) {\n      case 'ClassDeclaration':\n        return this._decideClassDeclarationType(node);\n      case 'MethodDefinition':\n        return this._decideMethodDefinitionType(node);\n      case 'ExpressionStatement':\n        return this._decideExpressionStatementType(node);\n      case 'FunctionDeclaration':\n        return this._decideFunctionDeclarationType(node);\n      case 'VariableDeclaration':\n        return this._decideVariableType(node);\n      case 'AssignmentExpression':\n        return this._decideAssignmentType(node);\n    }\n\n    return {type: null, node: null};\n  }\n\n  /**\n   * decide Doc type from class declaration node.\n   * @param {ASTNode} node - target node that is class declaration node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideClassDeclarationType(node) {\n    if (!this._isTopDepthInBody(node, this._ast.body)) return {type: null, node: null};\n\n    return {type: 'Class', node: node};\n  }\n\n  /**\n   * decide Doc type from method definition node.\n   * @param {ASTNode} node - target node that is method definition node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideMethodDefinitionType(node) {\n    let classNode = this._findUp(node, ['ClassDeclaration', 'ClassExpression']);\n    if (this._processedClassNodes.includes(classNode)) {\n      return {type: 'Method', node: node};\n    } else {\n      logger.w('this method is not in class', node);\n      return {type: null, node: null};\n    }\n  }\n\n  /**\n   * decide Doc type from function declaration node.\n   * @param {ASTNode} node - target node that is function declaration node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideFunctionDeclarationType(node) {\n    if (!this._isTopDepthInBody(node, this._ast.body)) return {type: null, node: null};\n\n    return {type: 'Function', node: node};\n  }\n\n  /**\n   * decide Doc type from expression statement node.\n   * @param {ASTNode} node - target node that is expression statement node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideExpressionStatementType(node) {\n    let isTop = this._isTopDepthInBody(node, this._ast.body);\n    Object.defineProperty(node.expression, 'parent', {value: node});\n    node = node.expression;\n    node[already] = true;\n\n    let innerType;\n    let innerNode;\n\n    if (!node.right) return {type: null, node: null};\n\n    switch (node.right.type) {\n      case 'FunctionExpression':\n        innerType = 'Function';\n        break;\n      case 'ClassExpression':\n        innerType = 'Class';\n        break;\n      default:\n        if (node.left.type === 'MemberExpression' && node.left.object.type === 'ThisExpression') {\n          let classNode = this._findUp(node, ['ClassExpression', 'ClassDeclaration']);\n          if (!this._processedClassNodes.includes(classNode)) {\n            logger.w('this member is not in class.', this._pathResolver.filePath, node);\n            return {type: null, node: null};\n          }\n          return {type: 'Member', node: node};\n        } else {\n          return {type: null, node: null};\n        }\n    }\n\n    if (!isTop) return {type: null, node: null};\n\n    innerNode = node.right;\n    innerNode.id = this._copy(node.left.id || node.left.property);\n    Object.defineProperty(innerNode, 'parent', {value: node});\n    innerNode[already] = true;\n\n    return {type: innerType, node: innerNode};\n  }\n\n  /**\n   * decide Doc type from variable node.\n   * @param {ASTNode} node - target node that is variable node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideVariableType(node) {\n    if (!this._isTopDepthInBody(node, this._ast.body)) return {type: null, node: null};\n\n    let innerType = null;\n    let innerNode = null;\n\n    if (!node.declarations[0].init) return {type: innerType, node: innerNode};\n\n    switch (node.declarations[0].init.type) {\n      case 'FunctionExpression':\n        innerType = 'Function';\n        break;\n      case 'ClassExpression':\n        innerType = 'Class';\n        break;\n      default:\n        return {type: 'Variable', node: node};\n    }\n\n    innerNode = node.declarations[0].init;\n    innerNode.id = this._copy(node.declarations[0].id);\n    Object.defineProperty(innerNode, 'parent', {value: node});\n    innerNode[already] = true;\n\n    return {type: innerType, node: innerNode};\n  }\n\n  /**\n   * decide Doc type from assignment node.\n   * @param {ASTNode} node - target node that is assignment node.\n   * @returns {{type: string, node: ASTNode}} decided type.\n   * @private\n   */\n  _decideAssignmentType(node) {\n    if (!this._isTopDepthInBody(node, this._ast.body)) return {type: null, node: null};\n\n    let innerType;\n    let innerNode;\n\n    switch (node.right.type) {\n      case 'FunctionExpression':\n        innerType = 'Function';\n        break;\n      case 'ClassExpression':\n        innerType = 'Class';\n        break;\n      default:\n        return {type: 'Assignment', node: node};\n    }\n\n    innerNode = node.right;\n    innerNode.id = this._copy(node.left.id || node.left.property);\n    Object.defineProperty(innerNode, 'parent', {value: node});\n    innerNode[already] = true;\n\n    return {type: innerType, node: innerNode};\n  }\n\n  /**\n   * unwrap exported node.\n   * @param {ASTNode} node - target node that is export declaration node.\n   * @returns {ASTNode|null} unwrapped child node of exported node.\n   * @private\n   */\n  _unwrapExportDeclaration(node) {\n    // e.g. `export A from './A.js'` has not declaration\n    if (!node.declaration) return null;\n\n    let exportedASTNode = node.declaration;\n    if (!exportedASTNode.leadingComments) exportedASTNode.leadingComments = [];\n    exportedASTNode.leadingComments.push(...node.leadingComments || []);\n\n    if (!exportedASTNode.trailingComments) exportedASTNode.trailingComments = [];\n    exportedASTNode.trailingComments.push(...node.trailingComments || []);\n\n    return exportedASTNode;\n  }\n\n  /**\n   * judge node is last in parent.\n   * @param {ASTNode} node - target node.\n   * @param {ASTNode} parentNode - target parent node.\n   * @returns {boolean} if true, the node is last in parent.\n   * @private\n   */\n  _isLastNodeInParent(node, parentNode) {\n    if (parentNode && parentNode.body) {\n      let lastNode = parentNode.body[parentNode.body.length - 1];\n      return node === lastNode;\n    }\n\n    return false;\n  }\n\n  /**\n   * judge node is top in body.\n   * @param {ASTNode} node - target node.\n   * @param {ASTNode[]} body - target body node.\n   * @returns {boolean} if true, the node is top in body.\n   * @private\n   */\n  _isTopDepthInBody(node, body) {\n    if (!body) return false;\n    if (!Array.isArray(body)) return false;\n\n    let parentNode = node.parent;\n    if (['ExportDefaultDeclaration', 'ExportNamedDeclaration'].includes(parentNode.type)) {\n      node = parentNode;\n    }\n\n    for (let _node of body) {\n      if (node === _node) return true;\n    }\n    return false;\n  }\n\n  /**\n   * deep copy object.\n   * @param {Object} obj - target object.\n   * @return {Object} copied object.\n   * @private\n   */\n  _copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  /**\n   * find node while goes up.\n   * @param {ASTNode} node - start node.\n   * @param {string[]} types - ASTNode types.\n   * @returns {ASTNode|null} found first node.\n   * @private\n   */\n  _findUp(node, types) {\n    let parent = node.parent;\n    while(parent) {\n      if (types.includes(parent.type)) return parent;\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "already",
    "memberof": "src/Factory/DocFactory.js",
    "longname": "src/Factory/DocFactory.js~already",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Factory/DocFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "src/Factory/DocFactory.js",
    "longname": "src/Factory/DocFactory.js~logger",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Factory/DocFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "color-logger~Logger"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DocFactory",
    "memberof": "src/Factory/DocFactory.js",
    "longname": "src/Factory/DocFactory.js~DocFactory",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Factory/DocFactory.js",
    "importStyle": "DocFactory",
    "description": "Doc factory class.",
    "examples": [
      "let factory = new DocFactory(ast, pathResolver);\nfactory.push(node, parentNode);\nlet results = factory.results;"
    ],
    "lineNumber": 25,
    "interface": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "results",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#results",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "AST of source code."
      },
      {
        "nullable": null,
        "types": [
          "PathResolver"
        ],
        "spread": false,
        "optional": false,
        "name": "pathResolver",
        "description": "path resolver of source code."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ast",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_ast",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_pathResolver",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_pathResolver",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_results",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_results",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_processedClassNodes",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_processedClassNodes",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_inspectExportDefaultDeclaration",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_inspectExportDefaultDeclaration",
    "access": "private",
    "description": "inspect ExportDefaultDeclaration.\n\ncase1: separated export\n\n```javascript\nclass Foo {}\nexport default Foo;\n```\n\ncase2: export instance(directly).\n\n```javascript\nclass Foo {}\nexport default new Foo();\n```\n\ncase3: export instance(indirectly).\n\n```javascript\nclass Foo {}\nlet foo = new Foo();\nexport default foo;\n```",
    "lineNumber": 86,
    "todo": [
      "support function export."
    ],
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_inspectExportNamedDeclaration",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_inspectExportNamedDeclaration",
    "access": "private",
    "description": "inspect ExportNamedDeclaration.\n\ncase1: separated export\n\n```javascript\nclass Foo {}\nexport {Foo};\n```\n\ncase2: export instance(indirectly).\n\n```javascript\nclass Foo {}\nlet foo = new Foo();\nexport {foo};\n```",
    "lineNumber": 180,
    "todo": [
      "support function export."
    ],
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "push",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#push",
    "access": null,
    "description": "push node, and factory processes node.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNode",
        "description": "parent node of target node."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_traverseComments",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_traverseComments",
    "access": "private",
    "description": "traverse comments of node, and create doc object.",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DocObject[]} created doc objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNode",
        "description": "parent of target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "comments",
        "description": "comment nodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": "created doc objects."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createDoc",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_createDoc",
    "access": "private",
    "description": "create Doc.",
    "lineNumber": 363,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AbstractDoc} created Doc."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "Tag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "tags of target node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AbstractDoc"
      ],
      "spread": false,
      "description": "created Doc."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideType",
    "access": "private",
    "description": "decide Doc type by using tags and node.",
    "lineNumber": 399,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Tag[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tags",
        "description": "tags of node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideClassDeclarationType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideClassDeclarationType",
    "access": "private",
    "description": "decide Doc type from class declaration node.",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is class declaration node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideMethodDefinitionType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideMethodDefinitionType",
    "access": "private",
    "description": "decide Doc type from method definition node.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is method definition node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideFunctionDeclarationType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideFunctionDeclarationType",
    "access": "private",
    "description": "decide Doc type from function declaration node.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is function declaration node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideExpressionStatementType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideExpressionStatementType",
    "access": "private",
    "description": "decide Doc type from expression statement node.",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is expression statement node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideVariableType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideVariableType",
    "access": "private",
    "description": "decide Doc type from variable node.",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is variable node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_decideAssignmentType",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_decideAssignmentType",
    "access": "private",
    "description": "decide Doc type from assignment node.",
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{type: string, node: ASTNode}} decided type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is assignment node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{type: string, node: ASTNode}"
      ],
      "spread": false,
      "description": "decided type."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_unwrapExportDeclaration",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_unwrapExportDeclaration",
    "access": "private",
    "description": "unwrap exported node.",
    "lineNumber": 593,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} unwrapped child node of exported node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node that is export declaration node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "unwrapped child node of exported node."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_isLastNodeInParent",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_isLastNodeInParent",
    "access": "private",
    "description": "judge node is last in parent.",
    "lineNumber": 614,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if true, the node is last in parent."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNode",
        "description": "target parent node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if true, the node is last in parent."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_isTopDepthInBody",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_isTopDepthInBody",
    "access": "private",
    "description": "judge node is top in body.",
    "lineNumber": 630,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if true, the node is top in body."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "target body node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if true, the node is top in body."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_copy",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_copy",
    "access": "private",
    "description": "deep copy object.",
    "lineNumber": 651,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "target object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "copied object."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findUp",
    "memberof": "src/Factory/DocFactory.js~DocFactory",
    "longname": "src/Factory/DocFactory.js~DocFactory#_findUp",
    "access": "private",
    "description": "find node while goes up.",
    "lineNumber": 662,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} found first node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "start node."
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": "ASTNode types."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "found first node."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Factory/TestDocFactory.js",
    "memberof": null,
    "longname": "src/Factory/TestDocFactory.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport CommentParser from '../Parser/CommentParser.js';\nimport TestDoc from '../Doc/TestDoc.js';\nimport TestFileDoc from '../Doc/TestFileDoc.js';\n\nlet already = Symbol('already');\n\n/**\n * Test doc factory class.\n * @example\n * let factory = new TestDocFactory('mocha', ast, pathResolver);\n * factory.push(node, parentNode);\n * let results = factory.results;\n */\nexport default class TestDocFactory {\n  /**\n   * get unique id.\n   * @returns {number} unique id.\n   * @private\n   */\n  static _getUniqueId() {\n    if (!this._sequence) /** @type {number} */ this._sequence = 0;\n\n    return this._sequence++;\n  }\n\n  /**\n   * @type {DocObject[]}\n   */\n  get results() {\n    return [...this._results];\n  }\n\n  /**\n   * create instance.\n   * @param {string} type - test type. now support only 'mocha'.\n   * @param {AST} ast - AST of test code.\n   * @param {PathResolver} pathResolver - path resolver of test code.\n   */\n  constructor(type, ast, pathResolver) {\n    type = type.toLowerCase();\n    assert(type === 'mocha');\n\n    /** @type {string} */\n    this._type = type;\n\n    /** @type {AST} */\n    this._ast = ast;\n\n    /** @type {PathResolver} */\n    this._pathResolver = pathResolver;\n\n    /** @type {DocObject[]} */\n    this._results = [];\n\n    // file doc\n    let doc = new TestFileDoc(ast, ast, pathResolver, []);\n    this._results.push(doc.value);\n  }\n\n  /**\n   * push node, and factory process the node.\n   * @param {ASTNode} node - target node.\n   * @param {ASTNode} parentNode - parent node of target node.\n   */\n  push(node, parentNode) {\n    if (node[already]) return;\n\n    node[already] = true;\n    Object.defineProperty(node, 'parent', {value: parentNode});\n\n    if (this._type === 'mocha') this._pushForMocha(node, parentNode);\n  }\n\n  /**\n   * push node as mocha test code.\n   * @param {ASTNode} node - target node.\n   * @private\n   */\n  _pushForMocha(node) {\n    if (node.type !== 'ExpressionStatement') return;\n\n    let expression = node.expression;\n    if (expression.type !== 'CallExpression') return;\n\n    if (!['describe', 'it', 'context', 'suite', 'test'].includes(expression.callee.name)) return;\n\n    expression[already] = true;\n    Object.defineProperty(expression, 'parent', {value: node});\n\n    let tags = [];\n    if (node.leadingComments && node.leadingComments.length) {\n      let comment = node.leadingComments[node.leadingComments.length - 1];\n      tags = CommentParser.parse(comment);\n    }\n\n    let uniqueId = this.constructor._getUniqueId();\n    expression._esdocTestId = uniqueId;\n    expression._esdocTestName = expression.callee.name + uniqueId;\n\n    let testDoc = new TestDoc(this._ast, expression, this._pathResolver, tags);\n\n    this._results.push(testDoc.value);\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "already",
    "memberof": "src/Factory/TestDocFactory.js",
    "longname": "src/Factory/TestDocFactory.js~already",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Factory/TestDocFactory.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TestDocFactory",
    "memberof": "src/Factory/TestDocFactory.js",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Factory/TestDocFactory.js",
    "importStyle": "TestDocFactory",
    "description": "Test doc factory class.",
    "examples": [
      "let factory = new TestDocFactory('mocha', ast, pathResolver);\nfactory.push(node, parentNode);\nlet results = factory.results;"
    ],
    "lineNumber": 15,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "_getUniqueId",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory._getUniqueId",
    "access": "private",
    "description": "get unique id.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} unique id."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "unique id."
    },
    "generator": false
  },
  {
    "kind": "member",
    "static": true,
    "variation": null,
    "name": "_sequence",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory._sequence",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "results",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#results",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "test type. now support only 'mocha'."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "AST of test code."
      },
      {
        "nullable": null,
        "types": [
          "PathResolver"
        ],
        "spread": false,
        "optional": false,
        "name": "pathResolver",
        "description": "path resolver of test code."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_type",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#_type",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ast",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#_ast",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "AST"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_pathResolver",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#_pathResolver",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "PathResolver"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_results",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#_results",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "push",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#push",
    "access": null,
    "description": "push node, and factory process the node.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "parentNode",
        "description": "parent node of target node."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_pushForMocha",
    "memberof": "src/Factory/TestDocFactory.js~TestDocFactory",
    "longname": "src/Factory/TestDocFactory.js~TestDocFactory#_pushForMocha",
    "access": "private",
    "description": "push node as mocha test code.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "target node."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Parser/CommentParser.js",
    "memberof": null,
    "longname": "src/Parser/CommentParser.js",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "content": "/**\n * Doc Comment Parser class.\n *\n * @example\n * for (let comment of node.leadingComments) {\n *   let tags = CommentParser.parse(comment);\n *   console.log(tags);\n * }\n */\nexport default class CommentParser {\n  /**\n   * parse comment to tags.\n   * @param {ASTNode} commentNode - comment node.\n   * @param {string} commentNode.value - comment body.\n   * @param {string} commentNode.type - Block or Line.\n   * @returns {Tag[]} parsed comment.\n   */\n  static parse(commentNode) {\n    if (!this.isESDoc(commentNode)) return [];\n\n    let comment = commentNode.value;\n\n    // TODO: refactor\n    comment = comment.replace(/\\r\\n/gm, '\\n'); // for windows\n    comment = comment.replace(/^\\t*\\s?/gm, ''); // remove trailing tab\n    comment = comment.replace(/^\\*\\s?/, ''); // remove first '*'\n    comment = comment.replace(/ $/, ''); // remove last ' '\n    comment = comment.replace(/^ *\\* ?/gm, ''); // remove line head '*'\n    if (comment.charAt(0) !== '@')  comment = '@desc ' + comment; // auto insert @desc\n    comment = comment.replace(/\\s*$/, ''); // remove tail space.\n    comment = comment.replace(/^(@\\w+)$/gm, '$1 \\\\TRUE'); // auto insert tag text to non-text tag (e.g. @interface)\n    comment = comment.replace(/^(@\\w+)\\s(.*)/gm, '\\\\Z$1\\\\Z$2'); // insert separator (\\\\Z@tag\\\\Ztext)\n    let lines = comment.split('\\\\Z');\n\n    let tagName = '';\n    let tagValue = '';\n    let tags = [];\n    for (let i = 0; i < lines.length; i++) {\n      let line = lines[i];\n      if (line.charAt(0) === '@') {\n        tagName = line;\n        let nextLine = lines[i + 1];\n        if (nextLine.charAt(0) === '@') {\n          tagValue = '';\n        } else {\n          tagValue = nextLine;\n          i++;\n        }\n        tagValue = tagValue.replace('\\\\TRUE', '').replace(/^\\n/, '').replace(/\\n*$/, '');\n        tags.push({tagName, tagValue});\n      }\n    }\n    return tags;\n  }\n\n  /**\n   * judge doc comment or not.\n   * @param {ASTNode} commentNode - comment node.\n   * @returns {boolean} if true, this comment node is doc comment.\n   */\n  static isESDoc(commentNode) {\n    if (commentNode.type !== 'Block') return false;\n    return commentNode.value.charAt(0) === '*';\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CommentParser",
    "memberof": "src/Parser/CommentParser.js",
    "longname": "src/Parser/CommentParser.js~CommentParser",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Parser/CommentParser.js",
    "importStyle": "CommentParser",
    "description": "Doc Comment Parser class.",
    "examples": [
      "for (let comment of node.leadingComments) {\n  let tags = CommentParser.parse(comment);\n  console.log(tags);\n}"
    ],
    "lineNumber": 10,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parse",
    "memberof": "src/Parser/CommentParser.js~CommentParser",
    "longname": "src/Parser/CommentParser.js~CommentParser.parse",
    "access": null,
    "description": "parse comment to tags.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tag[]} parsed comment."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "commentNode",
        "description": "comment node."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commentNode.value",
        "description": "comment body."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commentNode.type",
        "description": "Block or Line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tag[]"
      ],
      "spread": false,
      "description": "parsed comment."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "isESDoc",
    "memberof": "src/Parser/CommentParser.js~CommentParser",
    "longname": "src/Parser/CommentParser.js~CommentParser.isESDoc",
    "access": null,
    "description": "judge doc comment or not.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} if true, this comment node is doc comment."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "commentNode",
        "description": "comment node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "if true, this comment node is doc comment."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Parser/ESParser.js",
    "memberof": null,
    "longname": "src/Parser/ESParser.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs-extra';\nimport path from 'path';\nimport espree from 'espree';\n\n/**\n * ECMAScript Parser class.\n *\n * @example\n * let ast = ESParser.parse('./src/foo.js');\n */\nexport default class ESParser {\n  /**\n   * parse ECMAScript source code.\n   * @param {string} filePath - source code file path.\n   * @returns {AST} AST of source code.\n   */\n  static parse(filePath) {\n    let code = fs.readFileSync(filePath, {encode: 'utf8'}).toString();\n\n    if (code.charAt(0) === '#') {\n      code = code.replace(/^#!/, '//');\n    }\n\n    let option = {\n      comments: true,\n      attachComment: true,\n      loc: true,\n      ecmaFeatures: {\n        arrowFunctions: true,\n        blockBindings: true,\n        destructuring: true,\n        regexYFlag: true,\n        regexUFlag: true,\n        templateStrings: true,\n        binaryLiterals: true,\n        octalLiterals: true,\n        unicodeCodePointEscapes: true,\n        defaultParams: true,\n        restParams: true,\n        forOf: true,\n        objectLiteralComputedProperties: true,\n        objectLiteralShorthandMethods: true,\n        objectLiteralShorthandProperties: true,\n        objectLiteralDuplicateProperties: true,\n        generators: true,\n        spread: true,\n        classes: true,\n        modules: true,\n        jsx: true,\n        globalReturn: true\n      }\n    };\n\n    let ast = espree.parse(code, option);\n\n    return ast;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ESParser",
    "memberof": "src/Parser/ESParser.js",
    "longname": "src/Parser/ESParser.js~ESParser",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Parser/ESParser.js",
    "importStyle": "ESParser",
    "description": "ECMAScript Parser class.",
    "examples": [
      "let ast = ESParser.parse('./src/foo.js');"
    ],
    "lineNumber": 11,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parse",
    "memberof": "src/Parser/ESParser.js~ESParser",
    "longname": "src/Parser/ESParser.js~ESParser.parse",
    "access": null,
    "description": "parse ECMAScript source code.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AST} AST of source code."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "source code file path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AST"
      ],
      "spread": false,
      "description": "AST of source code."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Parser/ParamParser.js",
    "memberof": null,
    "longname": "src/Parser/ParamParser.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import Logger from 'color-logger';\nimport assert from 'assert';\nimport ASTUtil from '../Util/ASTUtil.js';\n\nlet logger = new Logger('ParamParser');\n\n/**\n * Param Type Parser class.\n */\nexport default class ParamParser {\n\n  /**\n   * parse param value.\n   * @param {string} value - param value.\n   * @param {boolean} [type=true] if true, contain param type.\n   * @param {boolean} [name=true] if true, contain param name.\n   * @param {boolean} [desc=true] if true, contain param description.\n   * @return {{typeText: string, paramName: string, paramDesc: string}} parsed value.\n   *\n   * @example\n   * let value = '{number} param - this is number param';\n   * let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n   *\n   * let value = '{number} this is number return value';\n   * let {typeText, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n   *\n   * let value = '{number}';\n   * let {typeText} = ParamParser.parseParamValue(value, true, false, false);\n   */\n  static parseParamValue(value, type = true, name = true, desc = true) {\n    value = value.trim();\n\n    let match;\n    let typeText = null;\n    let paramName = null;\n    let paramDesc = null;\n\n    // e.g {number}\n    if (type) {\n      match = value.match(/^\\{(.*)\\}(\\s+|$)/);\n      if (match) {\n        typeText = match[1];\n        value = value.replace(/^\\{.*\\}\\s*/, '');\n      } else {\n        typeText = '*';\n      }\n    }\n\n    // e.g. [p1=123]\n    if (name) {\n      match = value.match(/^(\\S+)/);\n      if (match) {\n        paramName = match[1];\n        value = value.replace(/^\\S+\\s*/, '')\n      }\n    }\n\n    // e.g. this is p1 desc.\n    if (desc) {\n      match = value.match(/^\\-?\\s*((:?.|\\n)*)$/m);\n      if (match) {\n        paramDesc = match[1];\n      }\n    }\n\n    assert(typeText || paramName || paramDesc, `param is invalid. param = \"${value}\"`);\n\n    return {typeText, paramName, paramDesc};\n  }\n\n  /**\n   * parse param text and build formatted result.\n   * @param {string} typeText - param type text.\n   * @param {string} [paramName] - param name.\n   * @param {string} [paramDesc] - param description.\n   * @returns {ParsedParam} formatted result.\n   *\n   * @example\n   * let value = '{number} param - this is number param';\n   * let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n   * let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n   */\n  static parseParam(typeText = null, paramName = null, paramDesc = null) {\n    let result = {};\n\n    if (typeText) {\n      // check nullable\n      if (typeText[0] === '?') {\n        result.nullable = true;\n      } else if (typeText[0] === '!') {\n        result.nullable = false;\n      } else {\n        result.nullable = null;\n      }\n      typeText = typeText.replace(/^[?!]/, '');\n\n      // check union\n      if (typeText[0] === '(') {\n        typeText = typeText.replace(/^[(]/, '').replace(/[)]$/, '');\n        result.types = typeText.split('|');\n      } else if(typeText.includes('|')){\n        result.types = typeText.split('|');\n      } else {\n        result.types = [typeText];\n      }\n\n      if (typeText.indexOf('...') === 0) {\n        result.spread = true;\n      } else {\n        result.spread = false;\n      }\n    }\n\n    if (paramName) {\n      // check optional\n      if (paramName[0] === '[') {\n        result.optional = true;\n        paramName = paramName.replace(/^[\\[]/, '').replace(/[\\]]$/, '');\n      } else {\n        result.optional = false;\n      }\n\n      // check default value\n      let pair = paramName.split('=');\n      if (pair.length === 2) {\n        result.defaultValue = pair[1];\n        try {\n          let raw = JSON.parse(pair[1]);\n          result.defaultRaw = raw;\n        } catch (e) {\n          result.defaultRaw = pair[1];\n        }\n      }\n\n      result.name = pair[0];\n    }\n\n    result.description = paramDesc;\n\n    return result;\n  }\n\n  /**\n   * guess param type by using param default arguments.\n   * @param {Object} params - node of callable AST node.\n   * @returns {ParsedParam[]} guess param results.\n   *\n   * @example\n   * // with method\n   * let results = ParamParser.guessParams(node.value.params);\n   *\n   * // with function\n   * let results = ParamParser.guessParams(node.params);\n   */\n  static guessParams(params) {\n    let _params = [];\n    for (let i = 0; i < params.length; i++) {\n      let param = params[i];\n      let result = {};\n\n      switch (param.type) {\n        case 'Identifier':\n          // e.g. func(a){}\n          result.name = param.name;\n          result.types = ['*'];\n          break;\n\n        case 'AssignmentPattern':\n          if (param.left.type === 'Identifier') {\n            result.name = param.left.name;\n          } else if (param.left.type === 'ObjectPattern') {\n            result.name = `objectPattern${i === 0 ? '' : i}`;\n          }\n\n          result.optional = true;\n\n          if (param.right.type === 'Literal') {\n            // e.g. func(a = 10){}\n            result.types = param.right.value === null ? ['*'] : [typeof param.right.value];\n            result.defaultRaw = param.right.value;\n            result.defaultValue = `${result.defaultRaw}`;\n          } else if (param.right.type === 'ArrayExpression') {\n            // e.g. func(a = [123]){}\n            result.types = param.right.elements.length ? [`${typeof param.right.elements[0].value}[]`] : ['*[]'];\n            result.defaultRaw = param.right.elements.map((elm)=> elm.value);\n            result.defaultValue = `${JSON.stringify(result.defaultRaw)}`;\n          } else if(param.right.type === 'ObjectExpression'){\n            let typeMap = {};\n            for (let prop of param.left.properties || []) {\n              typeMap[prop.key.name] = '*';\n            }\n\n            // e.g. func(a = {key: 123}){}\n            let obj = {};\n            for (let prop of param.right.properties) {\n              obj[prop.key.name] = prop.value.value;\n              typeMap[prop.key.name] = typeof prop.value.value;\n            }\n\n            let types = [];\n            for (let key of Object.keys(typeMap)) {\n              types.push(`\"${key}\": ${typeMap[key]}`);\n            }\n\n            result.types = [`{${types.join(', ')}}`];\n            result.defaultRaw = obj;\n            result.defaultValue = `${JSON.stringify(result.defaultRaw)}`;\n          } else if (param.right.type === 'Identifier') {\n            // e.g. func(a = value){}\n            result.types = ['*'];\n            result.defaultRaw = param.right.name;\n            result.defaultValue = `${param.right.name}`;\n          } else {\n            // e.g. func(a = new Foo()){}, func(a = foo()){}\n            // CallExpression, NewExpression\n            result.types = ['*'];\n          }\n          break;\n        case 'RestElement':\n          // e.g. func(...a){}\n          result.name = `${param.argument.name}`;\n          result.types = ['...*'];\n          result.spread = true;\n          break;\n        case 'ObjectPattern':\n          let objectPattern = [];\n          let raw = {};\n          for (let property of param.properties) {\n            objectPattern.push(`\"${property.key.name}\": *`);\n            raw[property.key.name] = null;\n          }\n          result.name = `objectPattern${i === 0 ? '' : i}`;\n          result.types = [`{${objectPattern.join(', ')}}`];\n          result.defaultRaw = raw;\n          result.defaultValue = `${JSON.stringify(result.defaultRaw)}`;\n          break;\n        default:\n          logger.w('unknown param.type', param);\n      }\n\n      _params.push(result);\n    }\n\n    return _params;\n  }\n\n  /**\n   * guess return type by using return node.\n   * @param {ASTNode} body - callable body node.\n   * @returns {ParsedParam|null}\n   */\n  static guessReturnParam(body) {\n    let result = {};\n\n    ASTUtil.traverse(body, function(node, parent){\n      // `return` in Function is not the body's `return`\n      if (node.type.includes('Function')) {\n        this.skip();\n        return;\n      }\n\n      if (node.type !== 'ReturnStatement') return;\n\n      if (!node.argument) return;\n\n      switch (node.argument.type) {\n        case 'Literal':\n          if (node.argument.value === null) {\n            result.types = result.types || ['*'];\n          } else {\n            result.types = [typeof node.argument.value];\n          }\n          break;\n        case 'TemplateLiteral':\n          result.types = ['string'];\n          break;\n        default:\n          // todo: more better guess.\n          result.types = ['*'];\n      }\n    });\n\n    if (result.types) {\n      return result;\n    }\n\n    return null;\n  }\n\n  /**\n   * guess self type by using assignment node.\n   * @param {ASTNode} right - assignment right node.\n   * @returns {ParsedParam}\n   */\n  static guessType(right) {\n    let value = right && right.type === 'Literal' ? right.value : null;\n\n    if (value === null || value === undefined) {\n      return {types: ['*']};\n    } else {\n      return {types: [typeof value]};\n    }\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "logger",
    "memberof": "src/Parser/ParamParser.js",
    "longname": "src/Parser/ParamParser.js~logger",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Parser/ParamParser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "color-logger~Logger"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ParamParser",
    "memberof": "src/Parser/ParamParser.js",
    "longname": "src/Parser/ParamParser.js~ParamParser",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Parser/ParamParser.js",
    "importStyle": "ParamParser",
    "description": "Param Type Parser class.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parseParamValue",
    "memberof": "src/Parser/ParamParser.js~ParamParser",
    "longname": "src/Parser/ParamParser.js~ParamParser.parseParamValue",
    "access": null,
    "description": "parse param value.",
    "examples": [
      "let value = '{number} param - this is number param';\nlet {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n\nlet value = '{number} this is number return value';\nlet {typeText, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n\nlet value = '{number}';\nlet {typeText} = ParamParser.parseParamValue(value, true, false, false);"
    ],
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "param value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "type",
        "description": "if true, contain param type."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "name",
        "description": "if true, contain param name."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "desc",
        "description": "if true, contain param description."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{typeText: string, paramName: string, paramDesc: string}"
      ],
      "spread": false,
      "description": "parsed value."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "parseParam",
    "memberof": "src/Parser/ParamParser.js~ParamParser",
    "longname": "src/Parser/ParamParser.js~ParamParser.parseParam",
    "access": null,
    "description": "parse param text and build formatted result.",
    "examples": [
      "let value = '{number} param - this is number param';\nlet {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\nlet result = ParamParser.parseParam(typeText, paramName, paramDesc);"
    ],
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParsedParam} formatted result."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeText",
        "description": "param type text."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "paramName",
        "description": "param name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "paramDesc",
        "description": "param description."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParsedParam"
      ],
      "spread": false,
      "description": "formatted result."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "guessParams",
    "memberof": "src/Parser/ParamParser.js~ParamParser",
    "longname": "src/Parser/ParamParser.js~ParamParser.guessParams",
    "access": null,
    "description": "guess param type by using param default arguments.",
    "examples": [
      "// with method\nlet results = ParamParser.guessParams(node.value.params);\n\n// with function\nlet results = ParamParser.guessParams(node.params);"
    ],
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParsedParam[]} guess param results."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "node of callable AST node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParsedParam[]"
      ],
      "spread": false,
      "description": "guess param results."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "guessReturnParam",
    "memberof": "src/Parser/ParamParser.js~ParamParser",
    "longname": "src/Parser/ParamParser.js~ParamParser.guessReturnParam",
    "access": null,
    "description": "guess return type by using return node.",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParsedParam|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "callable body node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParsedParam",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "guessType",
    "memberof": "src/Parser/ParamParser.js~ParamParser",
    "longname": "src/Parser/ParamParser.js~ParamParser.guessType",
    "access": null,
    "description": "guess self type by using assignment node.",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ParsedParam}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "assignment right node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ParsedParam"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/ASTDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/ASTDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import DocBuilder from './DocBuilder.js';\n\n/**\n * AST Output Builder class.\n */\nexport default class ASTDocBuilder extends DocBuilder {\n  /**\n   * create instance.\n   * @param {Taffy} data - doc comment database.\n   * @param {AST[]} asts - all source code ASTs.\n   * @param {ESDocConfig} config - ESDoc config object.\n   */\n  constructor(data, asts, config) {\n    super(data, config);\n    this._asts = asts;\n  }\n\n  /**\n   * execute building output.\n   * @param {function(ast: string, filePath: string)} callback - is called each asts.\n   */\n  exec(callback) {\n    for (let ast of this._asts) {\n      let json = JSON.stringify(ast.ast, null, 2);\n      let filePath = `ast/${ast.filePath}.json`;\n      callback(json, filePath);\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ASTDocBuilder",
    "memberof": "src/Publisher/Builder/ASTDocBuilder.js",
    "longname": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/ASTDocBuilder.js",
    "importStyle": "ASTDocBuilder",
    "description": "AST Output Builder class.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder",
    "longname": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Taffy"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "doc comment database."
      },
      {
        "nullable": null,
        "types": [
          "AST[]"
        ],
        "spread": false,
        "optional": false,
        "name": "asts",
        "description": "all source code ASTs."
      },
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "ESDoc config object."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_asts",
    "memberof": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder",
    "longname": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder#_asts",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder",
    "longname": "src/Publisher/Builder/ASTDocBuilder.js~ASTDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(ast: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called each asts."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/ClassDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/ClassDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\nimport {parseExample} from './util.js';\n\n/**\n * Class Output Builder class.\n */\nexport default class ClassDocBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(html: string, filePath: string)} callback - is called each class.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n    ice.autoDrop = false;\n    let docs = this._find({kind: ['class']});\n    for (let doc of docs) {\n      let fileName = this._getOutputFileName(doc);\n      let baseUrl = this._getBaseUrl(fileName);\n      let title = this._getTitle(doc);\n      ice.load('content', this._buildClassDoc(doc), IceCap.MODE_WRITE);\n      ice.attr('baseUrl', 'href', baseUrl, IceCap.MODE_WRITE);\n      ice.text('title', title, IceCap.MODE_WRITE);\n      callback(ice.html, fileName);\n    }\n  }\n\n  /**\n   * build class output.\n   * @param {DocObject} doc - class doc object.\n   * @returns {IceCap} built output.\n   * @private\n   */\n  _buildClassDoc(doc) {\n    let expressionExtends = this._buildExpressionExtendsHTML(doc);\n    let mixinClasses = this._buildMixinClassesHTML(doc);\n    let extendsChain = this._buildExtendsChainHTML(doc);\n    let directSubclass = this._buildDirectSubclassHTML(doc);\n    let indirectSubclass = this._buildIndirectSubclassHTML(doc);\n    let instanceDocs = this._find({kind: 'variable'}).filter((v)=> {\n      return v.type && v.type.types.includes(doc.longname);\n    });\n\n    let ice = new IceCap(this._readTemplate('class.html'));\n\n    // header\n    if (doc.export && doc.importPath && doc.importStyle) {\n      let link = this._buildFileDocLinkHTML(doc, doc.importPath);\n      ice.into('importPath', `import ${doc.importStyle} from '${link}'`, (code, ice)=>{\n        ice.load('importPathCode', code);\n      });\n    }\n    ice.text('access', doc.access);\n    ice.text('kind', doc.interface ? 'interface' : 'class');\n    ice.load('source', this._buildFileDocLinkHTML(doc, 'source'), 'append');\n    ice.text('since', doc.since, 'append');\n    ice.text('version', doc.version, 'append');\n    ice.load('variation', this._buildVariationHTML(doc), 'append');\n\n    ice.into('expressionExtends', expressionExtends, (expressionExtends, ice)=> ice.load('expressionExtendsCode', expressionExtends));\n    ice.load('mixinExtends', mixinClasses, 'append');\n    ice.load('extendsChain', extendsChain, 'append');\n    ice.load('directSubclass', directSubclass, 'append');\n    ice.load('indirectSubclass', indirectSubclass, 'append');\n    ice.load('implements', this._buildDocsLinkHTML(doc.implements, null, false, ', '), 'append');\n    ice.load('indirectImplements', this._buildDocsLinkHTML(doc._custom_indirect_implements, null, false, ', '), 'append');\n    ice.load('directImplemented', this._buildDocsLinkHTML(doc._custom_direct_implemented, null, false, ', '), 'append');\n    ice.load('indirectImplemented', this._buildDocsLinkHTML(doc._custom_indirect_implemented, null, false, ', '), 'append');\n\n    // self\n    ice.text('name', doc.name);\n    ice.load('description', doc.description);\n    ice.load('deprecated', this._buildDeprecatedHTML(doc));\n    ice.load('experimental', this._buildExperimentalHTML(doc));\n    ice.load('see', this._buildDocsLinkHTML(doc.see), 'append');\n    ice.load('todo', this._buildDocsLinkHTML(doc.todo), 'append');\n\n    ice.into('instanceDocs', instanceDocs, (instanceDocs, ice)=>{\n      ice.loop('instanceDoc', instanceDocs, (i, instanceDoc, ice)=>{\n        ice.load('instanceDoc', this._buildDocLinkHTML(instanceDoc.longname));\n      });\n    });\n\n    ice.into('exampleDocs', doc.examples, (examples, ice)=>{\n      ice.loop('exampleDoc', examples, (i, example, ice)=>{\n        let parsed = parseExample(example);\n        ice.text('exampleCode', parsed.body);\n        ice.text('exampleCaption', parsed.caption);\n      });\n    });\n\n    ice.into('tests', doc._custom_tests, (tests, ice)=>{\n      ice.loop('test', tests, (i, test, ice)=>{\n        let testDoc = this._find({longname: test})[0];\n        ice.load('test', this._buildFileDocLinkHTML(testDoc, testDoc.testFullDescription));\n      });\n    });\n\n    // summary\n    ice.load('staticMemberSummary', this._buildSummaryHTML(doc, 'member', 'Members', true));\n    ice.load('staticMethodSummary', this._buildSummaryHTML(doc, 'method', 'Methods', true));\n    ice.load('constructorSummary', this._buildSummaryHTML(doc, 'constructor', 'Constructor', false));\n    ice.load('memberSummary', this._buildSummaryHTML(doc, 'member', 'Members', false));\n    ice.load('methodSummary', this._buildSummaryHTML(doc, 'method', 'Methods', false));\n\n    ice.load('inheritedSummary', this._buildInheritedSummaryHTML(doc), 'append');\n\n    // detail\n    ice.load('staticMemberDetails', this._buildDetailHTML(doc, 'member', 'Members', true));\n    ice.load('staticMethodDetails', this._buildDetailHTML(doc, 'method', 'Methods', true));\n    ice.load('constructorDetails', this._buildDetailHTML(doc, 'constructor', 'Constructors', false));\n    ice.load('memberDetails', this._buildDetailHTML(doc, 'member', 'Members', false));\n    ice.load('methodDetails', this._buildDetailHTML(doc, 'method', 'Methods', false));\n\n    return ice;\n  }\n\n  /**\n   * build variation of doc.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} variation links html.\n   * @private\n   * @experimental\n   */\n  _buildVariationHTML(doc) {\n    var variationDocs = this._find({memberof: doc.memberof, name: doc.name});\n    var html = [];\n    for (var variationDoc of variationDocs) {\n      if (variationDoc.variation === doc.variation) continue;\n\n      html.push(this._buildDocLinkHTML(variationDoc.longname, `(${variationDoc.variation || 1})`));\n    }\n\n    return html.join(', ');\n  }\n\n  /**\n   * build mixin extends html.\n   * @param {DocObject} doc - target class doc.\n   * @return {string} mixin extends html.\n   */\n  _buildMixinClassesHTML(doc) {\n    if (!doc.extends) return '';\n    if (doc.extends.length <= 1) return '';\n\n    let links = [];\n    for (var longname of doc.extends) {\n      links.push(this._buildDocLinkHTML(longname));\n    }\n\n    return `<div>${links.join(', ')}</div>`;\n  }\n\n  /**\n   * build expression extends html.\n   * @param {DocObject} doc - target class doc.\n   * @return {string} expression extends html.\n   */\n  _buildExpressionExtendsHTML(doc) {\n    if (!doc.expressionExtends) return '';\n\n    let html = doc.expressionExtends.replace(/[A-Z_$][a-zA-Z0-9_$]*/g, (v)=>{\n      return this._buildDocLinkHTML(v);\n    });\n\n    return `class ${doc.name} extends ${html}`;\n  }\n\n  /**\n   * build class ancestor extends chain.\n   * @param {DocObject} doc - target class doc.\n   * @returns {string} extends chain links html.\n   * @private\n   */\n  _buildExtendsChainHTML(doc) {\n    if (!doc._custom_extends_chains) return '';\n    if (doc.extends.length > 1) return '';\n\n    var links = [];\n    for (var longname of doc._custom_extends_chains) {\n      links.push(this._buildDocLinkHTML(longname));\n    }\n\n    links.push(doc.name);\n\n    return `<div>${links.join(' → ')}</div>`;\n  }\n\n  /**\n   * build in-direct subclass list.\n   * @param {DocObject} doc - target class doc.\n   * @returns {string} html of in-direct subclass links.\n   * @private\n   */\n  _buildIndirectSubclassHTML(doc) {\n    if (!doc._custom_indirect_subclasses) return '';\n\n    var links = [];\n    for (var longname of doc._custom_indirect_subclasses) {\n      links.push(this._buildDocLinkHTML(longname));\n    }\n\n    return `<div>${links.join(', ')}</div>`;\n  }\n\n  /**\n   * build direct subclass list.\n   * @param {DocObject} doc - target class doc.\n   * @returns {string} html of direct subclass links.\n   * @private\n   */\n  _buildDirectSubclassHTML(doc) {\n    if (!doc._custom_direct_subclasses) return '';\n\n    var links = [];\n    for (var longname of doc._custom_direct_subclasses) {\n      links.push(this._buildDocLinkHTML(longname));\n    }\n\n    return `<div>${links.join(', ')}</div>`;\n  }\n\n  /**\n   * build inherited method/member summary.\n   * @param {DocObject} doc - target class doc.\n   * @returns {string} html of inherited method/member from ancestor classes.\n   * @private\n   */\n  _buildInheritedSummaryHTML(doc) {\n    if (['class', 'interface'].indexOf(doc.kind) === -1) return '';\n\n    let longnames = [\n      ...doc._custom_extends_chains || []\n      //...doc.implements || [],\n      //...doc._custom_indirect_implements || [],\n    ];\n\n    let html = [];\n    for (let longname of longnames) {\n      let superDoc = this._find({longname})[0];\n\n      if (!superDoc) continue;\n\n      let targetDocs = this._find({memberof: longname, kind: ['member', 'method', 'get', 'set']});\n\n      targetDocs.sort((a, b)=>{\n        if (a.static !== b.static) return -(a.static - b.static);\n\n        let order = {get: 0, set: 0, member: 1, method: 2};\n        if (order[a.kind] !== order[b.kind]) {\n          return order[a.kind] - order[b.kind];\n        }\n\n        order = {public: 0, protected: 1, private: 2};\n        if (a.access != b.access) return order[a.access] - order[b.access];\n\n        if (a.name !== b.name) return a.name < b.name ? -1 : 1;\n\n        order = {get: 0, set: 1, member: 2};\n        return order[a.kind] - order[b.kind];\n      });\n\n      let title = `<span class=\"toggle closed\"></span> From ${superDoc.kind} ${this._buildDocLinkHTML(longname, superDoc.name)}`;\n      let result = this._buildSummaryDoc(targetDocs, '----------', false, superDoc.kind);\n      if (result) {\n        result.load('title', title, IceCap.MODE_WRITE);\n        html.push(result.html);\n      }\n    }\n\n    return html.join('\\n');\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ClassDocBuilder",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/ClassDocBuilder.js",
    "importStyle": "ClassDocBuilder",
    "description": "Class Output Builder class.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called each class."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildClassDoc",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildClassDoc",
    "access": "private",
    "description": "build class output.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{IceCap} built output."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "class doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "built output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildVariationHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildVariationHTML",
    "access": "private",
    "description": "build variation of doc.",
    "lineNumber": 125,
    "experimental": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} variation links html."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "variation links html."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildMixinClassesHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildMixinClassesHTML",
    "access": null,
    "description": "build mixin extends html.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "mixin extends html."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildExpressionExtendsHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildExpressionExtendsHTML",
    "access": null,
    "description": "build expression extends html.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "expression extends html."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildExtendsChainHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildExtendsChainHTML",
    "access": "private",
    "description": "build class ancestor extends chain.",
    "lineNumber": 175,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} extends chain links html."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "extends chain links html."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildIndirectSubclassHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildIndirectSubclassHTML",
    "access": "private",
    "description": "build in-direct subclass list.",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of in-direct subclass links."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of in-direct subclass links."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDirectSubclassHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildDirectSubclassHTML",
    "access": "private",
    "description": "build direct subclass list.",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of direct subclass links."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of direct subclass links."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildInheritedSummaryHTML",
    "memberof": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder",
    "longname": "src/Publisher/Builder/ClassDocBuilder.js~ClassDocBuilder#_buildInheritedSummaryHTML",
    "access": "private",
    "description": "build inherited method/member summary.",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of inherited method/member from ancestor classes."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target class doc."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of inherited method/member from ancestor classes."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/CoverageBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/CoverageBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Coverage output builder class.\n */\nexport default class CoverageBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(coverage: CoverageObject, filePath: string)} callback - is called with coverage.\n   */\n  exec(callback) {\n    let docs = this._find({kind: ['class', 'method', 'member', 'get', 'set', 'constructor', 'function', 'variable']});\n    let expectCount = docs.length;\n    let actualCount = 0;\n    let files = {};\n\n    for (let doc of docs) {\n      let filePath = doc.longname.split('~')[0];\n      if (!files[filePath]) files[filePath] = {expectCount: 0, actualCount: 0};\n      files[filePath].expectCount++;\n\n      if (!doc.undocument) {\n        actualCount++;\n        files[filePath].actualCount++;\n      }\n    }\n\n    let coverage = {\n      coverage: `${Math.floor(10000 * actualCount / expectCount) / 100 }%`,\n      expectCount: expectCount,\n      actualCount: actualCount,\n      files: files\n    };\n\n    callback(coverage, 'coverage.json');\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "CoverageBuilder",
    "memberof": "src/Publisher/Builder/CoverageBuilder.js",
    "longname": "src/Publisher/Builder/CoverageBuilder.js~CoverageBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/CoverageBuilder.js",
    "importStyle": "CoverageBuilder",
    "description": "Coverage output builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/CoverageBuilder.js~CoverageBuilder",
    "longname": "src/Publisher/Builder/CoverageBuilder.js~CoverageBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(coverage: CoverageObject, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with coverage."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/DocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/DocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport path from 'path';\nimport escape from 'escape-html';\nimport IceCap from 'ice-cap';\nimport {shorten, parseExample} from './util.js';\nimport DocResolver from './DocResolver.js';\nimport NPMUtil from '../../Util/NPMUtil.js';\n\n/**\n * Builder base class.\n */\nexport default class DocBuilder {\n  /**\n   * create instance.\n   * @param {Taffy} data - doc object database.\n   * @param {ESDocConfig} config - esdoc config is used build output.\n   */\n  constructor(data, config) {\n    this._data = data;\n    this._config = config;\n    new DocResolver(this).resolve();\n  }\n\n  /**\n   * execute building output.\n   * @abstract\n   * @param {function} callback - is called with some data.\n   */\n  exec(callback) {\n  }\n\n  /**\n   * find doc object.\n   * @param {...Object} cond - find condition.\n   * @returns {DocObject[]} found doc objects.\n   * @private\n   */\n  _find(...cond) {\n    return this._orderedFind(null, ...cond);\n  }\n\n  /**\n   * fuzzy find doc object by name.\n   * - equal with longname\n   * - equal with name\n   * - include in longname\n   * - include in ancestor\n   *\n   * @param {string} name - target identifier name.\n   * @param {string} [kind] - target kind.\n   * @returns {DocObject[]} found doc objects.\n   * @private\n   */\n  _findByName(name, kind = null) {\n    let docs;\n\n    if (kind) {\n      docs = this._orderedFind(null, {longname: name, kind: kind});\n    } else {\n      docs = this._orderedFind(null, {longname: name});\n    }\n    if (docs.length) return docs;\n\n    if (kind) {\n      docs = this._orderedFind(null, {name: name, kind: kind});\n    } else {\n      docs = this._orderedFind(null, {name: name});\n    }\n    if (docs.length) return docs;\n\n    let regexp = new RegExp(`[~]\\\\${name}$`); // if name is `*`, need to escape.\n    if (kind) {\n      docs = this._orderedFind(null, {longname: {regex: regexp}, kind: kind});\n    } else {\n      docs = this._orderedFind(null, {longname: {regex: regexp}});\n    }\n    if (docs.length) return docs;\n\n    // inherited method?\n    let matched = name.match(/(.*)[.#](.*)$/); // instance method(Foo#bar) or static method(Foo.baz)\n    if (matched) {\n      let parent = matched[1];\n      let childName = matched[2];\n      let parentDoc = this._findByName(parent, 'class')[0];\n      if (parentDoc && parentDoc._custom_extends_chains) {\n        for (let superLongname of parentDoc._custom_extends_chains) {\n          let docs = this._find({memberof: superLongname, name: childName});\n          if (docs.length) return docs;\n        }\n      }\n    }\n\n    return [];\n  }\n\n  /**\n   * find doc objects that is ordered.\n   * @param {string} order - doc objects order(``column asec`` or ``column desc``).\n   * @param {...Object} cond - condition objects\n   * @returns {DocObject[]} found doc objects.\n   * @private\n   */\n  _orderedFind(order, ...cond) {\n    let data = this._data(...cond);\n\n    if (order) {\n      return data.order(order + ', name asec').map(v => v);\n    } else {\n      return data.order('name asec').map(v => v);\n    }\n  }\n\n  /**\n   * read html template.\n   * @param {string} fileName - template file name.\n   * @return {string} html of template.\n   * @private\n   */\n  _readTemplate(fileName) {\n    let filePath = path.resolve(__dirname, `./template/${fileName}`);\n    return fs.readFileSync(filePath, {encoding: 'utf-8'});\n  }\n\n  /**\n   * get target's essential info.\n   * @returns {{title: string, version: string, url: string}}\n   * @private\n   */\n  _getInfo() {\n    let config = this._config;\n    let packageObj = {};\n    if (config.package) {\n      let packagePath = config.package;\n      let json = fs.readFileSync(packagePath, {encoding: 'utf-8'});\n      packageObj = JSON.parse(json);\n    }\n\n    let indexInfo = {\n      title: config.title || packageObj.name,\n      //desc: config.description || packageObj.description,\n      version: config.version || packageObj.version,\n      //url: config.url || packageObj.repository ? packageObj.repository.url : ''\n      url: packageObj.repository ? packageObj.repository.url : ''\n    };\n\n    if (indexInfo.url.indexOf('git@github.com:') === 0) {\n      let matched = indexInfo.url.match(/^git@github\\.com:(.*)\\.git$/);\n      if (matched && matched[1]) {\n        indexInfo.url = `https://github.com/${matched[1]}`;\n      }\n    }\n\n    return indexInfo;\n  }\n\n  /**\n   * build common layout output.\n   * @return {IceCap} layout output.\n   * @private\n   */\n  _buildLayoutDoc() {\n    let info = this._getInfo();\n\n    let ice = new IceCap(this._readTemplate('layout.html'), {autoClose: false});\n\n    let packageObj = NPMUtil.findPackage();\n    if (packageObj) {\n      ice.text('esdocVersion', `(${packageObj.version})`);\n    } else {\n      ice.drop('esdocVersion');\n    }\n\n    if (info.url) {\n      ice.attr('repoURL', 'href', info.url);\n      if (info.url.match(new RegExp('^https?://github.com/'))) {\n        ice.attr('repoURL', 'class', 'repo-url-github');\n      }\n    } else {\n      ice.drop('repoURL');\n    }\n\n    ice.drop('testLink', !this._config.test);\n\n    // see StaticFileBuilder#exec\n    ice.loop('userScript', this._config.scripts || [], (i, userScript, ice)=>{\n      let name = `user/script/${i}-${path.basename(userScript)}`;\n      ice.attr('userScript', 'src', name);\n    });\n\n    ice.loop('userStyle', this._config.styles || [], (i, userStyle, ice)=>{\n      let name = `user/css/${i}-${path.basename(userStyle)}`;\n      ice.attr('userStyle', 'href', name);\n    });\n\n    ice.load('nav', this._buildNavDoc());\n    return ice;\n  }\n\n  /**\n   * build common navigation output.\n   * @return {IceCap} navigation output.\n   * @private\n   */\n  _buildNavDoc() {\n    let html = this._readTemplate('nav.html');\n    let ice = new IceCap(html);\n\n    // class\n    let classDocs = this._find({kind: 'class', interface: false});\n    ice.drop('classWrap', !classDocs.length);\n    ice.loop('classDoc', classDocs, (i, classDoc, ice)=>{\n      ice.load('classDoc', this._buildDocLinkHTML(classDoc.longname));\n    });\n\n    // interface\n    let interfaceDocs = this._find({kind: 'class', interface: true});\n    ice.drop('interfaceWrap', !interfaceDocs.length);\n    ice.loop('interfaceDoc', interfaceDocs, (i, interfaceDoc, ice)=>{\n      ice.load('interfaceDoc', this._buildDocLinkHTML(interfaceDoc.longname));\n    });\n\n    // function\n    let functionDocs = this._find({kind: 'function'});\n    ice.drop('functionWrap', !functionDocs.length);\n    ice.loop('functionDoc', functionDocs, (i, functionDoc, ice)=>{\n      ice.load('functionDoc', this._buildDocLinkHTML(functionDoc.longname));\n    });\n\n    // variable\n    let variableDocs = this._find({kind: 'variable'});\n    ice.drop('variableWrap', !variableDocs.length);\n    ice.loop('variableDoc', variableDocs, (i, variableDoc, ice)=>{\n      ice.load('variableDoc', this._buildDocLinkHTML(variableDoc.longname));\n    });\n\n    // typedef\n    let typedefDocs = this._find({kind: 'typedef'});\n    ice.drop('typedefWrap', !typedefDocs.length);\n    ice.loop('typedefDoc', typedefDocs, (i, typedefDoc, ice)=>{\n      ice.load('typedefDoc', this._buildDocLinkHTML(typedefDoc.longname));\n    });\n\n    // external\n    let externalDocs = this._find({kind: 'external'}).filter(v => !v.builtinExternal);\n    ice.drop('externalWrap', !externalDocs.length);\n    ice.loop('externalDoc', externalDocs, (i, externalDoc, ice)=>{\n      ice.load('externalDoc', this._buildDocLinkHTML(externalDoc.longname));\n    });\n\n    return ice;\n  }\n\n  /**\n   * find doc object for each access.\n   * @param {DocObject} doc - parent doc object.\n   * @param {string} kind - kind property condition.\n   * @param {boolean} isStatic - static property condition\n   * @returns {Array[]} found doc objects.\n   * @property {Array[]} 0 - ['Public', DocObject[]]\n   * @property {Array[]} 1 - ['Protected', DocObject[]]\n   * @property {Array[]} 2 - ['Private', DocObject[]]\n   * @private\n   */\n  _findAccessDocs(doc, kind, isStatic = true) {\n    let cond = {kind, static: isStatic};\n\n    if (doc) cond.memberof = doc.longname;\n\n    switch (kind) {\n      case 'class':\n        cond.interface = false;\n        break;\n      case 'interface':\n        cond.kind = 'class';\n        cond.interface = true;\n        break;\n      case 'member':\n        cond.kind = ['member', 'get', 'set'];\n        break;\n    }\n\n    let publicDocs = this._find(cond, {access: 'public'});\n    let protectedDocs = this._find(cond, {access: 'protected'});\n    let privateDocs = this._find(cond, {access: 'private'});\n    let accessDocs = [['Public', publicDocs], ['Protected', protectedDocs], ['Private', privateDocs]];\n\n    return accessDocs;\n  }\n\n  /**\n   * build summary output html by parent doc.\n   * @param {DocObject} doc - parent doc object.\n   * @param {string} kind - target kind property.\n   * @param {string} title - summary title.\n   * @param {boolean} [isStatic=true] - target static property.\n   * @returns {string} html of summary.\n   * @private\n   */\n  _buildSummaryHTML(doc, kind, title, isStatic = true) {\n    let accessDocs = this._findAccessDocs(doc, kind, isStatic);\n    let html = '';\n    for (let accessDoc of accessDocs) {\n      let docs = accessDoc[1];\n      if (!docs.length) continue;\n\n      let prefix = '';\n      if (docs[0].static) prefix = 'Static ';\n      let _title = `${prefix}${accessDoc[0]} ${title}`;\n\n      let result = this._buildSummaryDoc(docs, _title);\n      if (result) {\n        html += result.html;\n      }\n    }\n\n    return html;\n  }\n\n  /**\n   * build summary output html by docs.\n   * @param {DocObject[]} docs - target docs.\n   * @param {string} title - summary title.\n   * @param {boolean} innerLink - if true, link in summary is inner link.\n   * @return {IceCap} summary output.\n   * @private\n   */\n  _buildSummaryDoc(docs, title, innerLink) {\n    if (docs.length === 0) return;\n\n    let ice = new IceCap(this._readTemplate('summary.html'));\n\n    ice.text('title', title);\n    ice.loop('target', docs, (i, doc, ice)=>{\n      ice.text('generator', doc.generator ? '*' : '');\n      ice.load('name', this._buildDocLinkHTML(doc.longname, null, innerLink, doc.kind));\n      ice.load('signature', this._buildSignatureHTML(doc));\n      ice.load('description', shorten(doc));\n      ice.text('abstract', doc.abstract ? 'abstract' : '');\n      ice.text('access', doc.access);\n      if (['get', 'set'].includes(doc.kind)) {\n        ice.text('kind', doc.kind);\n      } else {\n        ice.drop('kind');\n      }\n\n      if (['member', 'method', 'get', 'set'].includes(doc.kind)) {\n        ice.text('static', doc.static ? 'static' : '');\n      } else {\n        ice.drop('static');\n      }\n\n      ice.text('since', doc.since);\n      ice.load('deprecated', this._buildDeprecatedHTML(doc));\n      ice.load('experimental', this._buildExperimentalHTML(doc));\n      ice.text('version', doc.version);\n    });\n\n    return ice;\n  }\n\n  /**\n   * build detail output html by parent doc.\n   * @param {DocObject} doc - parent doc object.\n   * @param {string} kind - target kind property.\n   * @param {string} title - detail title.\n   * @param {boolean} [isStatic=true] - target static property.\n   * @returns {string} html of detail.\n   * @private\n   */\n  _buildDetailHTML(doc, kind, title, isStatic = true) {\n    let accessDocs = this._findAccessDocs(doc, kind, isStatic);\n    let html = '';\n    for (let accessDoc of accessDocs) {\n      let docs = accessDoc[1];\n      if (!docs.length) continue;\n\n      let prefix = '';\n      if (docs[0].static) prefix = 'Static ';\n      let _title = `${prefix}${accessDoc[0]} ${title}`;\n\n      let result = this._buildDetailDocs(docs, _title);\n      if (result) html += result.html;\n    }\n\n    return html;\n  }\n\n  /**\n   * build detail output html by docs.\n   * @param {DocObject[]} docs - target docs.\n   * @param {string} title - detail title.\n   * @return {IceCap} detail output.\n   * @private\n   */\n  _buildDetailDocs(docs, title) {\n    let ice = new IceCap(this._readTemplate('details.html'));\n\n    ice.text('title', title);\n    ice.drop('title', !docs.length);\n\n    ice.loop('detail', docs, (i, doc, ice)=>{\n      let scope = doc.static ? 'static' : 'instance';\n      ice.attr('anchor', 'id', `${scope}-${doc.kind}-${doc.name}`);\n      ice.text('generator', doc.generator ? '*' : '');\n      ice.text('name', doc.name);\n      ice.load('signature', this._buildSignatureHTML(doc));\n      ice.load('description', doc.description);\n      ice.text('abstract', doc.abstract ? 'abstract' : '');\n      ice.text('access', doc.access);\n      if (['get', 'set'].includes(doc.kind)) {\n        ice.text('kind', doc.kind);\n      } else {\n        ice.drop('kind');\n      }\n      if (doc.export && doc.importPath && doc.importStyle) {\n        let link = this._buildFileDocLinkHTML(doc, doc.importPath);\n        ice.into('importPath', `import ${doc.importStyle} from '${link}'`, (code, ice)=>{\n          ice.load('importPathCode', code);\n        });\n      } else {\n        ice.drop('importPath');\n      }\n\n      if (['member', 'method', 'get', 'set'].includes(doc.kind)) {\n        ice.text('static', doc.static ? 'static' : '');\n      } else {\n        ice.drop('static');\n      }\n\n      ice.load('source', this._buildFileDocLinkHTML(doc, 'source'));\n      ice.text('since', doc.since, 'append');\n      ice.load('deprecated', this._buildDeprecatedHTML(doc));\n      ice.load('experimental', this._buildExperimentalHTML(doc));\n      ice.text('version', doc.version, 'append');\n      ice.load('see', this._buildDocsLinkHTML(doc.see), 'append');\n      ice.load('todo', this._buildDocsLinkHTML(doc.todo), 'append');\n      ice.load('override', this._buildOverrideMethod(doc));\n\n      if (['method', 'constructor', 'function'].indexOf(doc.kind) !== -1) {\n        ice.load('properties', this._buildProperties(doc.params, 'Params:'));\n      } else {\n        ice.load('properties', this._buildProperties(doc.properties, 'Properties:'));\n      }\n\n      // return\n      if (doc.return) {\n        ice.load('returnDescription', doc.return.description);\n        let typeNames = [];\n        for (let typeName of doc.return.types) {\n          typeNames.push(this._buildTypeDocLinkHTML(typeName));\n        }\n        if (typeof doc.return.nullable === 'boolean') {\n          let nullable = doc.return.nullable;\n          ice.load('returnType', typeNames.join(' | ') + ` (nullable: ${nullable})`);\n        } else {\n          ice.load('returnType', typeNames.join(' | '));\n        }\n\n        ice.load('returnProperties', this._buildProperties(doc.properties, 'Return Properties:'));\n      } else {\n        ice.drop('returnParams');\n      }\n\n      // throws\n      if (doc.throws) {\n        ice.loop('throw', doc.throws, (i, exceptionDoc, ice)=>{\n          ice.load('throwName', this._buildDocLinkHTML(exceptionDoc.types[0]));\n          ice.load('throwDesc', exceptionDoc.description);\n        });\n      } else {\n        ice.drop('throwWrap');\n      }\n\n      // fires\n      if (doc.emits) {\n        ice.loop('emit', doc.emits, (i, emitDoc, ice)=>{\n          ice.load('emitName', this._buildDocLinkHTML(emitDoc.types[0]));\n          ice.load('emitDesc', emitDoc.description);\n        });\n      } else {\n        ice.drop('emitWrap');\n      }\n\n      // listens\n      if (doc.listens) {\n        ice.loop('listen', doc.listens, (i, listenDoc, ice)=>{\n          ice.load('listenName', this._buildDocLinkHTML(listenDoc.types[0]));\n          ice.load('listenDesc', listenDoc.description);\n        });\n      } else {\n        ice.drop('listenWrap');\n      }\n\n      // example\n      ice.into('example', doc.examples, (examples, ice)=>{\n        ice.loop('exampleDoc', examples, (i, exampleDoc, ice)=>{\n          let parsed = parseExample(exampleDoc);\n          ice.text('exampleCode', parsed.body);\n          ice.text('exampleCaption', parsed.caption);\n        });\n      });\n\n      // tests\n      ice.into('tests', doc._custom_tests, (tests, ice)=>{\n        ice.loop('test', tests, (i, test, ice)=>{\n          let testDoc = this._find({longname: test})[0];\n          ice.load('test', this._buildFileDocLinkHTML(testDoc, testDoc.testFullDescription));\n        });\n      });\n    });\n\n    return ice;\n  }\n\n  /**\n   * get output html page title. use ``title`` in {@link ESDocConfig}.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} page title.\n   * @private\n   */\n  _getTitle(doc = '') {\n    let name = doc.name || doc.toString();\n\n    if (!name) {\n      if (this._config.title) {\n        return `${this._config.title} API Document`;\n      } else {\n        return 'API Document';\n      }\n    }\n\n    if (this._config.title) {\n      return `${name} | ${this._config.title} API Document`;\n    } else {\n      return `${name} | API Document`;\n    }\n  }\n\n  /**\n   * get base url html page. it is used html base tag.\n   * @param {string} fileName - output file path.\n   * @returns {string} base url.\n   * @private\n   */\n  _getBaseUrl(fileName) {\n    let baseUrl = '../'.repeat(fileName.split('/').length - 1);\n    return baseUrl;\n  }\n\n  /**\n   * gat url of output html page.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} url of output html. it is relative path from output root dir.\n   * @private\n   */\n  _getURL(doc) {\n    let inner = false;\n    if (['variable', 'function', 'member', 'typedef', 'method', 'constructor', 'get', 'set'].includes(doc.kind)) {\n      inner = true\n    }\n\n    if (inner) {\n      let scope = doc.static ? 'static' : 'instance';\n      let fileName = this._getOutputFileName(doc);\n      return `${fileName}#${scope}-${doc.kind}-${doc.name}`;\n    } else {\n      let fileName = this._getOutputFileName(doc);\n      return fileName;\n    }\n  }\n\n  /**\n   * get file name of output html page.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} file name.\n   * @private\n   */\n  _getOutputFileName(doc) {\n    switch (doc.kind) {\n      case 'variable':\n        return 'variable/index.html';\n      case 'function':\n        return 'function/index.html';\n      case 'member': // fall\n      case 'method': // fall\n      case 'constructor': // fall\n      case 'set': // fall\n      case 'get': // fal\n        let parentDoc = this._find({longname: doc.memberof})[0];\n        return this._getOutputFileName(parentDoc);\n      case 'external':\n        return 'external/index.html';\n      case 'typedef':\n        return 'typedef/index.html';\n      case 'class':\n        return `class/${doc.longname}.html`;\n      case 'file':\n        return `file/${doc.longname}.html`;\n      case 'testFile':\n        return `test-file/${doc.longname}.html`;\n      case 'testDescribe':\n        return `test.html`;\n      case 'testIt':\n        return `test.html`;\n      default:\n        throw new Error('DocBuilder: can not resolve file name.');\n    }\n  }\n\n  /**\n   * build html link to file page.\n   * @param {DocObject} doc - target doc object.\n   * @param {string} text - link text.\n   * @returns {string} html of link.\n   * @private\n   */\n  _buildFileDocLinkHTML(doc, text = null) {\n    if (!doc) return '';\n\n    let fileDoc;\n    if (doc.kind === 'file' || doc.kind === 'testFile') {\n      fileDoc = doc;\n    } else {\n      let filePath = doc.longname.split('~')[0];\n      fileDoc = this._find({kind: ['file', 'testFile'], longname: filePath})[0];\n    }\n\n    if (!fileDoc) return '';\n\n    if (!text) text = fileDoc.name;\n\n    if (doc.kind === 'file' || doc.kind === 'testFile') {\n      return `<span><a href=\"${this._getURL(fileDoc)}\">${text}</a></span>`;\n    } else {\n      return `<span><a href=\"${this._getURL(fileDoc)}#lineNumber${doc.lineNumber}\">${text}</a></span>`;\n    }\n  }\n\n  /**\n   * build html link of type.\n   * @param {string} typeName - type name(e.g. ``number[]``, ``Map<number, string}``)\n   * @returns {string} html of link.\n   * @private\n   * @todo re-implement with parser combinator.\n   */\n  _buildTypeDocLinkHTML(typeName) {\n    // e.g. number[]\n    let matched = typeName.match(/^(.*?)\\[\\]$/);\n    if (matched) {\n      typeName = matched[1];\n      return `<span>${this._buildDocLinkHTML(typeName, typeName)}<span>[]</span></span>`;\n    }\n\n    // e.g. function(a: number, b: string): boolean\n    matched = typeName.match(/function\\((.*?)\\)(.*)/);\n    if (matched) {\n      let functionLink = this._buildDocLinkHTML('function');\n      if (!matched[1] && !matched[2]) return `<span>${functionLink}<span>()</span></span>`;\n\n      let innerTypes = [];\n      if (matched[1]) {\n        // bad hack: Map.<string, boolean> => Map.<string\\Z boolean>\n        // bad hack: {a: string, b: boolean} => {a\\Y string\\Z b\\Y boolean}\n        let inner = matched[1]\n          .replace(/<.*?>/g, (a)=> a.replace(/,/g, '\\\\Z'))\n          .replace(/{.*?}/g, (a)=> a.replace(/,/g, '\\\\Z').replace(/:/g, '\\\\Y'));\n        innerTypes = inner.split(',').map((v)=>{\n          let tmp = v.split(':').map((v)=> v.trim());\n          let paramName = tmp[0];\n          let typeName = tmp[1].replace(/\\\\Z/g, ',').replace(/\\\\Y/g, ':');\n          return `${paramName}: ${this._buildTypeDocLinkHTML(typeName)}`;\n        });\n      }\n\n      let returnType = '';\n      if (matched[2]) {\n        let type = matched[2].split(':')[1];\n        if (type) returnType = ': ' + this._buildTypeDocLinkHTML(type.trim());\n      }\n\n      return `<span>${functionLink}<span>(${innerTypes.join(', ')})</span>${returnType}</span>`;\n    }\n\n    // e.g. {a: number, b: string}\n    matched = typeName.match(/^\\{(.*?)\\}$/);\n    if (matched) {\n      if (!matched[1]) return '{}';\n\n      // bad hack: Map.<string, boolean> => Map.<string\\Z boolean>\n      // bad hack: {a: string, b: boolean} => {a\\Y string\\Z b\\Y boolean}\n      let inner = matched[1]\n        .replace(/<.*?>/g, (a)=> a.replace(/,/g, '\\\\Z'))\n        .replace(/{.*?}/g, (a)=> a.replace(/,/g, '\\\\Z').replace(/:/g, '\\\\Y'));\n      let innerTypes = inner.split(',').map((v)=>{\n        let tmp = v.split(':').map((v)=> v.trim());\n        let paramName = tmp[0];\n        let typeName = tmp[1].replace(/\\\\Z/g, ',').replace(/\\\\Y/g, ':');\n        return `${paramName}: ${this._buildTypeDocLinkHTML(typeName)}`;\n      });\n\n      return `{${innerTypes.join(', ')}}`;\n    }\n\n    // e.g. Map<number, string>\n    matched = typeName.match(/^(.*?)\\.?<(.*?)>$/);\n    if (matched) {\n      let mainType = matched[1];\n      // bad hack: Map.<string, boolean> => Map.<string\\Z boolean>\n      // bad hack: {a: string, b: boolean} => {a\\Y string\\Z b\\Y boolean}\n      let inner = matched[2]\n        .replace(/<.*?>/g, (a)=> a.replace(/,/g, '\\\\Z'))\n        .replace(/{.*?}/g, (a)=> a.replace(/,/g, '\\\\Z').replace(/:/g, '\\\\Y'));\n      let innerTypes = inner.split(',').map((v) => {\n        v = v.trim().replace(/\\\\Z/g, ',').replace(/\\\\Y/g, ':');\n        return this._buildTypeDocLinkHTML(v);\n      });\n\n      let html = `${this._buildDocLinkHTML(mainType, mainType)}<${innerTypes.join(', ')}>`;\n      return html;\n    }\n\n    if (typeName.indexOf('...') === 0) {\n      typeName = typeName.replace('...', '');\n      return '...' + this._buildDocLinkHTML(typeName);\n    } else {\n      return this._buildDocLinkHTML(typeName);\n    }\n  }\n\n  /**\n   * build html link to identifier.\n   * @param {string} longname - link to this.\n   * @param {string} [text] - link text. default is name property of doc object.\n   * @param {boolean} [inner=false] - if true, use inner link.\n   * @param {string} [kind] - specify target kind property.\n   * @returns {string} html of link.\n   * @private\n   */\n  _buildDocLinkHTML(longname, text = null, inner = false, kind = null) {\n    if (!longname) return '';\n\n    if (typeof longname !== 'string') throw new Error(JSON.stringify(longname));\n\n    let doc = this._findByName(longname, kind)[0];\n\n    if (!doc) {\n      // if longname is HTML tag, not escape.\n      if (longname.indexOf('<') === 0) {\n        return `<span>${longname}</span>`;\n      } else {\n        return `<span>${escape(text || longname)}</span>`;\n      }\n    }\n\n    if (doc.kind === 'external') {\n      text = doc.name;\n      return `<span><a href=\"${doc.externalLink}\">${text}</a></span>`;\n    } else {\n      text = escape(text || doc.name);\n      let url = this._getURL(doc, inner);\n      if (url) {\n        return `<span><a href=\"${url}\">${text}</a></span>`;\n      } else {\n        return `<span>${text}</span>`;\n      }\n    }\n  }\n\n  /**\n   * build html links to identifiers\n   * @param {string[]} longnames - link to these.\n   * @param {string} [text] - link text. default is name property of doc object.\n   * @param {boolean} [inner=false] - if true, use inner link.\n   * @param {string} [separator='\\n'] - used link separator.\n   * @returns {string} html links.\n   * @private\n   */\n  _buildDocsLinkHTML(longnames, text = null, inner = false, separator = '\\n') {\n    if (!longnames) return '';\n    if (!longnames.length) return '';\n\n    let links = [];\n    for (var longname of longnames) {\n      if (!longname) continue;\n      let link = this._buildDocLinkHTML(longname, text, inner);\n      links.push(`<li>${link}</li>`);\n    }\n\n    if (!links.length) return '';\n\n    return `<ul>${links.join(separator)}</ul>`;\n  }\n\n  /**\n   * build identifier signature html.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} signature html.\n   * @private\n   */\n  _buildSignatureHTML(doc) {\n    // call signature\n    let callSignatures = [];\n    if (doc.params) {\n      for (let param of doc.params) {\n        let paramName = param.name;\n        if (paramName.indexOf('.') !== -1) continue;\n\n        let types = [];\n        for (let typeName of param.types) {\n          types.push(this._buildTypeDocLinkHTML(typeName));\n        }\n\n        callSignatures.push(`${paramName}: ${types.join(' | ')}`);\n      }\n    }\n\n    // return signature\n    let returnSignatures = [];\n    if (doc.return) {\n      for (let typeName of doc.return.types) {\n        returnSignatures.push(this._buildTypeDocLinkHTML(typeName));\n      }\n    }\n\n    // type signature\n    let typeSignatures = [];\n    if (doc.type) {\n      for (let typeName of doc.type.types) {\n        typeSignatures.push(this._buildTypeDocLinkHTML(typeName));\n      }\n    }\n\n    // callback is not need type. because type is always function.\n    if (doc.kind === 'function') {\n      typeSignatures = [];\n    }\n\n    let html = '';\n    if (callSignatures.length) {\n      html = `(${callSignatures.join(', ')})`;\n    } else if (['function', 'method'].includes(doc.kind)) {\n      html = '()';\n    }\n    if (returnSignatures.length) html = `${html}: ${returnSignatures.join(' | ')}`;\n    if (typeSignatures.length) html = `${html}: ${typeSignatures.join(' | ')}`;\n\n    return html;\n  }\n\n  /**\n   * build properties output.\n   * @param {ParsedParam[]} [properties=[]] - properties in doc object.\n   * @param {string} title - output title.\n   * @return {IceCap} built properties output.\n   * @private\n   */\n  _buildProperties(properties = [], title = 'Properties:') {\n    let ice = new IceCap(this._readTemplate('properties.html'));\n\n    ice.text('title', title);\n\n    ice.loop('property', properties, (i, prop, ice)=>{\n      ice.autoDrop = false;\n      ice.attr('property', 'data-depth', prop.name.split('.').length - 1);\n      ice.text('name', prop.name);\n      ice.attr('name', 'data-depth', prop.name.split('.').length - 1);\n      ice.load('description', prop.description);\n\n      let typeNames = [];\n      for (var typeName of prop.types) {\n        typeNames.push(this._buildTypeDocLinkHTML(typeName));\n      }\n      ice.load('type', typeNames.join(' | '));\n\n      // appendix\n      let appendix = [];\n      if (prop.optional) {\n        appendix.push('<li>optional</li>');\n      }\n      if ('defaultValue' in prop) {\n        appendix.push(`<li>default: ${prop.defaultValue}</li>`);\n      }\n      if (typeof prop.nullable === 'boolean') {\n        appendix.push(`<li>nullable: ${prop.nullable}</li>`);\n      }\n      if (appendix.length) {\n        ice.load('appendix', `<ul>${appendix.join('\\n')}</ul>`);\n      } else {\n        ice.text('appendix', '');\n      }\n    });\n\n    if (!properties || properties.length === 0) {\n      ice.drop('properties');\n    }\n\n    return ice;\n  }\n\n  /**\n   * build deprecated html.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} if doc is not deprecated, returns empty.\n   * @private\n   */\n  _buildDeprecatedHTML(doc) {\n    if (doc.deprecated) {\n      let deprecated = [`this ${doc.kind} was deprecated.`];\n      if (typeof doc.deprecated === 'string') deprecated.push(doc.deprecated);\n      return deprecated.join(' ');\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * build experimental html.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} if doc is not experimental, returns empty.\n   * @private\n   */\n  _buildExperimentalHTML(doc) {\n    if (doc.experimental) {\n      let experimental = [`this ${doc.kind} is experimental.`];\n      if (typeof doc.experimental === 'string') experimental.push(doc.experimental);\n      return experimental.join(' ');\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * build method of ancestor class link html.\n   * @param {DocObject} doc - target doc object.\n   * @returns {string} html link. if doc does not override ancestor method, returns empty.\n   * @private\n   */\n  _buildOverrideMethod(doc) {\n    let parentDoc = this._findByName(doc.memberof)[0];\n    if (!parentDoc) return '';\n    if (!parentDoc._custom_extends_chains) return;\n\n    let chains = [...parentDoc._custom_extends_chains].reverse();\n    for (let longname of chains) {\n      let superClassDoc = this._findByName(longname)[0];\n      if (!superClassDoc) continue;\n\n      let superMethodDoc = this._find({name: doc.name, memberof: superClassDoc.longname})[0];\n      if (!superMethodDoc) continue;\n\n      return this._buildDocLinkHTML(superMethodDoc.longname, `${superClassDoc.name}#${superMethodDoc.name}`, true);\n    }\n  }\n\n  /**\n   * build coverage html.\n   * @param {CoverageObject} coverageObj - target coverage object.\n   * @returns {string} html of coverage badge.\n   * @private\n   */\n  _buildCoverageHTML(coverageObj) {\n    let coverage = Math.floor(100 * coverageObj.actualCount / coverageObj.expectCount);\n    let colorClass;\n    if (coverage < 50) {\n      colorClass = 'esdoc-coverage-low';\n    } else if (coverage < 90) {\n      colorClass = 'esdoc-coverage-middle';\n    } else {\n      colorClass = 'esdoc-coverage-high';\n    }\n\n    let html = `<a href=\"https://esdoc.org\" class=\"esdoc-coverage-wrap\">\n    <span class=\"esdoc-coverage-label\">document</span><span class=\"esdoc-coverage-ratio ${colorClass}\">${coverage}%</span>\n    </a>`;\n\n    return html;\n  }\n\n  //_buildAuthorHTML(doc, separator = '\\n') {\n  //  if (!doc.author) return '';\n  //\n  //  var html = [];\n  //  for (var author of doc.author) {\n  //    var matched = author.match(/(.*?) *<(.*?)>/);\n  //    if (matched) {\n  //      var name = matched[1];\n  //      var link = matched[2];\n  //      if (link.indexOf('http') === 0) {\n  //        html.push(`<li><a href=\"${link}\">${name}</a></li>`)\n  //      } else {\n  //        html.push(`<li><a href=\"mailto:${link}\">${name}</a></li>`)\n  //      }\n  //    } else {\n  //      html.push(`<li>${author}</li>`)\n  //    }\n  //  }\n  //\n  //  return `<ul>${html.join(separator)}</ul>`;\n  //}\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DocBuilder",
    "memberof": "src/Publisher/Builder/DocBuilder.js",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/DocBuilder.js",
    "importStyle": "DocBuilder",
    "description": "Builder base class.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Taffy"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "doc object database."
      },
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "esdoc config is used build output."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_data",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_data",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_config",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_config",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with some data."
      }
    ],
    "abstract": true,
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_find",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_find",
    "access": "private",
    "description": "find doc object.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DocObject[]} found doc objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "cond",
        "description": "find condition."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": "found doc objects."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findByName",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_findByName",
    "access": "private",
    "description": "fuzzy find doc object by name.\n- equal with longname\n- equal with name\n- include in longname\n- include in ancestor",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DocObject[]} found doc objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "target identifier name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "kind",
        "description": "target kind."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": "found doc objects."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_orderedFind",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_orderedFind",
    "access": "private",
    "description": "find doc objects that is ordered.",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DocObject[]} found doc objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "order",
        "description": "doc objects order(``column asec`` or ``column desc``)."
      },
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "cond",
        "description": "condition objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DocObject[]"
      ],
      "spread": false,
      "description": "found doc objects."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_readTemplate",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_readTemplate",
    "access": "private",
    "description": "read html template.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "template file name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of template."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getInfo",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_getInfo",
    "access": "private",
    "description": "get target's essential info.",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{title: string, version: string, url: string}}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "{title: string, version: string, url: string}"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildLayoutDoc",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildLayoutDoc",
    "access": "private",
    "description": "build common layout output.",
    "lineNumber": 161,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "layout output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildNavDoc",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildNavDoc",
    "access": "private",
    "description": "build common navigation output.",
    "lineNumber": 204,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "navigation output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_findAccessDocs",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_findAccessDocs",
    "access": "private",
    "description": "find doc object for each access.",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array[]} found doc objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "parent doc object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "kind property condition."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isStatic",
        "description": "static property condition"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "0",
        "description": "['Public', DocObject[]]"
      },
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "1",
        "description": "['Protected', DocObject[]]"
      },
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "2",
        "description": "['Private', DocObject[]]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array[]"
      ],
      "spread": false,
      "description": "found doc objects."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildSummaryHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildSummaryHTML",
    "access": "private",
    "description": "build summary output html by parent doc.",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of summary."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "parent doc object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "target kind property."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "summary title."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "isStatic",
        "description": "target static property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of summary."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildSummaryDoc",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildSummaryDoc",
    "access": "private",
    "description": "build summary output html by docs.",
    "lineNumber": 327,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "docs",
        "description": "target docs."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "summary title."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "innerLink",
        "description": "if true, link in summary is inner link."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "summary output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDetailHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildDetailHTML",
    "access": "private",
    "description": "build detail output html by parent doc.",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of detail."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "parent doc object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "target kind property."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "detail title."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "isStatic",
        "description": "target static property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of detail."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDetailDocs",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildDetailDocs",
    "access": "private",
    "description": "build detail output html by docs.",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "docs",
        "description": "target docs."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "detail title."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "detail output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getTitle",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_getTitle",
    "access": "private",
    "description": "get output html page title. use ``title`` in {@link ESDocConfig}.",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} page title."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "page title."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getBaseUrl",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_getBaseUrl",
    "access": "private",
    "description": "get base url html page. it is used html base tag.",
    "lineNumber": 545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} base url."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "output file path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "base url."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getURL",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_getURL",
    "access": "private",
    "description": "gat url of output html page.",
    "lineNumber": 556,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} url of output html. it is relative path from output root dir."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "url of output html. it is relative path from output root dir."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_getOutputFileName",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_getOutputFileName",
    "access": "private",
    "description": "get file name of output html page.",
    "lineNumber": 578,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} file name."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "file name."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildFileDocLinkHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildFileDocLinkHTML",
    "access": "private",
    "description": "build html link to file page.",
    "lineNumber": 617,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of link."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "link text."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of link."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildTypeDocLinkHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildTypeDocLinkHTML",
    "access": "private",
    "description": "build html link of type.",
    "lineNumber": 646,
    "todo": [
      "re-implement with parser combinator."
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of link."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "``)",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of link."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDocLinkHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildDocLinkHTML",
    "access": "private",
    "description": "build html link to identifier.",
    "lineNumber": 739,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of link."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "longname",
        "description": "link to this."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "text",
        "description": "link text. default is name property of doc object."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "inner",
        "description": "if true, use inner link."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "kind",
        "description": "specify target kind property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of link."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDocsLinkHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildDocsLinkHTML",
    "access": "private",
    "description": "build html links to identifiers",
    "lineNumber": 778,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html links."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "longnames",
        "description": "link to these."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "text",
        "description": "link text. default is name property of doc object."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "inner",
        "description": "if true, use inner link."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'\\n'",
        "defaultRaw": "'\\n'",
        "name": "separator",
        "description": "used link separator."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html links."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildSignatureHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildSignatureHTML",
    "access": "private",
    "description": "build identifier signature html.",
    "lineNumber": 800,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} signature html."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "signature html."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildProperties",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildProperties",
    "access": "private",
    "description": "build properties output.",
    "lineNumber": 857,
    "params": [
      {
        "nullable": null,
        "types": [
          "ParsedParam[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "properties",
        "description": "properties in doc object."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "output title."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "built properties output."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildDeprecatedHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildDeprecatedHTML",
    "access": "private",
    "description": "build deprecated html.",
    "lineNumber": 906,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} if doc is not deprecated, returns empty."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "if doc is not deprecated, returns empty."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildExperimentalHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildExperimentalHTML",
    "access": "private",
    "description": "build experimental html.",
    "lineNumber": 922,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} if doc is not experimental, returns empty."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "if doc is not experimental, returns empty."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildOverrideMethod",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildOverrideMethod",
    "access": "private",
    "description": "build method of ancestor class link html.",
    "lineNumber": 938,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html link. if doc does not override ancestor method, returns empty."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html link. if doc does not override ancestor method, returns empty."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildCoverageHTML",
    "memberof": "src/Publisher/Builder/DocBuilder.js~DocBuilder",
    "longname": "src/Publisher/Builder/DocBuilder.js~DocBuilder#_buildCoverageHTML",
    "access": "private",
    "description": "build coverage html.",
    "lineNumber": 961,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of coverage badge."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "CoverageObject"
        ],
        "spread": false,
        "optional": false,
        "name": "coverageObj",
        "description": "target coverage object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of coverage badge."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/DocResolver.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/DocResolver.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport path from 'path';\nimport {markdown} from './util.js';\n\n/**\n * Resolve various properties in doc object.\n */\nexport default class DocResolver {\n  /**\n   * create instance.\n   * @param {DocBuilder} builder - target doc builder.\n   */\n  constructor(builder) {\n    this._builder = builder;\n    this._data = builder._data;\n  }\n\n  /**\n   * resolve various properties.\n   */\n  resolve() {\n    this._resolveExtendsChain();\n    this._resolveNecessary();\n    this._resolveAccess();\n    this._resolveUnexportIdentifier();\n    this._resolveUndocumentIdentifier();\n    this._resolveDuplication();\n    this._resolveIgnore();\n    this._resolveMarkdown();\n    this._resolveLink();\n    this._resolveTestRelation();\n  }\n\n  /**\n   * resolve ignore property.\n   * remove docs that has ignore property.\n   * @private\n   */\n  _resolveIgnore() {\n    if (this._data.__RESOLVED_IGNORE__) return;\n\n    let docs = this._builder._find({ignore: true});\n    for (let doc of docs) {\n      let longname = doc.longname.replace(/[$]/g, '\\\\$');\n      let regex = new RegExp(`^${longname}[.~#]`);\n      this._data({longname: {regex: regex}}).remove();\n    }\n    this._data({ignore: true}).remove();\n\n    this._data.__RESOLVED_IGNORE__ = true;\n  }\n\n  /**\n   * resolve access property.\n   * if doc does not have access property, the doc is public.\n   * but name is started with '-', the doc is private.\n   * @private\n   */\n  _resolveAccess() {\n    if (this._data.__RESOLVED_ACCESS__) return;\n\n    let config = this._builder._config;\n    let access = config.access || ['public', 'protected', 'private'];\n    let autoPrivate = config.autoPrivate;\n\n    this._data().update(function(){\n      if (!this.access) {\n        if (autoPrivate && this.name.charAt(0) === '_') {\n          /** @ignore */\n          this.access = 'private';\n        } else {\n          this.access = 'public';\n        }\n      }\n\n      if (!access.includes(this.access)) /** @ignore */ this.ignore = true;\n\n      return this;\n    });\n\n    this._data.__RESOLVED_ACCESS__ = true;\n  }\n\n  /**\n   * resolve unexport identifier doc.\n   * doc is added ignore property that is not exported.\n   * @private\n   */\n  _resolveUnexportIdentifier() {\n    if (this._data.__RESOLVED_UNEXPORT_IDENTIFIER__) return;\n\n    let config = this._builder._config;\n    if (!config.unexportIdentifier) {\n      this._data({export: false}).update({ignore: true});\n    }\n\n    this._data.__RESOLVED_UNEXPORT_IDENTIFIER__ = true;\n  }\n\n  /**\n   * resolve undocument identifier doc.\n   * doc is added ignore property that does not have document tag.\n   * @private\n   */\n  _resolveUndocumentIdentifier() {\n    if (this._data.__RESOLVED_UNDOCUMENT_IDENTIFIER__) return;\n\n    if (!this._builder._config.undocumentIdentifier) {\n      this._builder._data({undocument: true}).update({ignore: true});\n    }\n\n    this._data.__RESOLVED_UNDOCUMENT_IDENTIFIER__ = true;\n  }\n\n  /**\n   * resolve description as markdown.\n   * @private\n   */\n  _resolveMarkdown() {\n    if (this._data.__RESOLVED_MARKDOWN__) return;\n\n    function convert(obj) {\n      for (let key of Object.keys(obj)) {\n        let value = obj[key];\n        if (key === 'description' && typeof value === 'string') {\n          obj[key + 'Raw'] = obj[key];\n          obj[key] = markdown(value, false);\n        } else if (typeof value === 'object' && value) {\n          convert(value);\n        }\n      }\n    }\n\n    let docs = this._builder._find();\n    for (let doc of docs) {\n      convert(doc);\n    }\n\n    this._data.__RESOLVED_MARKDOWN__ = true;\n  }\n\n  /**\n   * resolve @link as html link.\n   * @private\n   * @todo resolve all ``description`` property.\n   */\n  _resolveLink() {\n    if(this._data.__RESOLVED_LINK__) return;\n\n    let link = (str)=>{\n      if (!str) return str;\n\n      return str.replace(/\\{@link ([\\w\\#_\\-.:\\~\\/]+)}/g, (str, longname)=>{\n        return this._builder._buildDocLinkHTML(longname, longname);\n      });\n    };\n\n    this._data().each((v)=>{\n      v.description = link(v.description);\n\n      if (v.params) {\n        for (let param of v.params) {\n          param.description = link(param.description);\n        }\n      }\n\n      if (v.return) {\n        v.return.description = link(v.return.description);\n      }\n\n      if (v.throws) {\n        for (let _throw of v.throws) {\n          _throw.description = link(_throw.description);\n        }\n      }\n\n      if (v.see) {\n        for (let i = 0; i < v.see.length; i++) {\n          if (v.see[i].indexOf('{@link') === 0) {\n            v.see[i] = link(v.see[i]);\n          } else if(v.see[i].indexOf('<a href') === 0) {\n            // ignore\n          } else {\n            v.see[i] = `<a href=\"${v.see[i]}\">${v.see[i]}</a>`;\n          }\n        }\n      }\n    });\n\n    this._data.__RESOLVED_LINK__ = true;\n  }\n\n  /**\n   * resolve class extends chain.\n   * add following special property.\n   * - ``_custom_extends_chain``: ancestor class chain.\n   * - ``_custom_direct_subclasses``: class list that direct extends target doc.\n   * - ``_custom_indirect_subclasses``: class list that indirect extends target doc.\n   * - ``_custom_indirect_implements``: class list that target doc indirect implements.\n   * - ``_custom_direct_implemented``: class list that direct implements target doc.\n   * - ``_custom_indirect_implemented``: class list that indirect implements target doc.\n   *\n   * @private\n   */\n  _resolveExtendsChain() {\n    if (this._data.__RESOLVED_EXTENDS_CHAIN__) return;\n\n    let extendsChain = (doc) => {\n      if (!doc.extends) return;\n\n      let selfDoc = doc;\n\n      // traverse super class.\n      let chains = [];\n      while (1) {\n        if (!doc.extends) break;\n\n        let superClassDoc = this._builder._findByName(doc.extends[0])[0];\n        if (superClassDoc) {\n          chains.push(superClassDoc.longname);\n          doc = superClassDoc;\n        } else {\n          chains.push(doc.extends[0]);\n          break;\n        }\n      }\n\n      if (chains.length) {\n        // direct subclass\n        let superClassDoc = this._builder._findByName(chains[0])[0];\n        if (superClassDoc) {\n          if (!superClassDoc._custom_direct_subclasses) superClassDoc._custom_direct_subclasses = [];\n          superClassDoc._custom_direct_subclasses.push(selfDoc.longname);\n        }\n\n        // indirect subclass\n        for (let superClassLongname of chains.slice(1)) {\n          superClassDoc = this._builder._findByName(superClassLongname)[0];\n          if (superClassDoc) {\n            if (!superClassDoc._custom_indirect_subclasses) superClassDoc._custom_indirect_subclasses = [];\n            superClassDoc._custom_indirect_subclasses.push(selfDoc.longname);\n          }\n        }\n\n        // indirect implements and mixes\n        for (let superClassLongname of chains) {\n          superClassDoc = this._builder._findByName(superClassLongname)[0];\n          if (!superClassDoc) continue;\n\n          // indirect implements\n          if (superClassDoc.implements) {\n            if (!selfDoc._custom_indirect_implements) selfDoc._custom_indirect_implements = [];\n            selfDoc._custom_indirect_implements.push(...superClassDoc.implements);\n          }\n\n          // indirect mixes\n          //if (superClassDoc.mixes) {\n          //  if (!selfDoc._custom_indirect_mixes) selfDoc._custom_indirect_mixes = [];\n          //  selfDoc._custom_indirect_mixes.push(...superClassDoc.mixes);\n          //}\n        }\n\n        // extends chains\n        selfDoc._custom_extends_chains = chains.reverse();\n      }\n    };\n\n    let implemented = (doc) =>{\n      let selfDoc = doc;\n\n      // direct implemented (like direct subclass)\n      for (let superClassLongname of selfDoc.implements || []) {\n        let superClassDoc = this._builder._findByName(superClassLongname)[0];\n        if (!superClassDoc) continue;\n        if(!superClassDoc._custom_direct_implemented) superClassDoc._custom_direct_implemented = [];\n        superClassDoc._custom_direct_implemented.push(selfDoc.longname);\n      }\n\n      // indirect implemented (like indirect subclass)\n      for (let superClassLongname of selfDoc._custom_indirect_implements || []) {\n        let superClassDoc = this._builder._findByName(superClassLongname)[0];\n        if (!superClassDoc) continue;\n        if(!superClassDoc._custom_indirect_implemented) superClassDoc._custom_indirect_implemented = [];\n        superClassDoc._custom_indirect_implemented.push(selfDoc.longname);\n      }\n    };\n\n    //var mixed = (doc) =>{\n    //  var selfDoc = doc;\n    //\n    //  // direct mixed (like direct subclass)\n    //  for (var superClassLongname of selfDoc.mixes || []) {\n    //    var superClassDoc = this._builder._find({longname: superClassLongname})[0];\n    //    if (!superClassDoc) continue;\n    //    if(!superClassDoc._custom_direct_mixed) superClassDoc._custom_direct_mixed = [];\n    //    superClassDoc._custom_direct_mixed.push(selfDoc.longname);\n    //  }\n    //\n    //  // indirect mixed (like indirect subclass)\n    //  for (var superClassLongname of selfDoc._custom_indirect_mixes || []) {\n    //    var superClassDoc = this._builder._find({longname: superClassLongname})[0];\n    //    if (!superClassDoc) continue;\n    //    if(!superClassDoc._custom_indirect_mixed) superClassDoc._custom_indirect_mixed = [];\n    //    superClassDoc._custom_indirect_mixed.push(selfDoc.longname);\n    //  }\n    //};\n\n    let docs = this._builder._find({kind: 'class'});\n    for (let doc of docs) {\n      extendsChain(doc);\n      implemented(doc);\n      //mixed(doc);\n    }\n\n    this._data.__RESOLVED_EXTENDS_CHAIN__ = true;\n  }\n\n  /**\n   * resolve necessary identifier.\n   *\n   * ```javascript\n   * class Foo {}\n   *\n   * export default Bar extends Foo {}\n   * ```\n   *\n   * ``Foo`` is not exported, but ``Bar`` extends ``Foo``.\n   * ``Foo`` is necessary.\n   * So, ``Foo`` must be exported by force.\n   *\n   * @private\n   */\n  _resolveNecessary() {\n    let builder = this._builder;\n    this._data({export: false}).update(function() {\n      let doc = this;\n      let childNames = [];\n      if (doc._custom_direct_subclasses) childNames.push(...doc._custom_direct_subclasses);\n      if (doc._custom_indirect_subclasses) childNames.push(...doc._custom_indirect_subclasses);\n      if (doc._custom_direct_implemented) childNames.push(...doc._custom_direct_implemented);\n      if (doc._custom_indirect_implemented) childNames.push(...doc._custom_indirect_implemented);\n\n      for (let childName of childNames) {\n        let childDoc = builder._find({longname: childName})[0];\n        if (!childDoc) continue;\n        if (!childDoc.ignore && childDoc.export) {\n          doc.export = true;\n          return doc;\n        }\n      }\n    });\n  }\n\n  /**\n   * resolve test and identifier relation. add special property.\n   * - ``_custom_tests``: longnames of test doc.\n   * - ``_custom_test_targets``: longnames of identifier.\n   *\n   * @private\n   */\n  _resolveTestRelation() {\n    if (this._data.__RESOLVED_TEST_RELATION__) return;\n\n    let testDocs = this._builder._find({kind: ['testDescribe', 'testIt']});\n    for (let testDoc of testDocs) {\n      let testTargets = testDoc.testTargets;\n      if (!testTargets) continue;\n\n      for (let testTarget of testTargets) {\n        let doc = this._builder._findByName(testTarget)[0];\n        if (doc) {\n          if (!doc._custom_tests) doc._custom_tests = [];\n          doc._custom_tests.push(testDoc.longname);\n\n          if (!testDoc._custom_test_targets) testDoc._custom_test_targets = [];\n          testDoc._custom_test_targets.push([doc.longname, testTarget]);\n        } else {\n          if (!testDoc._custom_test_targets) testDoc._custom_test_targets = [];\n          testDoc._custom_test_targets.push([testTarget, testTarget]);\n        }\n      }\n    }\n\n    // test full description\n    for (let testDoc of testDocs) {\n      let desc = [];\n      let parents = (testDoc.memberof.split('~')[1] || '').split('.');\n      for (let parent of parents) {\n        let doc = this._builder._find({kind: ['testDescribe', 'testIt'], name: parent})[0];\n        if (!doc) continue;\n        desc.push(doc.descriptionRaw);\n      }\n      desc.push(testDoc.descriptionRaw);\n      testDoc.testFullDescription = desc.join(' ');\n    }\n\n    this._data.__RESOLVED_TEST_RELATION__ = true;\n  }\n\n  /**\n   * resolve duplication identifier.\n   * member doc is possible duplication.\n   * other doc is not duplication.\n   * @private\n   */\n  _resolveDuplication() {\n    if (this._data.__RESOLVED_DUPLICATION__) return;\n\n    let docs = this._builder._find({kind: 'member'});\n    let ignoreId = [];\n    for (let doc of docs) {\n      let dup = this._builder._find({longname: doc.longname});\n      if (dup.length > 1) {\n        let ids = dup.map(v => v.___id);\n        ids.sort((a, b)=> {\n          return a < b ? -1 : 1;\n        });\n        ids.shift();\n        ignoreId.push(...ids)\n      }\n    }\n\n    this._data({___id: ignoreId}).update(function(){\n      this.ignore = true;\n      return this;\n    });\n\n    this._data.__RESOLVED_DUPLICATION__ = true;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DocResolver",
    "memberof": "src/Publisher/Builder/DocResolver.js",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/DocResolver.js",
    "importStyle": "DocResolver",
    "description": "Resolve various properties in doc object.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocBuilder"
        ],
        "spread": false,
        "optional": false,
        "name": "builder",
        "description": "target doc builder."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_builder",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_builder",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_data",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_data",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#resolve",
    "access": null,
    "description": "resolve various properties.",
    "lineNumber": 21,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveIgnore",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveIgnore",
    "access": "private",
    "description": "resolve ignore property.\nremove docs that has ignore property.",
    "lineNumber": 39,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveAccess",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveAccess",
    "access": "private",
    "description": "resolve access property.\nif doc does not have access property, the doc is public.\nbut name is started with '-', the doc is private.",
    "lineNumber": 59,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "access",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#access",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "access",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#access",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ignore",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#ignore",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveUnexportIdentifier",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveUnexportIdentifier",
    "access": "private",
    "description": "resolve unexport identifier doc.\ndoc is added ignore property that is not exported.",
    "lineNumber": 89,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveUndocumentIdentifier",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveUndocumentIdentifier",
    "access": "private",
    "description": "resolve undocument identifier doc.\ndoc is added ignore property that does not have document tag.",
    "lineNumber": 105,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveMarkdown",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveMarkdown",
    "access": "private",
    "description": "resolve description as markdown.",
    "lineNumber": 119,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveLink",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveLink",
    "access": "private",
    "description": "resolve @link as html link.",
    "lineNumber": 147,
    "todo": [
      "resolve all ``description`` property."
    ],
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveExtendsChain",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveExtendsChain",
    "access": "private",
    "description": "resolve class extends chain.\nadd following special property.\n- ``_custom_extends_chain``: ancestor class chain.\n- ``_custom_direct_subclasses``: class list that direct extends target doc.\n- ``_custom_indirect_subclasses``: class list that indirect extends target doc.\n- ``_custom_indirect_implements``: class list that target doc indirect implements.\n- ``_custom_direct_implemented``: class list that direct implements target doc.\n- ``_custom_indirect_implemented``: class list that indirect implements target doc.",
    "lineNumber": 205,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveNecessary",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveNecessary",
    "access": "private",
    "description": "resolve necessary identifier.\n\n```javascript\nclass Foo {}\n\nexport default Bar extends Foo {}\n```\n\n``Foo`` is not exported, but ``Bar`` extends ``Foo``.\n``Foo`` is necessary.\nSo, ``Foo`` must be exported by force.",
    "lineNumber": 333,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveTestRelation",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveTestRelation",
    "access": "private",
    "description": "resolve test and identifier relation. add special property.\n- ``_custom_tests``: longnames of test doc.\n- ``_custom_test_targets``: longnames of identifier.",
    "lineNumber": 361,
    "params": [],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_resolveDuplication",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#_resolveDuplication",
    "access": "private",
    "description": "resolve duplication identifier.\nmember doc is possible duplication.\nother doc is not duplication.",
    "lineNumber": 406,
    "params": [],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "ignore",
    "memberof": "src/Publisher/Builder/DocResolver.js~DocResolver",
    "longname": "src/Publisher/Builder/DocResolver.js~DocResolver#ignore",
    "access": null,
    "description": null,
    "lineNumber": 424,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/FileDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/FileDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * File output builder class.\n */\nexport default class FileDocBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(html: string, filePath: string)} callback - is called with each file.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n\n    let docs = this._find({kind: 'file'});\n    for (let doc of docs) {\n      let fileName = this._getOutputFileName(doc);\n      let baseUrl = this._getBaseUrl(fileName);\n      let title = this._getTitle(doc);\n      ice.load('content', this._buildFileDoc(doc), IceCap.MODE_WRITE);\n      ice.attr('baseUrl', 'href', baseUrl, IceCap.MODE_WRITE);\n      ice.text('title', title, IceCap.MODE_WRITE);\n      callback(ice.html, fileName);\n    }\n  }\n\n  /**\n   * build file output html.\n   * @param {DocObject} doc - target file doc object.\n   * @returns {string} html of file page.\n   * @private\n   */\n  _buildFileDoc(doc) {\n    let ice = new IceCap(this._readTemplate('file.html'));\n    ice.text('title', doc.longname);\n    ice.text('content', doc.content);\n    return ice.html;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "FileDocBuilder",
    "memberof": "src/Publisher/Builder/FileDocBuilder.js",
    "longname": "src/Publisher/Builder/FileDocBuilder.js~FileDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/FileDocBuilder.js",
    "importStyle": "FileDocBuilder",
    "description": "File output builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/FileDocBuilder.js~FileDocBuilder",
    "longname": "src/Publisher/Builder/FileDocBuilder.js~FileDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with each file."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildFileDoc",
    "memberof": "src/Publisher/Builder/FileDocBuilder.js~FileDocBuilder",
    "longname": "src/Publisher/Builder/FileDocBuilder.js~FileDocBuilder#_buildFileDoc",
    "access": "private",
    "description": "build file output html.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of file page."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target file doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of file page."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/IdentifiersDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/IdentifiersDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Identifier output builder class.\n */\nexport default class IdentifiersDocBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(html: string, filePath: string)} callback - is called with output.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n    let title = this._getTitle('Index');\n    ice.load('content', this._buildIdentifierDoc());\n    ice.text('title', title, IceCap.MODE_WRITE);\n    callback(ice.html, 'identifiers.html');\n  }\n\n  /**\n   * build identifier output.\n   * @return {IceCap} built output.\n   * @private\n   */\n  _buildIdentifierDoc() {\n    let indexInfo = this._getInfo();\n\n    let ice = new IceCap(this._readTemplate('identifiers.html'));\n\n    ice.text('title', indexInfo.title);\n    ice.text('version', indexInfo.version, 'append');\n    ice.text('url', indexInfo.url);\n    ice.attr('url', 'href', indexInfo.url);\n    ice.text('description', indexInfo.desc);\n\n    ice.load('classSummary', this._buildSummaryHTML(null, 'class', 'Class Summary'), 'append');\n    ice.load('interfaceSummary', this._buildSummaryHTML(null, 'interface', 'Interface Summary'), 'append');\n    ice.load('functionSummary', this._buildSummaryHTML(null, 'function', 'Function Summary'), 'append');\n    ice.load('variableSummary', this._buildSummaryHTML(null, 'variable', 'Variable Summary'), 'append');\n    ice.load('typedefSummary', this._buildSummaryHTML(null, 'typedef', 'Typedef Summary'), 'append');\n\n    return ice;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "IdentifiersDocBuilder",
    "memberof": "src/Publisher/Builder/IdentifiersDocBuilder.js",
    "longname": "src/Publisher/Builder/IdentifiersDocBuilder.js~IdentifiersDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/IdentifiersDocBuilder.js",
    "importStyle": "IdentifiersDocBuilder",
    "description": "Identifier output builder class.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/IdentifiersDocBuilder.js~IdentifiersDocBuilder",
    "longname": "src/Publisher/Builder/IdentifiersDocBuilder.js~IdentifiersDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildIdentifierDoc",
    "memberof": "src/Publisher/Builder/IdentifiersDocBuilder.js~IdentifiersDocBuilder",
    "longname": "src/Publisher/Builder/IdentifiersDocBuilder.js~IdentifiersDocBuilder#_buildIdentifierDoc",
    "access": "private",
    "description": "build identifier output.",
    "lineNumber": 26,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "IceCap"
      ],
      "spread": false,
      "description": "built output."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/IndexDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/IndexDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport path from 'path';\nimport cheerio from 'cheerio';\nimport IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\nimport {markdown} from './util.js';\n\n/**\n * Index output builder class.\n */\nexport default class IndexDocBuilder extends DocBuilder {\n  /**\n   * create instance.\n   * @param {Taffy} data - doc object database.\n   * @param {ESDocConfig} config - use config to build output.\n   * @param {CoverageObject} coverage - use coverage to build output.\n   */\n  constructor(data, config, coverage) {\n    super(data, config);\n    this._coverage = coverage;\n  }\n\n  /**\n   * execute building output.\n   * @param {function(html: string, filePath: string)} callback - is called with output.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n    let title = this._getTitle();\n    ice.load('content', this._buildIndexDoc());\n    ice.text('title', title, IceCap.MODE_WRITE);\n    callback(ice.html, 'index.html');\n  }\n\n  /**\n   * build index output.\n   * @returns {string} html of index output.\n   * @private\n   */\n  _buildIndexDoc() {\n    if (!this._config.index) return 'Please create README.md';\n\n    let indexContent;\n    try {\n      indexContent = fs.readFileSync(this._config.index, {encode: 'utf8'}).toString();\n    } catch (e) {\n      return 'Please create README.md';\n    }\n\n    let html = this._readTemplate('index.html');\n    let ice = new IceCap(html);\n    let ext = path.extname(this._config.index);\n    if (['.md', '.markdown'].includes(ext)) {\n      ice.load('index', markdown(indexContent));\n    } else {\n      ice.load('index', indexContent);\n    }\n\n    let result = ice.html;\n    if (this._config.coverage) {\n      let $ = cheerio.load(result);\n      $('.esdoc-coverage').html(this._buildCoverageHTML(this._coverage));\n      result = $.root().html();\n    }\n\n    return result;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "IndexDocBuilder",
    "memberof": "src/Publisher/Builder/IndexDocBuilder.js",
    "longname": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/IndexDocBuilder.js",
    "importStyle": "IndexDocBuilder",
    "description": "Index output builder class.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder",
    "longname": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Taffy"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "doc object database."
      },
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "use config to build output."
      },
      {
        "nullable": null,
        "types": [
          "CoverageObject"
        ],
        "spread": false,
        "optional": false,
        "name": "coverage",
        "description": "use coverage to build output."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_coverage",
    "memberof": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder",
    "longname": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder#_coverage",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder",
    "longname": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildIndexDoc",
    "memberof": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder",
    "longname": "src/Publisher/Builder/IndexDocBuilder.js~IndexDocBuilder#_buildIndexDoc",
    "access": "private",
    "description": "build index output.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of index output."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of index output."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/SearchIndexBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/SearchIndexBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Search index of identifier builder class.\n */\nexport default class SearchIndexBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(javascript: string, filePath: string)} callback - is called with output.\n   */\n  exec(callback) {\n    let searchIndex = [];\n    let docs = this._find({});\n\n    for (let doc of docs) {\n      let indexText, url, displayText;\n\n      if (doc.importPath) {\n        displayText = `<span>${doc.name}</span> <span class=\"search-result-import-path\">${doc.importPath}</span>`;\n        indexText = `${doc.importPath}~${doc.name}`.toLowerCase();\n        url = this._getURL(doc);\n      } else if (doc.kind === 'testDescribe' || doc.kind === 'testIt') {\n        displayText = doc.testFullDescription;\n        indexText = [...(doc.testTargets || []), ...(doc._custom_test_targets || [])].join(' ').toLowerCase();\n        let filePath = doc.longname.split('~')[0];\n        let fileDoc = this._find({kind: 'testFile', longname: filePath})[0];\n        url = `${this._getURL(fileDoc)}#lineNumber${doc.lineNumber}`;\n      } else {\n        displayText = doc.longname;\n        indexText = displayText.toLowerCase();\n        url = this._getURL(doc);\n      }\n\n      let kind = doc.kind;\n      switch (kind) {\n        case 'constructor':\n          kind = 'method';\n          break;\n        case 'get':\n        case 'set':\n          kind = 'member';\n          break;\n        case 'testDescribe':\n        case 'testIt':\n          kind = 'test';\n          break;\n      }\n\n      searchIndex.push([indexText, url, displayText, kind]);\n    }\n\n    searchIndex.sort((a, b)=>{\n      if (a[2] === b[2]) {\n        return 0;\n      } else if (a[2] < b[2]) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n\n    let javascript = 'window.esdocSearchIndex = ' + JSON.stringify(searchIndex, null, 2);\n\n    callback(javascript, 'script/search_index.js');\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SearchIndexBuilder",
    "memberof": "src/Publisher/Builder/SearchIndexBuilder.js",
    "longname": "src/Publisher/Builder/SearchIndexBuilder.js~SearchIndexBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/SearchIndexBuilder.js",
    "importStyle": "SearchIndexBuilder",
    "description": "Search index of identifier builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/SearchIndexBuilder.js~SearchIndexBuilder",
    "longname": "src/Publisher/Builder/SearchIndexBuilder.js~SearchIndexBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(javascript: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/SingleDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/SingleDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Single output builder class.\n * \"single\" means function, variable, typedef, external, etc...\n */\nexport default class SingleDocBuilder extends DocBuilder {\n  /**\n   * execute building output.\n   * @param {function(html: string, filePath: string)} callback - is called with output.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n    ice.autoClose = false;\n\n    let kinds = ['function', 'variable', 'typedef'];\n    for (let kind of kinds) {\n      let docs = this._find({kind: kind});\n      if (!docs.length) continue;\n      let fileName = this._getOutputFileName(docs[0]);\n      let baseUrl = this._getBaseUrl(fileName);\n      let title = kind.replace(/^(\\w)/, (c)=> c.toUpperCase() );\n      title = this._getTitle(title);\n\n      ice.load('content', this._buildSingleDoc(kind), IceCap.MODE_WRITE);\n      ice.attr('baseUrl', 'href', baseUrl, IceCap.MODE_WRITE);\n      ice.text('title', title, IceCap.MODE_WRITE);\n      callback(ice.html, fileName);\n    }\n  }\n\n  /**\n   * build single output.\n   * @param {string} kind - target kind property.\n   * @returns {string} html of single output\n   * @private\n   */\n  _buildSingleDoc(kind) {\n    let title = kind.replace(/^(\\w)/, (c)=> c.toUpperCase() );\n    let ice = new IceCap(this._readTemplate('single.html'));\n    ice.text('title', title);\n    ice.load('summaries', this._buildSummaryHTML(null, kind, 'Summary'), 'append');\n    ice.load('details', this._buildDetailHTML(null, kind, ''));\n    return ice.html;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SingleDocBuilder",
    "memberof": "src/Publisher/Builder/SingleDocBuilder.js",
    "longname": "src/Publisher/Builder/SingleDocBuilder.js~SingleDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/SingleDocBuilder.js",
    "importStyle": "SingleDocBuilder",
    "description": "Single output builder class.\n\"single\" means function, variable, typedef, external, etc...",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/SingleDocBuilder.js~SingleDocBuilder",
    "longname": "src/Publisher/Builder/SingleDocBuilder.js~SingleDocBuilder#exec",
    "access": null,
    "description": "execute building output.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildSingleDoc",
    "memberof": "src/Publisher/Builder/SingleDocBuilder.js~SingleDocBuilder",
    "longname": "src/Publisher/Builder/SingleDocBuilder.js~SingleDocBuilder#_buildSingleDoc",
    "access": "private",
    "description": "build single output.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of single output"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "target kind property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of single output"
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/SourceDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/SourceDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport fs from 'fs';\nimport IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\nimport {dateForUTC} from './util.js';\n\n/**\n * Source output html builder class.\n */\nexport default class SourceDocBuilder extends DocBuilder {\n  /**\n   * create instance.\n   * @param {Taffy} data - doc object database.\n   * @param {ESDocConfig} config - use config to build output.\n   * @param {CoverageObject} coverage - use coverage to build output.\n   */\n  constructor(data, config, coverage) {\n    super(data, config);\n    this._coverage = coverage;\n  }\n\n  /**\n   * execute building output html.\n   * @param {function(html: string, filePath: string)} callback - is called with output html.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n    let fileName = 'source.html';\n    let baseUrl = this._getBaseUrl(fileName);\n    let title = this._getTitle('Source');\n\n    ice.attr('baseUrl', 'href', baseUrl);\n    ice.load('content', this._buildSourceHTML());\n    ice.text('title', title, IceCap.MODE_WRITE);\n\n    callback(ice.html, fileName);\n  }\n\n  /**\n   * build source list output html.\n   * @returns {string} html of source list.\n   * @private\n   */\n  _buildSourceHTML() {\n    let ice = new IceCap(this._readTemplate('source.html'));\n    let docs = this._find({kind: 'file'});\n    let config = this._config;\n    let useCoverage = this._config.coverage;\n    let coverage;\n    if (useCoverage) coverage = this._coverage.files;\n\n    if (useCoverage) ice.load('coverageBadge', this._buildCoverageHTML(this._coverage));\n    ice.attr('files', 'data-use-coverage', !!useCoverage);\n\n    if (useCoverage) {\n      let actual = this._coverage.actualCount;\n      let expect = this._coverage.expectCount;\n      let coverageCount = `${actual}/${expect}`;\n      ice.text('totalCoverageCount', coverageCount);\n    }\n\n    ice.loop('file', docs, (i, doc, ice)=>{\n      let filePath = doc.longname;\n      let absFilePath = path.resolve(path.dirname(config.source), filePath);\n      let content = fs.readFileSync(absFilePath).toString();\n      let lines = content.split('\\n').length - 1;\n      let stat = fs.statSync(absFilePath);\n      let date = dateForUTC(stat.ctime);\n      let coverageRatio;\n      let coverageCount;\n      if (useCoverage && coverage[filePath]) {\n        let actual = coverage[filePath].actualCount;\n        let expect = coverage[filePath].expectCount;\n        coverageRatio = `${Math.floor(100 * actual / expect)} %`;\n        coverageCount = `${actual}/${expect}`;\n      } else {\n        coverageRatio = '-';\n      }\n\n      let identifierDocs = this._find({\n        longname: {left: `${doc.longname}~`},\n        kind: ['class', 'function', 'variable']});\n      let identifiers = identifierDocs.map(doc =>{\n        return this._buildDocLinkHTML(doc.longname);\n      });\n\n      ice.load('filePath', this._buildFileDocLinkHTML(doc));\n      ice.text('coverage', coverageRatio);\n      ice.text('coverageCount', coverageCount);\n      ice.text('lines', lines);\n      ice.text('updated', date);\n      ice.text('size', `${stat.size} byte`);\n      ice.load('identifier', identifiers.join('\\n') || '-');\n    });\n    return ice.html;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SourceDocBuilder",
    "memberof": "src/Publisher/Builder/SourceDocBuilder.js",
    "longname": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/SourceDocBuilder.js",
    "importStyle": "SourceDocBuilder",
    "description": "Source output html builder class.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder",
    "longname": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Taffy"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "doc object database."
      },
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "use config to build output."
      },
      {
        "nullable": null,
        "types": [
          "CoverageObject"
        ],
        "spread": false,
        "optional": false,
        "name": "coverage",
        "description": "use coverage to build output."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_coverage",
    "memberof": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder",
    "longname": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder#_coverage",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder",
    "longname": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder#exec",
    "access": null,
    "description": "execute building output html.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output html."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildSourceHTML",
    "memberof": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder",
    "longname": "src/Publisher/Builder/SourceDocBuilder.js~SourceDocBuilder#_buildSourceHTML",
    "access": "private",
    "description": "build source list output html.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of source list."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of source list."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/StaticFileBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/StaticFileBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Static file output builder class.\n */\nexport default class StaticFileBuilder extends DocBuilder {\n  /**\n   * execute build output.\n   * @param {function(content: string, filePath: string)} callback - is called with each output.\n   */\n  exec(callback) {\n    callback(path.resolve(__dirname, './template/css'), './css');\n    callback(path.resolve(__dirname, './template/script'), './script');\n    callback(path.resolve(__dirname, './template/image'), './image');\n\n    // see DocBuilder#_buildLayoutDoc\n    let scripts = this._config.scripts || [];\n    for (let i = 0; i < scripts.length; i++) {\n      let userScript = scripts[i];\n      let name = `./user/script/${i}-${path.basename(userScript)}`;\n      callback(userScript, name);\n    }\n\n    let styles = this._config.styles || [];\n    for (let i = 0; i < styles.length; i++) {\n      let userStyle = styles[i];\n      let name = `./user/css/${i}-${path.basename(userStyle)}`;\n      callback(userStyle, name);\n    }\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "StaticFileBuilder",
    "memberof": "src/Publisher/Builder/StaticFileBuilder.js",
    "longname": "src/Publisher/Builder/StaticFileBuilder.js~StaticFileBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/StaticFileBuilder.js",
    "importStyle": "StaticFileBuilder",
    "description": "Static file output builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/StaticFileBuilder.js~StaticFileBuilder",
    "longname": "src/Publisher/Builder/StaticFileBuilder.js~StaticFileBuilder#exec",
    "access": null,
    "description": "execute build output.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(content: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with each output."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/TestDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/TestDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * Test file output html builder class.\n */\nexport default class TestDocBuilder extends DocBuilder {\n  /**\n   * execute building output html.\n   * @param {function(html: string, filePath: string)} callback - is called with output html.\n   */\n  exec(callback) {\n    let testDescribeDoc = this._find({kind: 'testDescribe'})[0];\n    if (!testDescribeDoc) return;\n\n    let ice = this._buildLayoutDoc();\n    let fileName = this._getOutputFileName(testDescribeDoc);\n    let baseUrl = this._getBaseUrl(fileName);\n    let title = this._getTitle('Test');\n\n    ice.load('content', this._buildTestDocHTML());\n    ice.attr('baseUrl', 'href', baseUrl);\n    ice.text('title', title);\n    callback(ice.html, fileName);\n  }\n\n  /**\n   * build whole test file output html.\n   * @returns {string} html of whole test file.\n   * @private\n   */\n  _buildTestDocHTML() {\n    let ice = new IceCap(this._readTemplate('test.html'));\n    let testDescribeHTML = this._buildTestDescribeDocHTML();\n    ice.load('tests', testDescribeHTML);\n    return ice.html;\n  }\n\n  /**\n   * build test describe list html.\n   * @param {number} [depth=0] - test depth.\n   * @param {string} [memberof] - target test.\n   * @returns {string} html of describe list.\n   * @private\n   */\n  _buildTestDescribeDocHTML(depth = 0, memberof = null) {\n    let cond = {kind: 'testDescribe', testDepth: depth};\n    if (memberof) cond.memberof = memberof;\n    let describeDocs = this._orderedFind('testId asec', cond);\n    let padding;\n    let html = '';\n\n    for (let describeDoc of describeDocs) {\n      let ice = new IceCap(this._readTemplate('testDescribe.html'));\n\n      let testCount = this._find({kind: 'testIt', longname: {regex: new RegExp(`^${describeDoc.longname}\\\\.`)}}).length;\n      padding = 10 * (depth + 1);\n      ice.attr('testDescribe', 'data-test-depth', depth);\n      ice.into('testDescribe', describeDoc, (describeDoc, ice)=>{\n        let descriptionHTML = this._buildFileDocLinkHTML(describeDoc, describeDoc.description);\n\n        let testTargetsHTML = [];\n        for (let testTarget of describeDoc._custom_test_targets || []) {\n          testTargetsHTML.push(this._buildDocLinkHTML(testTarget[0], testTarget[1]));\n        }\n        testTargetsHTML = testTargetsHTML.join('\\n') || '-';\n\n        ice.load('testDescription', descriptionHTML);\n        ice.attr('testDescription', 'style', `padding-left: ${padding}px`);\n        ice.load('testTarget', testTargetsHTML);\n        ice.text('testCount', testCount);\n      });\n\n      padding = 10 * (depth + 2);\n      let itDocs = this._orderedFind('testId asec', {kind: 'testIt', testDepth: depth + 1, memberof: describeDoc.longname});\n      ice.loop('testIt', itDocs, (i, itDoc, ice)=>{\n        let descriptionHTML = this._buildFileDocLinkHTML(itDoc, itDoc.description);\n\n        let testTargetsHTML = [];\n        for (let testTarget of itDoc._custom_test_targets || []) {\n          testTargetsHTML.push(this._buildDocLinkHTML(testTarget[0], testTarget[1]));\n        }\n        testTargetsHTML = testTargetsHTML.join('\\n') || '-';\n\n        ice.attr('testIt', 'data-test-depth', depth + 1);\n        ice.load('testDescription', descriptionHTML);\n        ice.attr('testDescription', 'style', `padding-left: ${padding}px`);\n        ice.load('testTarget', testTargetsHTML);\n      });\n\n      let innerDescribeHTML = this._buildTestDescribeDocHTML(depth + 1, describeDoc.longname);\n\n      html += '\\n' + ice.html + '\\n' + innerDescribeHTML;\n    }\n\n    return html;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TestDocBuilder",
    "memberof": "src/Publisher/Builder/TestDocBuilder.js",
    "longname": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/TestDocBuilder.js",
    "importStyle": "TestDocBuilder",
    "description": "Test file output html builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder",
    "longname": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder#exec",
    "access": null,
    "description": "execute building output html.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with output html."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildTestDocHTML",
    "memberof": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder",
    "longname": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder#_buildTestDocHTML",
    "access": "private",
    "description": "build whole test file output html.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of whole test file."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of whole test file."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildTestDescribeDocHTML",
    "memberof": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder",
    "longname": "src/Publisher/Builder/TestDocBuilder.js~TestDocBuilder#_buildTestDescribeDocHTML",
    "access": "private",
    "description": "build test describe list html.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of describe list."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "depth",
        "description": "test depth."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "memberof",
        "description": "target test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of describe list."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/TestFileDocBuilder.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/TestFileDocBuilder.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import IceCap from 'ice-cap';\nimport DocBuilder from './DocBuilder.js';\n\n/**\n * File output html builder class.\n */\nexport default class TestFileDocBuilder extends DocBuilder {\n  /**\n   * execute building output html.\n   * @param {function(html: string, filePath: string)} callback - is called with each output.\n   */\n  exec(callback) {\n    let ice = this._buildLayoutDoc();\n\n    let docs = this._find({kind: 'testFile'});\n    for (let doc of docs) {\n      let fileName = this._getOutputFileName(doc);\n      let baseUrl = this._getBaseUrl(fileName);\n      let title = this._getTitle(doc);\n      ice.load('content', this._buildFileDoc(doc), IceCap.MODE_WRITE);\n      ice.attr('baseUrl', 'href', baseUrl, IceCap.MODE_WRITE);\n      ice.text('title', title, IceCap.MODE_WRITE);\n      callback(ice.html, fileName);\n    }\n  }\n\n  /**\n   * build file output html.\n   * @param {DocObject} doc - target file doc object.\n   * @returns {string} html of file output.\n   * @private\n   */\n  _buildFileDoc(doc) {\n    let ice = new IceCap(this._readTemplate('file.html'));\n    ice.text('title', doc.longname);\n    ice.text('content', doc.content);\n    return ice.html;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "TestFileDocBuilder",
    "memberof": "src/Publisher/Builder/TestFileDocBuilder.js",
    "longname": "src/Publisher/Builder/TestFileDocBuilder.js~TestFileDocBuilder",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/TestFileDocBuilder.js",
    "importStyle": "TestFileDocBuilder",
    "description": "File output html builder class.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/Publisher/Builder/DocBuilder.js~DocBuilder"
    ]
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "exec",
    "memberof": "src/Publisher/Builder/TestFileDocBuilder.js~TestFileDocBuilder",
    "longname": "src/Publisher/Builder/TestFileDocBuilder.js~TestFileDocBuilder#exec",
    "access": null,
    "description": "execute building output html.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "function(html: string, filePath: string)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "is called with each output."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_buildFileDoc",
    "memberof": "src/Publisher/Builder/TestFileDocBuilder.js~TestFileDocBuilder",
    "longname": "src/Publisher/Builder/TestFileDocBuilder.js~TestFileDocBuilder#_buildFileDoc",
    "access": "private",
    "description": "build file output html.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} html of file output."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target file doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html of file output."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/Builder/util.js",
    "memberof": null,
    "longname": "src/Publisher/Builder/util.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import marked from 'marked';\nimport escape from 'escape-html';\n\n/**\n * shorten description.\n * e.g. ``this is JavaScript. this is Java.`` => ``this is JavaScript.``.\n *\n * @param {DocObject} doc - target doc object.\n * @returns {string} shorten description.\n * @todo shorten before process markdown.\n */\nexport function shorten(doc) {\n  if (!doc) return '';\n\n  if (doc.summary) return doc.summary;\n\n  let desc = doc.description;\n  if (!desc) return '';\n\n  let len = desc.length;\n  let inSQuote = false;\n  let inWQuote = false;\n  let inCode = false;\n  for (let i = 0; i < desc.length; i++) {\n    let char1 = desc.charAt(i);\n    let char2 = desc.charAt(i + 1);\n    let char4 = desc.substr(i, 6);\n    let char5 = desc.substr(i, 7);\n    if (char1 === \"'\") inSQuote = !inSQuote;\n    else if (char1 === '\"') inWQuote = !inWQuote;\n    else if (char4 === '<code>') inCode = true;\n    else if (char5 === '</code>') inCode = false;\n\n    if (inSQuote || inCode || inWQuote) continue;\n\n    if (char1 === '.') {\n      if (char2 === ' ' || char2 === '\\n' || char2 === '<') {\n        len = i + 1;\n        break;\n      }\n    } else if (char1 === '\\n') {\n      len = i + 1;\n      break;\n    }\n  }\n\n  return desc.substr(0, len);\n}\n\n/**\n * convert markdown text to html.\n * @param {string} text - markdown text.\n * @param {boolean} [breaks=false] if true, break line. FYI gfm is not breaks.\n * @return {string} html.\n */\nexport function markdown(text, breaks = false) {\n  let compiled = marked(text, {\n    gfm: true,\n    tables: true,\n    breaks: breaks,\n    highlight: function (code) {\n      return `<pre class=\"source-code\"><code class=\"prettyprint\">${escape(code)}</code></pre>`;\n    }\n  });\n\n  return compiled;\n}\n\n/**\n * get UTC date string.\n * @param {Date} date - target date object.\n * @returns {string} UTC date string(yyyy-mm-dd hh:mm:ss)\n */\nexport function dateForUTC(date) {\n  function pad(num, len) {\n    let count = Math.max(0, len - `${num}`.length);\n    return '0'.repeat(count) + num;\n  }\n\n  let year = date.getUTCFullYear();\n  let month = pad(date.getUTCMonth() + 1, 2);\n  let day = pad(date.getUTCDay() + 1, 2);\n  let hours = pad(date.getUTCHours(), 2);\n  let minutes = pad(date.getUTCMinutes(), 2);\n  let seconds = pad(date.getUTCSeconds(), 2);\n\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds} (UTC)`;\n}\n\n/**\n * parse ``@example`` value.\n * ``@example`` value can have ``<caption>`` tag.\n *\n * @param {string} example - target example value.\n * @returns {{body: string, caption: string}} parsed example value.\n */\nexport function parseExample(example) {\n  let body = example;\n  let caption = '';\n\n  let regexp = new RegExp(\"^<caption>(.*?)</caption>\\n\");\n  let matched = example.match(regexp);\n  if (matched) {\n    body = example.replace(regexp, '');\n    caption = matched[1].trim();\n  }\n\n  return {body, caption};\n}\n"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "shorten",
    "memberof": "src/Publisher/Builder/util.js",
    "longname": "src/Publisher/Builder/util.js~shorten",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/util.js",
    "importStyle": "{shorten}",
    "description": "shorten description.\ne.g. ``this is JavaScript. this is Java.`` => ``this is JavaScript.``.",
    "lineNumber": 12,
    "todo": [
      "shorten before process markdown."
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} shorten description."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject"
        ],
        "spread": false,
        "optional": false,
        "name": "doc",
        "description": "target doc object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "shorten description."
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "markdown",
    "memberof": "src/Publisher/Builder/util.js",
    "longname": "src/Publisher/Builder/util.js~markdown",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/util.js",
    "importStyle": "{markdown}",
    "description": "convert markdown text to html.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "markdown text."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "breaks",
        "description": "if true, break line. FYI gfm is not breaks."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "html."
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dateForUTC",
    "memberof": "src/Publisher/Builder/util.js",
    "longname": "src/Publisher/Builder/util.js~dateForUTC",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/util.js",
    "importStyle": "{dateForUTC}",
    "description": "get UTC date string.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} UTC date string(yyyy-mm-dd hh:mm:ss)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": "target date object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "UTC date string(yyyy-mm-dd hh:mm:ss)"
    },
    "generator": false
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseExample",
    "memberof": "src/Publisher/Builder/util.js",
    "longname": "src/Publisher/Builder/util.js~parseExample",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/Builder/util.js",
    "importStyle": "{parseExample}",
    "description": "parse ``@example`` value.\n``@example`` value can have ``<caption>`` tag.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{body: string, caption: string}} parsed example value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "example",
        "description": "target example value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{body: string, caption: string}"
      ],
      "spread": false,
      "description": "parsed example value."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Publisher/publish.js",
    "memberof": null,
    "longname": "src/Publisher/publish.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs-extra';\nimport path from 'path';\nimport {taffy} from 'taffydb';\nimport IceCap from 'ice-cap';\nimport StaticFileBuilder from './Builder/StaticFileBuilder.js';\nimport IdentifiersDocBuilder from './Builder/IdentifiersDocBuilder.js';\nimport IndexDocBuilder from './Builder/IndexDocBuilder.js';\nimport ClassDocBuilder from './Builder/ClassDocBuilder.js';\nimport SingleDocBuilder from './Builder/SingleDocBuilder.js';\nimport FileDocBuilder from './Builder/FileDocBuilder.js';\nimport SearchIndexBuilder from './Builder/SearchIndexBuilder.js';\nimport CoverageBuilder from './Builder/CoverageBuilder.js';\nimport ASTDocBuilder from './Builder/ASTDocBuilder.js';\nimport SourceDocBuilder from './Builder/SourceDocBuilder.js';\nimport TestDocBuilder from './Builder/TestDocBuilder.js';\nimport TestFileDocBuilder from './Builder/TestFileDocBuilder.js';\n\n/**\n * publish document as HTML.\n * @param {DocObject[]} values - all doc objects.\n * @param {AST[]} asts - all ASTs.\n * @param {ESDocConfig} config - ESDoc config object.\n */\nexport default function publish(values, asts, config) {\n  IceCap.debug = !!config.debug;\n\n  let dumpPath = path.resolve(config.destination, 'dump.json');\n  fs.outputFileSync(dumpPath, JSON.stringify(values, null, 2));\n\n  let data = taffy(values);\n  let _coverage = null;\n\n  function log(text) {\n    console.log(text);\n  }\n\n  function writeHTML(html, fileName) {\n    log(fileName);\n    let filePath = path.resolve(config.destination, fileName);\n    fs.outputFileSync(filePath, html, {encoding: 'utf8'});\n  }\n\n  function writeCoverage(coverage, fileName) {\n    _coverage = coverage;\n    let json = JSON.stringify(coverage, null, 2);\n    let filePath = path.resolve(config.destination, fileName);\n    fs.outputFileSync(filePath, json, {encoding: 'utf8'});\n  }\n\n  function writeAST(astJSON, fileName) {\n    let filePath = path.resolve(config.destination, fileName);\n    fs.outputFileSync(filePath, astJSON, {encoding: 'utf8'});\n  }\n\n  function copy(srcPath, destPath) {\n    log(destPath);\n    fs.copySync(srcPath, path.resolve(config.destination, destPath));\n  }\n\n  if (config.coverage) {\n    new CoverageBuilder(data, config).exec(writeCoverage);\n  }\n\n  new IdentifiersDocBuilder(data, config).exec(writeHTML);\n  new IndexDocBuilder(data, config, _coverage).exec(writeHTML);\n  new ClassDocBuilder(data, config).exec(writeHTML);\n  new SingleDocBuilder(data, config).exec(writeHTML);\n  new FileDocBuilder(data, config).exec(writeHTML);\n  new StaticFileBuilder(data, config).exec(copy);\n  new SearchIndexBuilder(data, config).exec(writeHTML);\n  new ASTDocBuilder(data, asts, config).exec(writeAST);\n  new SourceDocBuilder(data, config, _coverage).exec(writeHTML);\n\n  if (config.test) {\n    new TestDocBuilder(data, config).exec(writeHTML);\n    new TestFileDocBuilder(data, config).exec(writeHTML);\n  }\n\n  if (config.coverage) {\n    console.log('==================================');\n    console.log(`Coverage: ${_coverage.coverage} (${_coverage.actualCount}/${_coverage.expectCount})`);\n    console.log('==================================');\n  }\n};\n"
  },
  {
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "publish",
    "memberof": "src/Publisher/publish.js",
    "longname": "src/Publisher/publish.js~publish",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Publisher/publish.js",
    "importStyle": "publish",
    "description": "publish document as HTML.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocObject[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "all doc objects."
      },
      {
        "nullable": null,
        "types": [
          "AST[]"
        ],
        "spread": false,
        "optional": false,
        "name": "asts",
        "description": "all ASTs."
      },
      {
        "nullable": null,
        "types": [
          "ESDocConfig"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "ESDoc config object."
      }
    ],
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Typedef/typedef.js",
    "memberof": null,
    "longname": "src/Typedef/typedef.js",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "content": "/**\n * ESDoc config object.\n * @typedef {Object} ESDocConfig\n * @property {!string} source - directory path of javascript source code.\n * @property {!string} destination - directory path of output.\n * @property {string} [title]\n * @property {string[]} [includes=[\"\\\\.(js|es6)$\"]]\n * @property {string[]} [excludes=[\"\\\\.config\\\\.(js|es6)$\"]]\n * @property {string[]} [access=[\"public\", \"protected\"]]\n * @property {boolean} [autoPrivate=true]\n * @property {boolean} [builtinExternal=true]\n * @property {boolean} [unexportIdentifier=false]\n * @property {boolean} [undocumentIdentifier=true]\n * @property {boolean} [coverage=true]\n * @property {boolean} [debug=false]\n * @property {string} [index=\"./README.md\"]\n * @property {string} [package=\"./package.json\"]\n * @property {string} [importPathPrefix=\"\"]\n * @property {string[]} [styles=[]]\n * @property {string[]} [scripts=[]]\n * @property {{type: string, source: string, includes: string[], excludes: string[]}} test\n * @see https://esdoc.org/config.html\n */\n\n/**\n * doc comment tag.\n * @typedef {Object} Tag\n * @property {string} tagName\n * @property {*} tagValue\n */\n\n/**\n * Parsed doc comment.\n * @typedef {Object} DocObject\n */\n\n/**\n * @typedef {Object} AST\n * @see https://github.com/estree/estree\n */\n\n/**\n * @typedef {Object} ASTNode\n * @see https://github.com/estree/estree\n * @property {Object} superClass\n */\n\n/**\n * @typedef {Object} NPMPackageObject\n * @see https://docs.npmjs.com/files/package.json\n */\n\n/**\n * @typedef {Object} Taffy\n * @see http://www.taffydb.com/\n */\n\n/**\n * @typedef {Object} IceCap\n * @see https://github.com/h13i32maru/ice-cap\n */\n\n/**\n * @typedef {Object} CoverageObject\n * @property {string} coverage - ratio.\n * @property {number} expectCount - all identifier count.\n * @property {number} actualCount - documented identifier count.\n * @property {Object<string, Object>} files - file name and coverage.\n */\n\n/**\n * ESDocCLI uses argv\n * @typedef {Object} ESDocCLIArgv\n * @property {boolean} [h] - for help\n * @property {boolean} [help] - for help\n * @property {boolean [v] - for version\n * @property {boolean} [version] - for version\n * @property {string} [c] - for config file path\n * @property {string[]} [_] - for source directory path\n */\n\n/**\n * @typedef {Object} DocTypedef\n */\n\n/**\n * @typedef {Object} PackageTypedef\n * @property {Object} repository\n * @property {string} repository.url\n */\n\n/**\n * @typedef {Object} ParsedParam\n * @property {boolean} [nullable]\n * @property {string[]} types\n * @property {boolean} [spread]\n * @property {boolean} [optional]\n * @property {string} [defaultValue]\n * @property {*} [defaultRaw]\n * @property {string} [name]\n * @property {string} [description]\n */\n\n/**\n * @todo remove this typedef.\n * @typedef {Object} IceCapInstanceTypedef\n * @property {function} loop\n * @property {function} attr\n * @property {function} text\n * @property {function} load\n * @property {function} into\n * @property {function} drop\n * @property {string} html\n */\n\n/**\n * @todo remove this typedef.\n * @typedef {Object} TaffyCursor\n * @property {function} each\n */\n"
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ESDocConfig",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~ESDocConfig",
    "access": null,
    "description": "ESDoc config object.",
    "see": [
      "https://esdoc.org/config.html"
    ],
    "properties": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "directory path of javascript source code."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "directory path of output."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "title",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[\"\\\\.(js|es6)$\"]",
        "defaultRaw": [
          "\\.(js|es6)$"
        ],
        "name": "includes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[\"\\\\.config\\\\.(js|es6)$\"]",
        "defaultRaw": [
          "\\.config\\.(js|es6)$"
        ],
        "name": "excludes",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[\"public\",",
        "defaultRaw": "[\"public\",",
        "name": "access",
        "description": "\"protected\"]]"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "autoPrivate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "builtinExternal",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "unexportIdentifier",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "undocumentIdentifier",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "coverage",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "debug",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"./README.md\"",
        "defaultRaw": "./README.md",
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"./package.json\"",
        "defaultRaw": "./package.json",
        "name": "package",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "importPathPrefix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "styles",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "scripts",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{type: string, source: string, includes: string[], excludes: string[]}"
        ],
        "spread": false,
        "optional": false,
        "name": "test",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ESDocConfig"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Tag",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~Tag",
    "access": null,
    "description": "doc comment tag.",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tagName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tagValue",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Tag"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DocObject",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~DocObject",
    "access": null,
    "description": "Parsed doc comment.",
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "DocObject"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "AST",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~AST",
    "access": null,
    "description": null,
    "see": [
      "https://github.com/estree/estree"
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "AST"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ASTNode",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~ASTNode",
    "access": null,
    "description": null,
    "see": [
      "https://github.com/estree/estree"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "superClass",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ASTNode"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "NPMPackageObject",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~NPMPackageObject",
    "access": null,
    "description": null,
    "see": [
      "https://docs.npmjs.com/files/package.json"
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NPMPackageObject"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Taffy",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~Taffy",
    "access": null,
    "description": null,
    "see": [
      "http://www.taffydb.com/"
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Taffy"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "IceCap",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~IceCap",
    "access": null,
    "description": null,
    "see": [
      "https://github.com/h13i32maru/ice-cap"
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "IceCap"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "CoverageObject",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~CoverageObject",
    "access": null,
    "description": null,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "coverage",
        "description": "ratio."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expectCount",
        "description": "all identifier count."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "actualCount",
        "description": "documented identifier count."
      },
      {
        "nullable": null,
        "types": [
          "Object<string, Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "file name and coverage."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "CoverageObject"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ESDocCLIArgv",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~ESDocCLIArgv",
    "access": null,
    "description": "ESDocCLI uses argv",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "h",
        "description": "for help"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "help",
        "description": "for help"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "{boolean",
        "description": "[v] - for version"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "for version"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "c",
        "description": "for config file path"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "name": "_",
        "description": "for source directory path"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ESDocCLIArgv"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DocTypedef",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~DocTypedef",
    "access": null,
    "description": null,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "DocTypedef"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "PackageTypedef",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~PackageTypedef",
    "access": null,
    "description": null,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "repository",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "repository.url",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PackageTypedef"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ParsedParam",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~ParsedParam",
    "access": null,
    "description": null,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "nullable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "spread",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "optional",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "defaultValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "defaultRaw",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "description",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ParsedParam"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "IceCapInstanceTypedef",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~IceCapInstanceTypedef",
    "access": null,
    "description": null,
    "todo": [
      "remove this typedef."
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "loop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "attr",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "load",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "into",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "drop",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "IceCapInstanceTypedef"
    }
  },
  {
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "TaffyCursor",
    "memberof": "src/Typedef/typedef.js",
    "longname": "src/Typedef/typedef.js~TaffyCursor",
    "access": null,
    "description": null,
    "todo": [
      "remove this typedef."
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "each",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TaffyCursor"
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Util/ASTUtil.js",
    "memberof": null,
    "longname": "src/Util/ASTUtil.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import estraverse from 'estraverse';\n\nlet ESTRAVERSE_KEYS = {\n  Super: [],\n  JSXElement: []\n};\n\n/**\n * Utility for AST.\n */\nexport default class ASTUtil {\n  /**\n   * traverse ast nodes.\n   * @param {AST} ast - target AST.\n   * @param {function(node: Object, parent: Object)} callback - this is called with each node.\n   */\n  static traverse(ast, callback) {\n    estraverse.traverse(ast, {\n      enter: function(node, parent) {\n        callback.call(this, node, parent);\n      },\n\n      keys: ESTRAVERSE_KEYS\n    });\n  }\n\n  /**\n   * find file path in import declaration by name.\n   * e.g. can find ``./foo/bar.js`` from ``import Bar from './foo/bar.js'`` by ``Bar``.\n   * @param {AST} ast - target AST.\n   * @param {string} name - identifier name.\n   * @returns {string|null} file path.\n   */\n  static findPathInImportDeclaration(ast, name) {\n    let path = null;\n\n    estraverse.traverse(ast, {\n      enter: function(node, parent) {\n        if (node.type !== 'ImportDeclaration') return;\n\n        for (let spec of node.specifiers) {\n          let localName = spec.local.name;\n          if (localName === name) {\n            path = node.source.value;\n            this.break();\n          }\n        }\n      },\n\n      keys: ESTRAVERSE_KEYS\n    });\n\n    return path;\n  }\n\n  /**\n   * find VariableDeclaration node which has NewExpression.\n   * @param {string} name - variable name.\n   * @param {AST} ast - find in this ast.\n   * @returns {ASTNode|null} found ast node.\n   */\n  static findVariableDeclarationAndNewExpressionNode(name, ast) {\n    for (let node of ast.body) {\n      if (node.type === 'VariableDeclaration' &&\n        node.declarations[0].init.type === 'NewExpression' &&\n        node.declarations[0].id.name === name) {\n        return node;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * find ClassDeclaration node.\n   * @param {string} name - class name.\n   * @param {AST} ast - find in this ast.\n   * @returns {ASTNode|null} found ast node.\n   */\n  static findClassDeclarationNode(name, ast) {\n    for (let node of ast.body) {\n      if (node.type === 'ClassDeclaration' && node.id.name === name) return node;\n    }\n\n    return null;\n  }\n\n  /**\n   * find FunctionDeclaration node.\n   * @param {string} name - function name.\n   * @param {AST} ast - find in this ast.\n   * @returns {ASTNode|null} found ast node.\n   */\n  static findFunctionDeclarationNode(name, ast) {\n    for (let node of ast.body) {\n      if (node.type === 'FunctionDeclaration' && node.id.name === name) return node;\n    }\n\n    return null;\n  }\n\n  /**\n   * find VariableDeclaration node.\n   * @param {string} name - variable name.\n   * @param {AST} ast - find in this ast.\n   * @returns {ASTNode|null} found ast node.\n   */\n  static findVariableDeclarationNode(name, ast) {\n    for (let node of ast.body) {\n      if (node.type === 'VariableDeclaration' && node.declarations[0].id.name === name) return node;\n    }\n\n    return null;\n  }\n\n  /**\n   * create VariableDeclaration node which has NewExpression.\n   * @param {string} name - variable name.\n   * @param {string} className - class name.\n   * @param {Object} loc - location.\n   * @returns {ASTNode} created node.\n   */\n  static createVariableDeclarationAndNewExpressionNode(name, className, loc) {\n    let node = {\n      type: 'VariableDeclaration',\n      kind: 'let',\n      loc: loc,\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: name},\n          init: {type: 'NewExpression', callee: {type: 'Identifier', name: className}}\n        }\n      ]\n    };\n\n    return node;\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "ESTRAVERSE_KEYS",
    "memberof": "src/Util/ASTUtil.js",
    "longname": "src/Util/ASTUtil.js~ESTRAVERSE_KEYS",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Util/ASTUtil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ASTUtil",
    "memberof": "src/Util/ASTUtil.js",
    "longname": "src/Util/ASTUtil.js~ASTUtil",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/ASTUtil.js",
    "importStyle": "ASTUtil",
    "description": "Utility for AST.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "traverse",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.traverse",
    "access": null,
    "description": "traverse ast nodes.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "target AST."
      },
      {
        "nullable": null,
        "types": [
          "function(node: Object, parent: Object)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "this is called with each node."
      }
    ],
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findPathInImportDeclaration",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.findPathInImportDeclaration",
    "access": null,
    "description": "find file path in import declaration by name.\ne.g. can find ``./foo/bar.js`` from ``import Bar from './foo/bar.js'`` by ``Bar``.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|null} file path."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "target AST."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "identifier name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "file path."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findVariableDeclarationAndNewExpressionNode",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.findVariableDeclarationAndNewExpressionNode",
    "access": null,
    "description": "find VariableDeclaration node which has NewExpression.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} found ast node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "variable name."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "find in this ast."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "found ast node."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findClassDeclarationNode",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.findClassDeclarationNode",
    "access": null,
    "description": "find ClassDeclaration node.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} found ast node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "class name."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "find in this ast."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "found ast node."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findFunctionDeclarationNode",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.findFunctionDeclarationNode",
    "access": null,
    "description": "find FunctionDeclaration node.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} found ast node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "function name."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "find in this ast."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "found ast node."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findVariableDeclarationNode",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.findVariableDeclarationNode",
    "access": null,
    "description": "find VariableDeclaration node.",
    "lineNumber": 108,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode|null} found ast node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "variable name."
      },
      {
        "nullable": null,
        "types": [
          "AST"
        ],
        "spread": false,
        "optional": false,
        "name": "ast",
        "description": "find in this ast."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode",
        "null"
      ],
      "spread": false,
      "description": "found ast node."
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "createVariableDeclarationAndNewExpressionNode",
    "memberof": "src/Util/ASTUtil.js~ASTUtil",
    "longname": "src/Util/ASTUtil.js~ASTUtil.createVariableDeclarationAndNewExpressionNode",
    "access": null,
    "description": "create VariableDeclaration node which has NewExpression.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ASTNode} created node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "variable name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "className",
        "description": "class name."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "loc",
        "description": "location."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ASTNode"
      ],
      "spread": false,
      "description": "created node."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Util/InvalidCodeLogger.js",
    "memberof": null,
    "longname": "src/Util/InvalidCodeLogger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs-extra';\n\n/**\n * logger for invalid code which can not be parsed with ESDoc.\n */\nclass InvalidCodeLogger {\n\n  /**\n   * show log.\n   * @param {string} filePath - invalid code in this file.\n   * @param {ASTNode} node - fail parsing node.\n   */\n  show(filePath, node) {\n    let lines = fs.readFileSync(filePath).toString().split('\\n');\n    let targetLines = [];\n    let start;\n    let end = node.loc.start.line;\n\n    if (node.leadingComments && node.leadingComments[0]) {\n      start = node.leadingComments[0].loc.start.line;\n    } else {\n      start = Math.max(0, end - 10);\n    }\n\n    for (let i = start - 1; i < end; i++) {\n      targetLines.push(`${i}| ` + lines[i]);\n    }\n\n    console.log('\u001b[31merror: could not process the following code.\u001b[32m');\n    console.log(filePath);\n    console.log(targetLines.join('\\n'));\n    console.log('\u001b[0m');\n  }\n}\n\n/**\n * singleton for {@link InvalidCodeLogger}\n */\nexport default new InvalidCodeLogger();\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "InvalidCodeLogger",
    "memberof": "src/Util/InvalidCodeLogger.js",
    "longname": "src/Util/InvalidCodeLogger.js~InvalidCodeLogger",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/InvalidCodeLogger.js",
    "importStyle": null,
    "description": "logger for invalid code which can not be parsed with ESDoc.",
    "lineNumber": 6,
    "pseudoExport": true,
    "interface": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "show",
    "memberof": "src/Util/InvalidCodeLogger.js~InvalidCodeLogger",
    "longname": "src/Util/InvalidCodeLogger.js~InvalidCodeLogger#show",
    "access": null,
    "description": "show log.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "invalid code in this file."
      },
      {
        "nullable": null,
        "types": [
          "ASTNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "fail parsing node."
      }
    ],
    "generator": false
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "invalidCodeLogger",
    "memberof": "src/Util/InvalidCodeLogger.js",
    "longname": "src/Util/InvalidCodeLogger.js~invalidCodeLogger",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/InvalidCodeLogger.js",
    "importStyle": "invalidCodeLogger",
    "description": "singleton for {@link InvalidCodeLogger}",
    "lineNumber": 39,
    "type": {
      "types": [
        "src/Util/InvalidCodeLogger.js~InvalidCodeLogger"
      ]
    }
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Util/NPMUtil.js",
    "memberof": null,
    "longname": "src/Util/NPMUtil.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport fs from 'fs-extra';\n\n/**\n * Node Package Manager(npm) util class.\n */\nexport default class NPMUtil {\n\n  /**\n   * find ESDoc package.json object.\n   * @returns {Object} package.json object.\n   */\n  static findPackage() {\n    let packageObj = null;\n    try {\n      let packageFilePath = path.resolve(__dirname, '../../package.json');\n      let json = fs.readFileSync(packageFilePath, {encode: 'utf8'});\n      packageObj = JSON.parse(json);\n    } catch (e) {\n      let packageFilePath = path.resolve(__dirname, '../../../package.json');\n      let json = fs.readFileSync(packageFilePath, {encode: 'utf8'});\n      packageObj = JSON.parse(json);\n    }\n\n    return packageObj;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NPMUtil",
    "memberof": "src/Util/NPMUtil.js",
    "longname": "src/Util/NPMUtil.js~NPMUtil",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/NPMUtil.js",
    "importStyle": "NPMUtil",
    "description": "Node Package Manager(npm) util class.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "findPackage",
    "memberof": "src/Util/NPMUtil.js~NPMUtil",
    "longname": "src/Util/NPMUtil.js~NPMUtil.findPackage",
    "access": null,
    "description": "find ESDoc package.json object.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} package.json object."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "package.json object."
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Util/NamingUtil.js",
    "memberof": null,
    "longname": "src/Util/NamingUtil.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\n\nlet filePathMap = {};\n\nexport default class NamingUtil {\n  static filePathToName(filePath) {\n    let basename = path.basename(filePath).split('.')[0];\n    basename = basename.replace(/[^a-zA-Z0-9_$]/g, '');\n\n    filePathMap[filePath] = filePathMap[filePath] || 0;\n    let count = filePathMap[filePath];\n    if (count > 0) basename += count;\n    filePathMap[filePath]++;\n\n    return basename;\n  }\n}\n"
  },
  {
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "filePathMap",
    "memberof": "src/Util/NamingUtil.js",
    "longname": "src/Util/NamingUtil.js~filePathMap",
    "access": null,
    "export": false,
    "importPath": "esdoc/out/src/Util/NamingUtil.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "NamingUtil",
    "memberof": "src/Util/NamingUtil.js",
    "longname": "src/Util/NamingUtil.js~NamingUtil",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/NamingUtil.js",
    "importStyle": "NamingUtil",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "filePathToName",
    "memberof": "src/Util/NamingUtil.js~NamingUtil",
    "longname": "src/Util/NamingUtil.js~NamingUtil.filePathToName",
    "access": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Util/PathResolver.js",
    "memberof": null,
    "longname": "src/Util/PathResolver.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import path from 'path';\nimport assert from 'assert';\nimport os from 'os';\n\n/**\n * file path resolver.\n * @example\n * let pathResolver = new PathResolver('./src', 'foo/bar.js', 'foo-bar', 'out/foo/bar.js', 'out');\n * pathResolver.importPath; // 'foo-bar'\n * pathResolver.filePath; // 'src/foo/bar.js'\n * pathResolver.resolve('./baz.js'); // 'src/foo/baz.js'\n */\nexport default class PathResolver {\n  /**\n   * create instance.\n   * @param {string} inDirPath - root directory path.\n   * @param {string} filePath - relative file path from root directory path.\n   * @param {string} [packageName] - npm package name.\n   * @param {string} [mainFilePath] - npm main file path.\n   * @param {string} [pathPrefix] - import path prefix.\n   */\n  constructor(inDirPath, filePath, packageName = null, mainFilePath = null, pathPrefix = '') {\n    assert(inDirPath);\n    assert(filePath);\n\n    /** @type {string} */\n    this._inDirPath = path.resolve(inDirPath);\n\n    /** @type {string} */\n    this._filePath = path.resolve(filePath);\n\n    /** @type {NPMPackageObject} */\n    this._packageName = packageName;\n\n    if (mainFilePath) {\n      /** @type {string} */\n      this._mainFilePath = path.resolve(mainFilePath);\n    }\n\n    /** @type {string} */\n    this._pathPrefix = pathPrefix || '';\n\n    if (this._pathPrefix) {\n      /** @type {string} */\n      this._prefixedFilePath = path.resolve(`${this._pathPrefix}${path.sep}${this.filePath}`);\n    } else {\n      this._prefixedFilePath = path.resolve(this.filePath);\n    }\n  }\n\n  /**\n   * import path that is considered package name, main file and path prefix.\n   * @type {string}\n   */\n  get importPath() {\n    if (this._mainFilePath === this._prefixedFilePath) {\n      return this._packageName;\n    }\n\n    let relativeFilePath = this.filePath;\n    let filePath;\n    if (this._packageName) {\n      filePath = path.normalize(`${this._packageName}${path.sep}${this._pathPrefix}${path.sep}${relativeFilePath}`);\n    } else {\n      filePath = `./${relativeFilePath}`;\n    }\n\n    return this._slash(filePath);\n  }\n\n  /**\n   * file full path.\n   * @type {string}\n   */\n  get fileFullPath() {\n    return this._slash(this._filePath);\n  }\n\n  /**\n   * file path that is relative path on root dir.\n   * @type {string}\n   */\n  get filePath() {\n    let relativeFilePath = path.relative(path.dirname(this._inDirPath), this._filePath);\n    return this._slash(relativeFilePath);\n  }\n\n  /**\n   * resolve file path on this file.\n   * @param {string} relativePath - relative path on this file.\n   */\n  resolve(relativePath) {\n    let selfDirPath = path.dirname(this._filePath);\n    let resolvedPath = path.resolve(selfDirPath, relativePath);\n    let resolvedRelativePath = path.relative(path.dirname(this._inDirPath), resolvedPath);\n    return this._slash(resolvedRelativePath);\n  }\n\n  /**\n   * convert 'back slash' to 'slash'.\n   * path separator is 'back slash' if platform is windows.\n   * @param {string} filePath - target file path.\n   * @returns {string} converted path.\n   * @private\n   */\n  _slash(filePath) {\n    if (os.platform() === 'win32') {\n      filePath = filePath.replace(/\\\\/g, '/');\n    }\n\n    return filePath;\n  }\n}\n"
  },
  {
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PathResolver",
    "memberof": "src/Util/PathResolver.js",
    "longname": "src/Util/PathResolver.js~PathResolver",
    "access": null,
    "export": true,
    "importPath": "esdoc/out/src/Util/PathResolver.js",
    "importStyle": "PathResolver",
    "description": "file path resolver.",
    "examples": [
      "let pathResolver = new PathResolver('./src', 'foo/bar.js', 'foo-bar', 'out/foo/bar.js', 'out');\npathResolver.importPath; // 'foo-bar'\npathResolver.filePath; // 'src/foo/bar.js'\npathResolver.resolve('./baz.js'); // 'src/foo/baz.js'"
    ],
    "lineNumber": 13,
    "interface": false
  },
  {
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#constructor",
    "access": null,
    "description": "create instance.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "inDirPath",
        "description": "root directory path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "relative file path from root directory path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "packageName",
        "description": "npm package name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "mainFilePath",
        "description": "npm main file path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pathPrefix",
        "description": "import path prefix."
      }
    ],
    "generator": false
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_inDirPath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_inDirPath",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filePath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_filePath",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_packageName",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_packageName",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "NPMPackageObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_mainFilePath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_mainFilePath",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_pathPrefix",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_pathPrefix",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prefixedFilePath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_prefixedFilePath",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_prefixedFilePath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_prefixedFilePath",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "importPath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#importPath",
    "access": null,
    "description": "import path that is considered package name, main file and path prefix.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "fileFullPath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#fileFullPath",
    "access": null,
    "description": "file full path.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filePath",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#filePath",
    "access": null,
    "description": "file path that is relative path on root dir.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "resolve",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#resolve",
    "access": null,
    "description": "resolve file path on this file.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "relativePath",
        "description": "relative path on this file."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_slash",
    "memberof": "src/Util/PathResolver.js~PathResolver",
    "longname": "src/Util/PathResolver.js~PathResolver#_slash",
    "access": "private",
    "description": "convert 'back slash' to 'slash'.\npath separator is 'back slash' if platform is windows.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} converted path."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "target file path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "converted path."
    },
    "generator": false
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/ClassDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/ClassDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {ClassDocBuilder} */\ndescribe('MyClass1:', ()=> {\n  let doc = readDoc('class/src/MyClass.js~MyClass1.html');\n\n  /** @test {DocBuilder#_getTitle} */\n  it('has document title', ()=>{\n    assert.includes(doc, 'head title', 'MyClass1 | ESDoc Test Fixture API Document');\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has header notice.', ()=>{\n    find(doc, '[data-ice=\"content\"] .header-notice', (doc)=>{\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import MyClass1 from 'esdoc-test-fixture'\");\n      assert.includes(doc, '[data-ice=\"access\"]', 'public');\n      assert.includes(doc, '[data-ice=\"kind\"]', 'class');\n      assert.includes(doc, '[data-ice=\"source\"]', 'source');\n      assert.includes(doc, '[data-ice=\"source\"] a', 'file/src/MyClass.js.html#lineNumber52', 'href');\n      assert.includes(doc, '[data-ice=\"version\"]', 'version 0.0.1');\n      assert.includes(doc, '[data-ice=\"since\"]', 'since 1.2.3');\n    });\n  });\n\n  /**\n   * @test {ClassDocBuilder#_buildClassDoc}\n   * @test {ClassDocBuilder#_buildExtendsChainHTML}\n   * @test {ClassDocBuilder#_buildIndirectSubclassHTML}\n   * @test {ClassDocBuilder#_buildDirectSubclassHTML}\n   */\n  it('has self detail.', ()=>{\n    find(doc, '[data-ice=\"content\"] .self-detail', (doc)=>{\n      assert.includes(doc, '[data-ice=\"name\"]', 'MyClass1');\n\n      assert.includes(doc, '[data-ice=\"extendsChain\"]', 'XMLHttpRequest → SuperMyClass2 → SuperMyClass1 → MyClass1');\n      assert.includes(doc, '[data-ice=\"extendsChain\"] span:nth-of-type(1) a', 'https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest', 'href');\n      assert.includes(doc, '[data-ice=\"extendsChain\"] span:nth-of-type(2) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html', 'href');\n      assert.includes(doc, '[data-ice=\"extendsChain\"] span:nth-of-type(3) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"directSubclass\"]', 'MyClass2');\n      assert.includes(doc, '[data-ice=\"directSubclass\"] span:nth-of-type(1) a', 'class/src/MyClass.js~MyClass2.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"indirectSubclass\"]', 'MyClass3');\n      assert.includes(doc, '[data-ice=\"indirectSubclass\"] span:nth-of-type(1) a', 'class/src/MyClass.js~MyClass3.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"implements\"]', 'MyInterface1, XMLHttpRequest');\n      assert.includes(doc, '[data-ice=\"implements\"] li:nth-of-type(1) a', 'class/src/MyInterface.js~MyInterface1.html', 'href');\n      assert.includes(doc, '[data-ice=\"implements\"] li:nth-of-type(2) a', 'https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest', 'href');\n\n      assert.includes(doc, '[data-ice=\"indirectImplements\"]', 'MyInterface2, MyInterface3');\n      assert.includes(doc, '[data-ice=\"indirectImplements\"] li:nth-of-type(1) a', 'class/src/MyInterface.js~MyInterface2.html', 'href');\n      assert.includes(doc, '[data-ice=\"indirectImplements\"] li:nth-of-type(2) a', 'class/src/MyInterface.js~MyInterface3.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"directImplemented\"]', 'MyClass5');\n      assert.includes(doc, '[data-ice=\"directImplemented\"] span:nth-of-type(1) a', 'class/src/MyClass.js~MyClass5.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"indirectImplemented\"]', 'MyClass6');\n      assert.includes(doc, '[data-ice=\"indirectImplemented\"] span:nth-of-type(1) a', 'class/src/MyClass.js~MyClass6.html', 'href');\n\n      assert.includes(doc, '[data-ice=\"description\"]', 'this is MyClass1 desc.');\n\n      assert.includes(doc, '[data-ice=\"deprecated\"]', 'this class was deprecated. use MyClass1Ex instead of this class.');\n      assert.includes(doc, '[data-ice=\"experimental\"]', 'this class is experimental. this class is dangerous.');\n\n      find(doc, '[data-ice=\"see\"]', (doc)=>{\n        assert.includes(doc, 'li:nth-child(1)', 'http://example.com');\n        assert.includes(doc, 'li:nth-child(1) a', 'http://example.com', 'href');\n\n        assert.includes(doc, 'li:nth-child(2)', 'MyClass2');\n        assert.includes(doc, 'li:nth-child(2) a', 'class/src/MyClass.js~MyClass2.html', 'href');\n\n        assert.includes(doc, 'li:nth-child(3)', 'SuperMyClass1#superMethod');\n        assert.includes(doc, 'li:nth-child(3) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-method-superMethod', 'href');\n      });\n\n      find(doc, '[data-ice=\"todo\"]', (doc)=>{\n        assert.includes(doc, 'li:nth-child(1)', 'this is todo1');\n        assert.includes(doc, 'li:nth-child(2)', 'this is todo2');\n      });\n\n      assert.includes(doc, 'code.lang-html', '<div>text</div>');\n\n      find(doc, '[data-ice=\"exampleDocs\"]', (doc)=>{\n        assert.includes(doc, 'div.example-doc:nth-of-type(1)', 'This is example caption');\n        assert.includes(doc, 'div.example-doc:nth-of-type(1)', 'let foo = 10; let bar = 20;');\n\n        assert.includes(doc, 'div.example-doc:nth-of-type(2)', 'for (let v of values) { let foo = v; }');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has static member summary.', ()=>{\n    find(doc, '[data-ice=\"staticMemberSummary\"]', (doc)=>{\n\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public static p1: number this is static p1 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#static-member-p1', 'href');\n      });\n\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public static get staticValue: number this is staticValue(get) desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#static-get-staticValue', 'href');\n      });\n\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public static set staticValue: number this is staticValue(set) desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#static-set-staticValue', 'href');\n      });\n\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'protected static p2: number this is static p2 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#static-member-p2', 'href');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has static method summary.', ()=>{\n    find(doc, '[data-ice=\"staticMethodSummary\"]', (doc)=>{\n      // public\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public static staticMethod1() this is staticMethod1 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) a', 'class/src/MyClass.js~MyClass1.html#static-method-staticMethod1', 'href');\n      });\n      // protected\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'protected static staticMethod2()');\n      });\n      // private\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(3)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'private static staticMethod3()');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has constructor summary.', ()=>{\n    find(doc, '[data-ice=\"constructorSummary\"]', (doc)=>{\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public constructor(p1: number) this is constructor desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-constructor-constructor', 'href');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has member summary.', ()=>{\n    find(doc, '[data-ice=\"memberSummary\"]', (doc)=>{\n      // public\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        // p1\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public p1: number this is p1 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-member-p1', 'href');\n\n        // p5\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public p5: number');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-member-p5', 'href');\n\n        // p6\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public p6: *');\n\n        // p7\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public p7: *');\n\n        // value\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public get value: number this is value(get) desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-get-value', 'href');\n\n        // value\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6)', 'public set value: number this is value(set) desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-set-value', 'href');\n      });\n\n      // protected\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(2)', (doc)=>{\n        // p2\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'protected p2: number');\n      });\n\n      // private\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(3)', (doc)=>{\n        // p3\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'private p3: number');\n\n        // p4\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'private p4: function');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has method summary.', ()=>{\n    find(doc, '[data-ice=\"methodSummary\"]', (doc)=>{\n      // public\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public abstract method1(p1: number[], p2: number, p3: number, p4: number | string[], p5: number, p6: number, p7: {a: number, b: string}, p8: Object, p9: MyClass2 | MyClass3[] | {a: number, b: string}): Object');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'this method was deprecated.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'this method is experimental.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'this is method1 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"version\"]', 'version 0.0.1');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"since\"]', 'since 1.2.3');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'class/src/MyClass.js~MyClass1.html#instance-method-method1', 'href');\n\n        // undocument identifiers that are auto detected.\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public method5(p1: number, p2: string, p3: *[]): number');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public method6(p1: *)');\n      });\n      // protected\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'protected method2() this is method2 desc.');\n      });\n      // private\n      find(doc, 'table[data-ice=\"summary\"]:nth-of-type(3)', (doc)=>{\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'private _method7() this is auto private.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'private method3() this is method3 desc.');\n        assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'private * method4(): Generator this is method4 desc.');\n      });\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildInheritedSummaryHTML} */\n  it('has inherited summary.', ()=>{\n    find(doc, '[data-ice=\"inheritedSummary\"] [data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public static get ultraStaticValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#static-get-ultraStaticValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public static set ultraStaticValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#static-set-ultraStaticValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public static ultraP1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3) [data-ice=\"name\"] a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#static-member-ultraP1', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public static ultraStaticMethod()');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#static-method-ultraStaticMethod', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public get ultraValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#instance-get-ultraValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6)', 'public set ultraValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#instance-set-ultraValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7)', 'public ultraP1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7) [data-ice=\"name\"] a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#instance-member-ultraP1', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8)', 'public ultraMethod()');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass2.html#instance-method-ultraMethod', 'href');\n    });\n\n    find(doc, '[data-ice=\"inheritedSummary\"] [data-ice=\"summary\"]:nth-of-type(2)', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public static get superStaticValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#static-get-superStaticValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public static set superStaticValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#static-set-superStaticValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public static superP1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3) [data-ice=\"name\"] a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#static-member-superP1', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public static superStaticMethod()');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#static-method-superStaticMethod', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public get superValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-get-superValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6)', 'public set superValue');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-set-superValue', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7)', 'public superP1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7) [data-ice=\"name\"] a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-member-superP1', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8)', 'public method1()');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-method-method1', 'href');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(9)', 'public superMethod()');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(9) a', 'class/src/OtherClass/SuperMyClass.js~SuperMyClass1.html#instance-method-superMethod', 'href');\n    });\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has static member detail.', ()=>{\n    find(doc, '[data-ice=\"staticMemberDetails\"]', (doc)=>{\n      // public\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '#static-member-p1', 'public static p1: number');\n        assert.includes(doc, '[data-ice=\"description\"]', 'this is static p1 desc.');\n      });\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '#static-get-staticValue', 'public static get staticValue: number');\n      });\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(3)', (doc)=>{\n        assert.includes(doc, '#static-set-staticValue', 'public static set staticValue: number');\n      });\n      // protected\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(4)', (doc)=>{\n        assert.includes(doc, '#static-member-p2', 'protected static p2: number');\n      });\n      // private\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(5)', (doc)=>{\n        assert.includes(doc, '#static-member-p3', 'private static p3: number');\n      });\n    })\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has static method detail.', ()=>{\n    find(doc, '[data-ice=\"staticMethodDetails\"]', (doc)=>{\n      // public\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '#static-method-staticMethod1', 'public static staticMethod1');\n        assert.includes(doc, '[data-ice=\"description\"]', 'this is staticMethod1 desc.');\n      });\n      // protected\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '#static-method-staticMethod2', 'protected static staticMethod2');\n      });\n      // private\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(3)', (doc)=>{\n        assert.includes(doc, '#static-method-staticMethod3', 'private static staticMethod3');\n      });\n    })\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has constructor detail.', ()=>{\n    find(doc, '[data-ice=\"constructorDetails\"]', (doc)=>{\n      // public\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '#instance-constructor-constructor', 'public constructor(p1: number)');\n        assert.includes(doc, '#instance-constructor-constructor + [data-ice=\"description\"]', 'this is constructor desc.');\n\n        find(doc, '#instance-constructor-constructor ~ [data-ice=\"properties\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(1)', 'p1 number this is p1 desc.');\n        });\n      });\n    })\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has member detail.', ()=>{\n    find(doc, '[data-ice=\"memberDetails\"]', (doc)=>{\n      // public p1\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '#instance-member-p1', 'public p1: number');\n        assert.includes(doc, '#instance-member-p1 + [data-ice=\"description\"]', 'this is p1 desc.');\n      });\n\n      // public p5\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '#instance-member-p5', 'public p5: number');\n      });\n\n      // public value\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(5)', (doc)=> {\n        assert.includes(doc, '#instance-get-value', 'public get value: number');\n      });\n\n      // public value\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(6)', (doc)=> {\n        assert.includes(doc, '#instance-set-value', 'public set value: number');\n      });\n\n      // protected p2\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(7)', (doc)=>{\n        assert.includes(doc, '#instance-member-p2', 'protected p2: number');\n      });\n\n      // private p3\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(8)', (doc)=>{\n        assert.includes(doc, '#instance-member-p3', 'private p3: number');\n      });\n    })\n  });\n\n  /** @test {ClassDocBuilder#_buildClassDoc} */\n  it('has method detail.', ()=>{\n    find(doc, '[data-ice=\"methodDetails\"]', (doc)=>{\n      // public\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n        assert.includes(doc, '#instance-method-method1', 'public abstract method1(p1: number[], p2: number, p3: number, p4: number | string[], p5: number, p6: number, p7: {a: number, b: string}, p8: Object, p9: MyClass2 | MyClass3[] | {a: number, b: string}): Object');\n        assert.includes(doc, '#instance-method-method1 [data-ice=\"version\"]', 'version 0.0.1');\n        assert.includes(doc, '#instance-method-method1 [data-ice=\"since\"]', 'since 1.2.3');\n        assert.includes(doc, '#instance-method-method1 ~ [data-ice=\"description\"]', 'this is method1 desc.');\n\n        assert.includes(doc, '[data-ice=\"deprecated\"]', 'this method was deprecated.');\n        assert.includes(doc, '[data-ice=\"experimental\"]', 'this method is experimental.');\n\n        find(doc, '#instance-method-method1 ~ [data-ice=\"properties\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(1)', 'p1 number[] this is p1(simple) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(2)', 'p2 number nullable: false this is p2(not nullable) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(3)', 'p3 number nullable: true this is p3(nullable) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(4)', 'p4 number | string[] this is p4(union) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(5)', 'p5 number optional this is p5(optional) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(6)', 'p6 number optional default: 123 this is p6(default) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(7)', 'p7 {a: number, b: string} this is p7(object) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(8)', 'p8 Object this is p8(nest) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(9)', 'p8.a number this is p8.a(nest) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(10)', 'p8.b string this is p8.b(nest) desc.');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(11)', 'p9 MyClass2 | MyClass3[] | {a: number, b: string} nullable: false this is p9(complex) desc. this is second line.');\n        });\n\n        find(doc, '[data-ice=\"returnParams\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"returnType\"]', 'Object');\n          assert.includes(doc, '[data-ice=\"returnDescription\"]', 'this is return desc.');\n\n          find(doc, '[data-ice=\"returnProperties\"]', (doc)=>{\n            assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(1)', 'p1 number this is p1 of return desc.');\n            assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(2)', 'p2 string[] this is p2 of return desc.');\n          });\n        });\n\n        find(doc, '[data-ice=\"see\"]', (doc)=>{\n          assert.includes(doc, 'li:nth-child(1)', 'http://example.com');\n          assert.includes(doc, 'li:nth-child(1) a', 'http://example.com', 'href');\n        });\n\n        find(doc, '[data-ice=\"todo\"]', (doc)=>{\n          assert.includes(doc, 'li:nth-child(1)', 'this is todo1');\n        });\n\n        find(doc, '[data-ice=\"emitWrap\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"emit\"]:nth-of-type(1)', 'MyEvent1 this is emits MyEvent1 desc.');\n          assert.includes(doc, '[data-ice=\"emit\"]:nth-of-type(2)', 'MyEvent2 this is emits MyEvent2 desc.');\n\n          assert.includes(doc, '[data-ice=\"emit\"]:nth-of-type(1) a', 'class/src/MyEvent.js~MyEvent1.html', 'href');\n          assert.includes(doc, '[data-ice=\"emit\"]:nth-of-type(2) a', 'http://example.com', 'href');\n        });\n\n        find(doc, '[data-ice=\"listenWrap\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"listen\"]:nth-of-type(1)', 'MyEvent1 this is listens MyEvent1 desc.');\n          assert.includes(doc, '[data-ice=\"listen\"]:nth-of-type(2)', 'MyEvent2 this is listens MyEvent2 desc.');\n\n          assert.includes(doc, '[data-ice=\"listen\"]:nth-of-type(1) a', 'class/src/MyEvent.js~MyEvent1.html', 'href');\n          assert.includes(doc, '[data-ice=\"listen\"]:nth-of-type(2) a', 'http://example.com', 'href');\n        });\n\n        find(doc, '[data-ice=\"throwWrap\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"throw\"]:nth-of-type(1)', 'MyError1 this is throws MyError1 desc.');\n          assert.includes(doc, '[data-ice=\"throw\"]:nth-of-type(2)', 'MyError2 this is throws MyError2 desc.');\n\n          assert.includes(doc, '[data-ice=\"throw\"]:nth-of-type(1) a', 'class/src/MyError.js~MyError1.html', 'href');\n          assert.includes(doc, '[data-ice=\"throw\"]:nth-of-type(2) a', 'http://example.com', 'href');\n        });\n      });\n\n      // public method5\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=>{\n        assert.includes(doc, '#instance-method-method5', 'public method5(p1: number, p2: string, p3: *[]): number');\n        find(doc, '#instance-method-method5 ~ [data-ice=\"properties\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(1)', 'p1 number optional default: 123');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(2)', 'p2 string optional default: abc');\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(3)', 'p3 *[] optional default: []');\n        });\n\n        find(doc, '[data-ice=\"returnParams\"]', (doc)=> {\n          assert.includes(doc, '[data-ice=\"returnType\"]', 'number');\n        });\n      });\n\n      // public method6\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(3)', (doc)=>{\n        assert.includes(doc, '#instance-method-method6', 'public method6(p1: *)');\n        find(doc, '#instance-method-method6 ~ [data-ice=\"properties\"]', (doc)=>{\n          assert.includes(doc, '[data-ice=\"property\"]:nth-of-type(1)', 'p1 *');\n        });\n      });\n\n      // protected method2\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(4)', (doc)=>{\n        assert.includes(doc, '#instance-method-method2', 'protected method2()');\n      });\n\n      // private _method7\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(5)', (doc)=>{\n        assert.includes(doc, '#instance-method-_method7', 'private _method7()');\n      });\n\n      // private method3\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(6)', (doc)=>{\n        assert.includes(doc, '#instance-method-method3', 'private method3()');\n      });\n\n      // private method4\n      find(doc, '[data-ice=\"detail\"]:nth-of-type(7)', (doc)=>{\n        assert.includes(doc, '#instance-method-method4', 'private * method4(): Generator');\n      });\n    })\n  });\n});\n\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "src/BuilderTest/ClassDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0",
    "access": null,
    "description": "MyClass1:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it1",
    "testId": 1,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it1",
    "access": null,
    "description": "has document title",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_getTitle}"
      }
    ],
    "testTargets": [
      "DocBuilder#_getTitle"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it2",
    "access": null,
    "description": "has header notice.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it3",
    "access": null,
    "description": "has self detail.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      },
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildExtendsChainHTML}"
      },
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildIndirectSubclassHTML}"
      },
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildDirectSubclassHTML}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc",
      "ClassDocBuilder#_buildExtendsChainHTML",
      "ClassDocBuilder#_buildIndirectSubclassHTML",
      "ClassDocBuilder#_buildDirectSubclassHTML"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it4",
    "testId": 4,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it4",
    "access": null,
    "description": "has static member summary.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it5",
    "testId": 5,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it5",
    "access": null,
    "description": "has static method summary.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it6",
    "testId": 6,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it6",
    "access": null,
    "description": "has constructor summary.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it7",
    "access": null,
    "description": "has member summary.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it8",
    "access": null,
    "description": "has method summary.",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it9",
    "access": null,
    "description": "has inherited summary.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildInheritedSummaryHTML}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildInheritedSummaryHTML"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it10",
    "testId": 10,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it10",
    "access": null,
    "description": "has static member detail.",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it11",
    "testId": 11,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it11",
    "access": null,
    "description": "has static method detail.",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it12",
    "access": null,
    "description": "has constructor detail.",
    "lineNumber": 325,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it13",
    "testId": 13,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it13",
    "access": null,
    "description": "has member detail.",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it14",
    "testId": 14,
    "memberof": "src/BuilderTest/ClassDocTest.js~describe0",
    "testDepth": 1,
    "longname": "src/BuilderTest/ClassDocTest.js~describe0.it14",
    "access": null,
    "description": "has method detail.",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/CoverageDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/CoverageDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport {assert} from './../util.js';\n\n/** @test {CoverageBuilder} */\ndescribe('Coverage:', ()=> {\n\n  /** @test {CoverageBuilder#exec} */\n  it('has coverage.json', ()=>{\n    let json = fs.readFileSync('./test/fixture/esdoc/coverage.json', {encoding: 'utf8'}).toString();\n    let coverage = JSON.parse(json);\n    assert.equal(coverage.coverage, '86.32%');\n    assert.equal(coverage.expectCount, 117);\n    assert.equal(coverage.actualCount, 101);\n    assert.deepEqual(coverage.files, {\n      \"src/ForTestDoc/AbstractDoc.js\": {\n        \"expectCount\": 3,\n        \"actualCount\": 0\n      },\n      \"src/ForTestDoc/ClassDoc.js\": {\n        \"expectCount\": 1,\n        \"actualCount\": 0\n      },\n      \"src/ForTestDoc/ClassDocBuilder.js\": {\n        \"expectCount\": 2,\n        \"actualCount\": 0\n      },\n      \"src/MyClass.js\": {\n        \"expectCount\": 37,\n        \"actualCount\": 32\n      },\n      \"src/MyError.js\": {\n        \"expectCount\": 1,\n        \"actualCount\": 1\n      },\n      \"src/MyEvent.js\": {\n        \"expectCount\": 1,\n        \"actualCount\": 1\n      },\n      \"src/Export.js\": {\n        \"expectCount\": 23,\n        \"actualCount\": 23\n      },\n      \"src/MyExpressionExtend.js\": {\n        \"expectCount\": 2,\n        \"actualCount\": 2\n      },\n      \"src/MyInterface.js\": {\n        \"expectCount\": 3,\n        \"actualCount\": 3\n      },\n      \"src/ExtendNest.js\": {\n        \"expectCount\": 2,\n        \"actualCount\": 2\n      },\n      \"src/ReactJSX.js\": {\n        \"expectCount\": 2,\n        \"actualCount\": 2\n      },\n      \"src/OtherClass/SuperMyClass.js\": {\n        \"expectCount\": 19,\n        \"actualCount\": 19\n      },\n      \"src/nMyAnonymous.js\": {\n        \"expectCount\": 4,\n        \"actualCount\": 3\n      },\n      \"src/myFunction.js\": {\n        \"expectCount\": 10,\n        \"actualCount\": 8\n      },\n      \"src/myVariable.js\": {\n        \"expectCount\": 7,\n        \"actualCount\": 5\n      }\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe15",
    "testId": 15,
    "memberof": "src/BuilderTest/CoverageDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/CoverageDocTest.js~describe15",
    "access": null,
    "description": "Coverage:",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CoverageBuilder}"
      }
    ],
    "testTargets": [
      "CoverageBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it16",
    "testId": 16,
    "memberof": "src/BuilderTest/CoverageDocTest.js~describe15",
    "testDepth": 1,
    "longname": "src/BuilderTest/CoverageDocTest.js~describe15.it16",
    "access": null,
    "description": "has coverage.json",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CoverageBuilder#exec}"
      }
    ],
    "testTargets": [
      "CoverageBuilder#exec"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/DocResolverTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/DocResolverTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {DocResolver} */\ndescribe('DocResolver:', ()=>{\n  let docMyClass7 = readDoc('class/src/MyClass.js~MyClass7.html');\n  let docMyClass8 = readDoc('class/src/MyClass.js~MyClass8.html');\n\n  /** @test {DocResolver#_resolveIgnore} */\n  it('does not ignore identifier that does not have @ignore.', ()=>{\n    // MyClass7\n    assert.includes(docMyClass7, '.self-detail [data-ice=\"name\"]', 'MyClass7');\n    find(docMyClass7, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public method1() this is method1 desc.');\n    });\n\n    // MyClass8\n    assert.includes(docMyClass8, '.self-detail [data-ice=\"name\"]', 'MyClass8');\n    find(docMyClass8, 'table[data-ice=\"summary\"]:nth-of-type(1)', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public method1() this is method1 desc.');\n    });\n  });\n\n  /** @test {DocResolver#_resolveIgnore} */\n  it('ignores identifier that have @ignore.', ()=>{\n    try {\n      readDoc('class/src/MyClass.js~MyClass999.html');\n    } catch(e) {\n      assert(e instanceof Error);\n      assert(e.message.includes('no such file or directory'));\n      return;\n    }\n    assert(false, 'unreachable');\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe17",
    "testId": 17,
    "memberof": "src/BuilderTest/DocResolverTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/DocResolverTest.js~describe17",
    "access": null,
    "description": "DocResolver:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocResolver}"
      }
    ],
    "testTargets": [
      "DocResolver"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "src/BuilderTest/DocResolverTest.js~describe17",
    "testDepth": 1,
    "longname": "src/BuilderTest/DocResolverTest.js~describe17.it18",
    "access": null,
    "description": "does not ignore identifier that does not have @ignore.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocResolver#_resolveIgnore}"
      }
    ],
    "testTargets": [
      "DocResolver#_resolveIgnore"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "src/BuilderTest/DocResolverTest.js~describe17",
    "testDepth": 1,
    "longname": "src/BuilderTest/DocResolverTest.js~describe17.it19",
    "access": null,
    "description": "ignores identifier that have @ignore.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocResolver#_resolveIgnore}"
      }
    ],
    "testTargets": [
      "DocResolver#_resolveIgnore"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/ExportDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/ExportDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/**\n * @test {DocFactory#_inspectExportDefaultDeclaration}\n * @test {DocFactory#_inspectExportNamedDeclaration}\n */\ndescribe('Export:', ()=>{\n  describe('MyExport1:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport1.html');\n\n    it('has instance notice.', ()=>{\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import MyExport1 from 'esdoc-test-fixture/out/src/Export.js'\");\n      assert.includes(doc, '.self-detail', 'You can directly use instance of this class. myExport1');\n    });\n  });\n\n  describe('MyExport2:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport2.html');\n\n    it('has instance notice.', ()=>{\n      assert.notIncludes(doc, '[data-ice=\"importPath\"]', \"esdoc-test-fixture/out/src/Export.js\");\n      assert.includes(doc, '.self-detail', 'You can directly use instance of this class. myExport2');\n    });\n  });\n\n  describe('MyExport3:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport3.html');\n\n    it('has instance notice.', ()=>{\n      assert.notIncludes(doc, '[data-ice=\"importPath\"]', \"esdoc-test-fixture/out/src/Export.js\");\n      assert.includes(doc, '.self-detail', 'You can directly use instance of this class. myExport3');\n    });\n  });\n\n  describe('MyExport4:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport4.html');\n\n    it('has instance notice.', ()=>{\n      assert.notIncludes(doc, '[data-ice=\"importPath\"]', \"esdoc-test-fixture/out/src/Export.js\");\n      assert.includes(doc, '.self-detail', 'You can directly use instance of this class. myExport4');\n    });\n  });\n\n  describe('MyExport5:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport5.html');\n\n    it('has instance notice.', ()=>{\n      assert.notIncludes(doc, '[data-ice=\"importPath\"]', \"esdoc-test-fixture/out/src/Export.js\");\n      assert.includes(doc, '.self-detail', 'You can directly use instance of this class. myExport5');\n    });\n  });\n\n  describe('MyExport6:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport6.html');\n\n    it('does not have instance notice.', ()=>{\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {MyExport6} from 'esdoc-test-fixture/out/src/Export.js'\");\n      assert.notIncludes(doc, '.self-detail', 'You can directly use instance of this class.');\n    });\n  });\n\n  describe('MyExport9:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport9.html');\n\n    it('has instance notice.', ()=>{\n      assert.notIncludes(doc, '[data-ice=\"importPath\"]', \"esdoc-test-fixture/out/src/Export.js\");\n      assert.notIncludes(doc, '.self-detail', 'You can directly use instance of this class.');\n    });\n  });\n\n  describe('MyExport99:', ()=>{\n    let doc = readDoc('class/src/Export.js~MyExport99.html');\n\n    it('does not have instance notice.', ()=>{\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {MyExport99} from 'esdoc-test-fixture/out/src/Export.js'\");\n      assert.notIncludes(doc, '.self-detail', 'You can directly use instance of this class.');\n    });\n  });\n});\n\n\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe20",
    "testId": 20,
    "memberof": "src/BuilderTest/ExportDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20",
    "access": null,
    "description": "Export:",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocFactory#_inspectExportDefaultDeclaration}"
      },
      {
        "tagName": "@test",
        "tagValue": "{DocFactory#_inspectExportNamedDeclaration}"
      }
    ],
    "testTargets": [
      "DocFactory#_inspectExportDefaultDeclaration",
      "DocFactory#_inspectExportNamedDeclaration"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe21",
    "testId": 21,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe21",
    "access": null,
    "description": "MyExport1:",
    "lineNumber": 8
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe21",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe21.it22",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 11
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe23",
    "testId": 23,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe23",
    "access": null,
    "description": "MyExport2:",
    "lineNumber": 17
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it24",
    "testId": 24,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe23",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe23.it24",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 20
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe25",
    "testId": 25,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe25",
    "access": null,
    "description": "MyExport3:",
    "lineNumber": 26
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe25",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe25.it26",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 29
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe27",
    "testId": 27,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe27",
    "access": null,
    "description": "MyExport4:",
    "lineNumber": 35
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe27",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe27.it28",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 38
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe29",
    "testId": 29,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe29",
    "access": null,
    "description": "MyExport5:",
    "lineNumber": 44
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it30",
    "testId": 30,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe29",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe29.it30",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 47
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe31",
    "testId": 31,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe31",
    "access": null,
    "description": "MyExport6:",
    "lineNumber": 53
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe31",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe31.it32",
    "access": null,
    "description": "does not have instance notice.",
    "lineNumber": 56
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe33",
    "testId": 33,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe33",
    "access": null,
    "description": "MyExport9:",
    "lineNumber": 62
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it34",
    "testId": 34,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe33",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe33.it34",
    "access": null,
    "description": "has instance notice.",
    "lineNumber": 65
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe35",
    "testId": 35,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe35",
    "access": null,
    "description": "MyExport99:",
    "lineNumber": 71
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "src/BuilderTest/ExportDocTest.js~describe20.describe35",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExportDocTest.js~describe20.describe35.it36",
    "access": null,
    "description": "does not have instance notice.",
    "lineNumber": 74
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/ExpressionExtendsDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/**\n * @test {ClassDocBuilder#_buildMixinClassesHTML}\n * @test {ClassDocBuilder#_buildExpressionExtendsHTML}\n */\ndescribe('ExpressionExtends:', ()=> {\n  describe('Mixin Extends:', ()=>{\n    let doc = readDoc('class/src/MyExpressionExtend.js~MyExpressionExtendClass1.html');\n\n    it('has expression and mixin', ()=> {\n      find(doc, '.self-detail', (doc)=>{\n        assert.includes(doc, '[data-ice=\"expressionExtends\"]', 'Expression Extends:class MyExpressionExtendClass1 extends mix(MyClass1, MyClass2)');\n        assert.includes(doc, '[data-ice=\"mixinExtends\"]', 'Mixin Extends:MyClass1, MyClass2');\n      });\n    });\n  });\n\n  describe('Expression Extends:', ()=>{\n    let doc = readDoc('class/src/MyExpressionExtend.js~MyExpressionExtendClass2.html');\n\n    it('has expression', ()=> {\n      find(doc, '.self-detail', (doc)=>{\n        assert.includes(doc, '[data-ice=\"expressionExtends\"]', 'Expression Extends:class MyExpressionExtendClass2 extends MyClass1(123)');\n        assert.includes(doc, '[data-ice=\"extendsChain\"]', 'XMLHttpRequest → SuperMyClass2 → SuperMyClass1 → MyClass1 → MyExpressionExtendClass2');\n      });\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe37",
    "testId": 37,
    "memberof": "src/BuilderTest/ExpressionExtendsDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37",
    "access": null,
    "description": "ExpressionExtends:",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildMixinClassesHTML}"
      },
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildExpressionExtendsHTML}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildMixinClassesHTML",
      "ClassDocBuilder#_buildExpressionExtendsHTML"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe38",
    "testId": 38,
    "memberof": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe38",
    "access": null,
    "description": "Mixin Extends:",
    "lineNumber": 8
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it39",
    "testId": 39,
    "memberof": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe38",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe38.it39",
    "access": null,
    "description": "has expression and mixin",
    "lineNumber": 11
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe40",
    "testId": 40,
    "memberof": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37",
    "testDepth": 1,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe40",
    "access": null,
    "description": "Expression Extends:",
    "lineNumber": 19
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it41",
    "testId": 41,
    "memberof": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe40",
    "testDepth": 2,
    "longname": "src/BuilderTest/ExpressionExtendsDocTest.js~describe37.describe40.it41",
    "access": null,
    "description": "has expression",
    "lineNumber": 22
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/FileDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/FileDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {FileDocBuilder} */\ndescribe('MyClass.js.html:', ()=> {\n  let doc = readDoc('file/src/MyClass.js.html');\n\n  /**\n   * @test {FileDocBuilder#exec}\n   * @test {FileDocBuilder#_buildFileDoc}\n   */\n  it('has source code.', ()=>{\n    assert.includes(doc, 'body [data-ice=\"title\"]', 'src/MyClass.js');\n    assert.includes(doc, 'code[data-ice=\"content\"]', 'export default class MyClass1 extends SuperMyClass1');\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe42",
    "testId": 42,
    "memberof": "src/BuilderTest/FileDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/FileDocTest.js~describe42",
    "access": null,
    "description": "MyClass.js.html:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{FileDocBuilder}"
      }
    ],
    "testTargets": [
      "FileDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "src/BuilderTest/FileDocTest.js~describe42",
    "testDepth": 1,
    "longname": "src/BuilderTest/FileDocTest.js~describe42.it43",
    "access": null,
    "description": "has source code.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{FileDocBuilder#exec}"
      },
      {
        "tagName": "@test",
        "tagValue": "{FileDocBuilder#_buildFileDoc}"
      }
    ],
    "testTargets": [
      "FileDocBuilder#exec",
      "FileDocBuilder#_buildFileDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/FunctionDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/FunctionDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {SingleDocBuilder} */\ndescribe('MyFunction:', ()=>{\n  let doc = readDoc('function/index.html');\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has summary.', ()=>{\n    find(doc, '[data-ice=\"summary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public myFunction1() this is myFunction1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public myFunction2(p1: number, p2: string) this is myFunction2 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public myFunction3(): number this is myFunction3 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public myFunction4(p1: number, p2: string): number this is myFunction4 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public myFunction5(p1: number, p2: string): Object this is myFunction5 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6)', 'public * myFunction6(): Generator this is myFunction6 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7)', 'public myFunction7(p1: *[], p2: number[], p3: {}, p4: {\"a\": number, \"b\": string}): *');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8)', 'public myFunction8(p1: *)');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(9)', 'public myFunctionSeparateExport1(p1: number) this is myFunctionSeparateExport1.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(10)', 'public myFunctionSeparateExport2(p1: number) this is myFunctionSeparateExport2.');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'function/index.html#static-function-myFunction1', 'href');\n    });\n  });\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has detail.', ()=>{\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction1', 'public myFunction1()');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myFunction1 from 'esdoc-test-fixture/out/src/myFunction.js'\");\n\n      find(doc, '[data-ice=\"example\"]', (doc)=>{\n        assert.includes(doc, 'div.example-doc:nth-of-type(1)', 'This is example caption');\n        assert.includes(doc, 'div.example-doc:nth-of-type(1)', 'let foo = 123;');\n\n        assert.includes(doc, 'div.example-doc:nth-of-type(2)', 'let bar = 456;');\n      });\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction2', 'public myFunction2(p1: number, p2: string)');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myFunction2} from 'esdoc-test-fixture/out/src/myFunction.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(3)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction3', 'public myFunction3(): number');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myFunction3} from 'esdoc-test-fixture/out/src/myFunction.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(4)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction4', 'public myFunction4(p1: number, p2: string): number');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(5)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction5', 'public myFunction5(p1: number, p2: string): Object');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(6)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction6', 'public * myFunction6(): Generator');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(7)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction7', 'public myFunction7(p1: *[], p2: number[], p3: {}, p4: {\"a\": number, \"b\": string}): *');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(8)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunction8', 'public myFunction8(p1: *)');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(9)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunctionSeparateExport1', 'public myFunctionSeparateExport1(p1: number)');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myFunctionSeparateExport1 from 'esdoc-test-fixture/out/src/myFunction.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(10)', (doc)=>{\n      assert.includes(doc, '#static-function-myFunctionSeparateExport2', 'public myFunctionSeparateExport2(p1: number)');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myFunctionSeparateExport2} from 'esdoc-test-fixture/out/src/myFunction.js'\");\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe44",
    "testId": 44,
    "memberof": "src/BuilderTest/FunctionDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/FunctionDocTest.js~describe44",
    "access": null,
    "description": "MyFunction:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "src/BuilderTest/FunctionDocTest.js~describe44",
    "testDepth": 1,
    "longname": "src/BuilderTest/FunctionDocTest.js~describe44.it45",
    "access": null,
    "description": "has summary.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it46",
    "testId": 46,
    "memberof": "src/BuilderTest/FunctionDocTest.js~describe44",
    "testDepth": 1,
    "longname": "src/BuilderTest/FunctionDocTest.js~describe44.it46",
    "access": null,
    "description": "has detail.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/IdentifiersDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/IdentifiersDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {IdentifiersDocBuilder} */\ndescribe('Identifiers:', ()=> {\n  let doc = readDoc('identifiers.html');\n\n  /** @test {IdentifiersDocBuilder#_buildIdentifierDoc} */\n  it('has class summary.', ()=>{\n    find(doc, '[data-ice=\"classSummary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public MyClass1 this class was deprecated. use MyClass1Ex instead of this class. this class is experimental. this class is dangerous. this is MyClass1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(24)', 'public SuperMyClass1 this is SuperMyClass1.');\n    });\n  });\n\n  /** @test {IdentifiersDocBuilder#_buildIdentifierDoc} */\n  it('has interface summary.', ()=>{\n    find(doc, '[data-ice=\"interfaceSummary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public MyInterface3 this is MyInterface3 desc.');\n    });\n  });\n\n  /** @test {IdentifiersDocBuilder#_buildIdentifierDoc} */\n  it('has function summary.', ()=>{\n    find(doc, '[data-ice=\"functionSummary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public myFunction1() this is myFunction1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public myFunction5(p1: number, p2: string): Object this is myFunction5 desc.');\n    });\n  });\n\n  /** @test {IdentifiersDocBuilder#_buildIdentifierDoc} */\n  it('has variable summary.', ()=>{\n    find(doc, '[data-ice=\"variableSummary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public myExport1: MyExport1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7)', 'public myVariable1: Object this is myVariable1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(9)', 'public myVariable3: number this is myVariable3 desc.');\n    });\n  });\n\n  /** @test {IdentifiersDocBuilder#_buildIdentifierDoc} */\n  it('has typedef summary.', ()=>{\n    find(doc, '[data-ice=\"typedefSummary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public MyTypedef1: Object this is MyTypedef1 desc.');\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe47",
    "testId": 47,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "access": null,
    "description": "Identifiers:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "testDepth": 1,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47.it48",
    "access": null,
    "description": "has class summary.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder#_buildIdentifierDoc}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder#_buildIdentifierDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it49",
    "testId": 49,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "testDepth": 1,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47.it49",
    "access": null,
    "description": "has interface summary.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder#_buildIdentifierDoc}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder#_buildIdentifierDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it50",
    "testId": 50,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "testDepth": 1,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47.it50",
    "access": null,
    "description": "has function summary.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder#_buildIdentifierDoc}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder#_buildIdentifierDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it51",
    "testId": 51,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "testDepth": 1,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47.it51",
    "access": null,
    "description": "has variable summary.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder#_buildIdentifierDoc}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder#_buildIdentifierDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it52",
    "testId": 52,
    "memberof": "src/BuilderTest/IdentifiersDocTest.js~describe47",
    "testDepth": 1,
    "longname": "src/BuilderTest/IdentifiersDocTest.js~describe47.it52",
    "access": null,
    "description": "has typedef summary.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IdentifiersDocBuilder#_buildIdentifierDoc}"
      }
    ],
    "testTargets": [
      "IdentifiersDocBuilder#_buildIdentifierDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/IndexDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/IndexDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {IndexDocBuilder} */\ndescribe('Index:', ()=> {\n  let doc = readDoc('index.html');\n\n  /** @test {IndexDocBuilder#_buildIndexDoc} */\n  it('has README.md', ()=>{\n    assert.includes(doc, '[data-ice=\"index\"]', 'this is ESDoc Test Fixture README.');\n  });\n\n  /** @test {IndexDocBuilder#_buildIndexDoc} */\n  it('has coverage badge', ()=>{\n    assert.includes(doc, '.esdoc-coverage .esdoc-coverage-ratio', '86%');\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe53",
    "testId": 53,
    "memberof": "src/BuilderTest/IndexDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/IndexDocTest.js~describe53",
    "access": null,
    "description": "Index:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IndexDocBuilder}"
      }
    ],
    "testTargets": [
      "IndexDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it54",
    "testId": 54,
    "memberof": "src/BuilderTest/IndexDocTest.js~describe53",
    "testDepth": 1,
    "longname": "src/BuilderTest/IndexDocTest.js~describe53.it54",
    "access": null,
    "description": "has README.md",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IndexDocBuilder#_buildIndexDoc}"
      }
    ],
    "testTargets": [
      "IndexDocBuilder#_buildIndexDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "src/BuilderTest/IndexDocTest.js~describe53",
    "testDepth": 1,
    "longname": "src/BuilderTest/IndexDocTest.js~describe53.it55",
    "access": null,
    "description": "has coverage badge",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{IndexDocBuilder#_buildIndexDoc}"
      }
    ],
    "testTargets": [
      "IndexDocBuilder#_buildIndexDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/NavDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/NavDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {DocBuilder#_buildNavDoc} */\ndescribe('Nav:', ()=> {\n  let doc = readDoc('index.html');\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has class nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"classWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"classDoc\"]:nth-of-type(4)', 'MyClass1');\n      assert.includes(doc, '[data-ice=\"classDoc\"]:nth-of-type(4) a', 'class/src/MyClass.js~MyClass1.html', 'href');\n    });\n  });\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has interface nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"interfaceWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"interfaceDoc\"]:nth-of-type(2)', 'MyInterface1');\n      assert.includes(doc, '[data-ice=\"interfaceDoc\"]:nth-of-type(2) a', 'class/src/MyInterface.js~MyInterface1.html', 'href');\n    });\n  });\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has function nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"functionWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"functionDoc\"]:nth-of-type(1)', 'myFunction1');\n      assert.includes(doc, '[data-ice=\"functionDoc\"]:nth-of-type(1) a', 'function/index.html#static-function-myFunction1', 'href');\n    });\n  });\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has variable nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"variableWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"variableDoc\"]:nth-of-type(1)', 'myExport1');\n      assert.includes(doc, '[data-ice=\"variableDoc\"]:nth-of-type(7)', 'myVariable1');\n      assert.includes(doc, '[data-ice=\"variableDoc\"]:nth-of-type(7) a', 'variable/index.html#static-variable-myVariable1', 'href');\n    });\n  });\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has typedef nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"typedefWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"typedefDoc\"]:nth-of-type(1)', 'MyTypedef1');\n      assert.includes(doc, '[data-ice=\"typedefDoc\"]:nth-of-type(1) a', 'typedef/index.html#static-typedef-MyTypedef1', 'href');\n    });\n  });\n\n  /** @test {DocBuilder#_buildNavDoc} */\n  it('has external nav.', ()=>{\n    find(doc, '[data-ice=\"nav\"] [data-ice=\"externalWrap\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"externalDoc\"]:nth-of-type(1)', 'MyError2');\n      assert.includes(doc, '[data-ice=\"externalDoc\"]:nth-of-type(1) a', 'example.com', 'href');\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe56",
    "testId": 56,
    "memberof": "src/BuilderTest/NavDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/NavDocTest.js~describe56",
    "access": null,
    "description": "Nav:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it57",
    "access": null,
    "description": "has class nav.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it58",
    "testId": 58,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it58",
    "access": null,
    "description": "has interface nav.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it59",
    "access": null,
    "description": "has function nav.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it60",
    "access": null,
    "description": "has variable nav.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it61",
    "testId": 61,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it61",
    "access": null,
    "description": "has typedef nav.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "src/BuilderTest/NavDocTest.js~describe56",
    "testDepth": 1,
    "longname": "src/BuilderTest/NavDocTest.js~describe56.it62",
    "access": null,
    "description": "has external nav.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{DocBuilder#_buildNavDoc}"
      }
    ],
    "testTargets": [
      "DocBuilder#_buildNavDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/TestDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/TestDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {TestDocBuilder} */\ndescribe('TestDocBuilder:', ()=> {\n  let doc = readDoc('test.html');\n\n  /** @test {TestDocBuilder#_buildTestDescribeDocHTML} */\n  it('has test description.', ()=> {\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Use describe style mocha interface');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Use it style mocha interface');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Nested describe');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Nested it in describe');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Use context style mocha interface');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Nested it in context');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Use suite style mocha interface');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Use test style mocha interface');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Nested suite');\n    assert.includes(doc, '[data-ice=\"tests\"]', 'Nested test');\n  });\n\n  /** @test {TestDocBuilder#_buildTestDescribeDocHTML} */\n  it('has test target.', ()=>{\n    assert.includes(doc, '[data-ice=\"tests\"] tr:nth-of-type(1) td:nth-of-type(2)', 'ClassDocBuilder');\n    assert.includes(doc, '[data-ice=\"tests\"] tr:nth-of-type(1) td:nth-of-type(2) a', 'class/src/ForTestDoc/ClassDocBuilder.js~ClassDocBuilder.html', 'href');\n\n    assert.includes(doc, '[data-ice=\"tests\"] tr:nth-of-type(3) td:nth-of-type(2)', 'ClassDocBuilder#_buildClassDoc');\n    assert.includes(doc, '[data-ice=\"tests\"] tr:nth-of-type(3) td:nth-of-type(2) a', 'class/src/ForTestDoc/ClassDocBuilder.js~ClassDocBuilder.html#instance-method-_buildClassDoc', 'href');\n  });\n});\n\ndescribe('Identifier to Test:', ()=>{\n  /** @test {ClassDocBuilder} */\n  describe('ClassDocBuilder:', ()=>{\n    let doc = readDoc('class/src/ForTestDoc/ClassDocBuilder.js~ClassDocBuilder.html');\n\n    /** @test {ClassDocBuilder#_buildClassDoc} */\n    it('has test', ()=>{\n      assert.includes(doc, '.self-detail [data-ice=\"test\"]:nth-of-type(1)', 'MyClass1:');\n      assert.includes(doc, '.self-detail [data-ice=\"test\"]:nth-of-type(1) a', 'test-file/src/BuilderTest/ClassDocTest.js.html#lineNumber4', 'href');\n    });\n  });\n});\n\n/** @test {TestDocFactory#_pushForMocha} */\ndescribe('Use describe style mocha interface', ()=>{\n  it('Use it style mocha interface', ()=>{\n  });\n\n  describe('Nested describe', ()=>{\n    it('Nested it in describe', ()=>{\n    });\n  });\n\n  context('Use context style mocha interface', ()=>{\n    it('Nested it in context', ()=>{\n    });\n  });\n});\n\nlet suite = describe;\nlet test = it;\n/** @test {TestDocFactory#_pushForMocha} */\nsuite('Use suite style mocha interface', ()=>{\n  test('Use test style mocha interface', ()=>{\n  });\n\n  suite('Nested suite', ()=>{\n    test('Nested test', ()=>{\n    });\n  })\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe63",
    "testId": 63,
    "memberof": "src/BuilderTest/TestDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/TestDocTest.js~describe63",
    "access": null,
    "description": "TestDocBuilder:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TestDocBuilder}"
      }
    ],
    "testTargets": [
      "TestDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "src/BuilderTest/TestDocTest.js~describe63",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe63.it64",
    "access": null,
    "description": "has test description.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TestDocBuilder#_buildTestDescribeDocHTML}"
      }
    ],
    "testTargets": [
      "TestDocBuilder#_buildTestDescribeDocHTML"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it65",
    "testId": 65,
    "memberof": "src/BuilderTest/TestDocTest.js~describe63",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe63.it65",
    "access": null,
    "description": "has test target.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TestDocBuilder#_buildTestDescribeDocHTML}"
      }
    ],
    "testTargets": [
      "TestDocBuilder#_buildTestDescribeDocHTML"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe66",
    "testId": 66,
    "memberof": "src/BuilderTest/TestDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/TestDocTest.js~describe66",
    "access": null,
    "description": "Identifier to Test:",
    "lineNumber": 31
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe67",
    "testId": 67,
    "memberof": "src/BuilderTest/TestDocTest.js~describe66",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe66.describe67",
    "access": null,
    "description": "ClassDocBuilder:",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "src/BuilderTest/TestDocTest.js~describe66.describe67",
    "testDepth": 2,
    "longname": "src/BuilderTest/TestDocTest.js~describe66.describe67.it68",
    "access": null,
    "description": "has test",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDocBuilder#_buildClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDocBuilder#_buildClassDoc"
    ]
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe69",
    "testId": 69,
    "memberof": "src/BuilderTest/TestDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/TestDocTest.js~describe69",
    "access": null,
    "description": "Use describe style mocha interface",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TestDocFactory#_pushForMocha}"
      }
    ],
    "testTargets": [
      "TestDocFactory#_pushForMocha"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "src/BuilderTest/TestDocTest.js~describe69",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe69.it70",
    "access": null,
    "description": "Use it style mocha interface",
    "lineNumber": 46
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe71",
    "testId": 71,
    "memberof": "src/BuilderTest/TestDocTest.js~describe69",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe69.describe71",
    "access": null,
    "description": "Nested describe",
    "lineNumber": 49
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it72",
    "testId": 72,
    "memberof": "src/BuilderTest/TestDocTest.js~describe69.describe71",
    "testDepth": 2,
    "longname": "src/BuilderTest/TestDocTest.js~describe69.describe71.it72",
    "access": null,
    "description": "Nested it in describe",
    "lineNumber": 50
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "context73",
    "testId": 73,
    "memberof": "src/BuilderTest/TestDocTest.js~describe69",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~describe69.context73",
    "access": null,
    "description": "Use context style mocha interface",
    "lineNumber": 54
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "src/BuilderTest/TestDocTest.js~describe69.context73",
    "testDepth": 2,
    "longname": "src/BuilderTest/TestDocTest.js~describe69.context73.it74",
    "access": null,
    "description": "Nested it in context",
    "lineNumber": 55
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "suite75",
    "testId": 75,
    "memberof": "src/BuilderTest/TestDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/TestDocTest.js~suite75",
    "access": null,
    "description": "Use suite style mocha interface",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{TestDocFactory#_pushForMocha}"
      }
    ],
    "testTargets": [
      "TestDocFactory#_pushForMocha"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "test76",
    "testId": 76,
    "memberof": "src/BuilderTest/TestDocTest.js~suite75",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~suite75.test76",
    "access": null,
    "description": "Use test style mocha interface",
    "lineNumber": 64
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "suite77",
    "testId": 77,
    "memberof": "src/BuilderTest/TestDocTest.js~suite75",
    "testDepth": 1,
    "longname": "src/BuilderTest/TestDocTest.js~suite75.suite77",
    "access": null,
    "description": "Nested suite",
    "lineNumber": 67
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "test78",
    "testId": 78,
    "memberof": "src/BuilderTest/TestDocTest.js~suite75.suite77",
    "testDepth": 2,
    "longname": "src/BuilderTest/TestDocTest.js~suite75.suite77.test78",
    "access": null,
    "description": "Nested test",
    "lineNumber": 68
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/TypedefDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/TypedefDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {SingleDocBuilder} */\ndescribe('MyTypedef:', ()=> {\n  let doc = readDoc('typedef/index.html');\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has summary.', ()=>{\n    find(doc, '[data-ice=\"summary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public MyTypedef1: Object this is MyTypedef1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'typedef/index.html#static-typedef-MyTypedef1', 'href');\n    });\n  });\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has detail.', ()=> {\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=> {\n      assert.includes(doc, '#static-typedef-MyTypedef1', 'public MyTypedef1: Object');\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe79",
    "testId": 79,
    "memberof": "src/BuilderTest/TypedefDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/TypedefDocTest.js~describe79",
    "access": null,
    "description": "MyTypedef:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it80",
    "testId": 80,
    "memberof": "src/BuilderTest/TypedefDocTest.js~describe79",
    "testDepth": 1,
    "longname": "src/BuilderTest/TypedefDocTest.js~describe79.it80",
    "access": null,
    "description": "has summary.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it81",
    "testId": 81,
    "memberof": "src/BuilderTest/TypedefDocTest.js~describe79",
    "testDepth": 1,
    "longname": "src/BuilderTest/TypedefDocTest.js~describe79.it81",
    "access": null,
    "description": "has detail.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/VariableDocTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/VariableDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {SingleDocBuilder} */\ndescribe('MyVariable:', ()=> {\n  let doc = readDoc('variable/index.html');\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has summary.', ()=>{\n    find(doc, '[data-ice=\"summary\"]', (doc)=>{\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1)', 'public myExport1: MyExport1');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(2)', 'public myExport10: MyExport10');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(3)', 'public myExport2: MyExport2');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(4)', 'public myExport3: MyExport3');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(5)', 'public myExport4: MyExport4');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(6)', 'public myExport5: MyExport5');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(7)', 'public myVariable1: Object this is myVariable1 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(8)', 'public myVariable2: number this is myVariable2 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(9)', 'public myVariable3: number this is myVariable3 desc.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(10)', 'public myVariable4: number');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(11)', 'public myVariable5: *');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(12)', 'public myVariableSeparateExport1: {foo: number, bar: string} this is myVariableSeparateExport1.');\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(13)', 'public myVariableSeparateExport2: Object this is myVariableSeparateExport2.');\n\n      assert.includes(doc, '[data-ice=\"target\"]:nth-of-type(1) [data-ice=\"name\"] a', 'variable/index.html#static-variable-myExport1', 'href');\n    });\n  });\n\n  /** @test {SingleDocBuilder#_buildSingleDoc} */\n  it('has detail.', ()=> {\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(1)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport1', 'public myExport1: MyExport1');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myExport1 from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(2)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport10', 'public myExport10: MyExport10');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myExport10} from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(3)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport2', 'public myExport2: MyExport2');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myExport2 from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(4)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport3', 'public myExport3: MyExport3');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myExport3 from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(5)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport4', 'public myExport4: MyExport4');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myExport4} from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(6)', (doc)=> {\n      assert.includes(doc, '#static-variable-myExport5', 'public myExport5: MyExport5');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myExport5} from 'esdoc-test-fixture/out/src/Export.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(7)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariable1', 'public myVariable1: Object');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myVariable1 from 'esdoc-test-fixture/out/src/myVariable.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(8)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariable2', 'public myVariable2: number');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myVariable2} from 'esdoc-test-fixture/out/src/myVariable.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(9)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariable3', 'public myVariable3: number');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(10)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariable4', 'public myVariable4: number');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(11)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariable5', 'public myVariable5: *');\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(12)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariableSeparateExport1', 'public myVariableSeparateExport1: {foo: number, bar: string}');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import myVariableSeparateExport1 from 'esdoc-test-fixture/out/src/myVariable.js'\");\n    });\n\n    find(doc, '[data-ice=\"detail\"]:nth-of-type(13)', (doc)=> {\n      assert.includes(doc, '#static-variable-myVariableSeparateExport2', 'public myVariableSeparateExport2: Object');\n      assert.includes(doc, '[data-ice=\"importPath\"]', \"import {myVariableSeparateExport2} from 'esdoc-test-fixture/out/src/myVariable.js'\");\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe82",
    "testId": 82,
    "memberof": "src/BuilderTest/VariableDocTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/VariableDocTest.js~describe82",
    "access": null,
    "description": "MyVariable:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it83",
    "testId": 83,
    "memberof": "src/BuilderTest/VariableDocTest.js~describe82",
    "testDepth": 1,
    "longname": "src/BuilderTest/VariableDocTest.js~describe82.it83",
    "access": null,
    "description": "has summary.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "src/BuilderTest/VariableDocTest.js~describe82",
    "testDepth": 1,
    "longname": "src/BuilderTest/VariableDocTest.js~describe82.it84",
    "access": null,
    "description": "has detail.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SingleDocBuilder#_buildSingleDoc}"
      }
    ],
    "testTargets": [
      "SingleDocBuilder#_buildSingleDoc"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/BuilderTest/nAnonymousTest.js",
    "memberof": null,
    "longname": "src/BuilderTest/nAnonymousTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\ndescribe('Anonymous', ()=>{\n  /**\n   * @test {ClassDoc#@_name}\n   */\n  describe('Anonymous Class',()=>{\n    let doc = readDoc('class/src/nMyAnonymous.js~nMyAnonymous.html');\n\n    it('has anonymous class', ()=>{\n      assert.includes(doc, '.self-detail [data-ice=\"name\"]', 'nMyAnonymous');\n    });\n  });\n\n  /**\n   * @test {FunctionDoc#@_name}\n   */\n  describe('Anonymous Function',()=>{\n    let doc = readDoc('function/index.html');\n\n    it('has anonymous function', ()=>{\n      assert.includes(doc, '[data-ice=\"summary\"] [data-ice=\"target\"]:nth-of-type(11)', 'nMyAnonymous1');\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe85",
    "testId": 85,
    "memberof": "src/BuilderTest/nAnonymousTest.js",
    "testDepth": 0,
    "longname": "src/BuilderTest/nAnonymousTest.js~describe85",
    "access": null,
    "description": "Anonymous",
    "lineNumber": 3
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe86",
    "testId": 86,
    "memberof": "src/BuilderTest/nAnonymousTest.js~describe85",
    "testDepth": 1,
    "longname": "src/BuilderTest/nAnonymousTest.js~describe85.describe86",
    "access": null,
    "description": "Anonymous Class",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDoc#@_name}"
      }
    ],
    "testTargets": [
      "ClassDoc#@_name"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it87",
    "testId": 87,
    "memberof": "src/BuilderTest/nAnonymousTest.js~describe85.describe86",
    "testDepth": 2,
    "longname": "src/BuilderTest/nAnonymousTest.js~describe85.describe86.it87",
    "access": null,
    "description": "has anonymous class",
    "lineNumber": 10
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe88",
    "testId": 88,
    "memberof": "src/BuilderTest/nAnonymousTest.js~describe85",
    "testDepth": 1,
    "longname": "src/BuilderTest/nAnonymousTest.js~describe85.describe88",
    "access": null,
    "description": "Anonymous Function",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{FunctionDoc#@_name}"
      }
    ],
    "testTargets": [
      "FunctionDoc#@_name"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it89",
    "testId": 89,
    "memberof": "src/BuilderTest/nAnonymousTest.js~describe85.describe88",
    "testDepth": 2,
    "longname": "src/BuilderTest/nAnonymousTest.js~describe85.describe88.it89",
    "access": null,
    "description": "has anonymous function",
    "lineNumber": 21
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/DocTest/AbstractDocTest.js",
    "memberof": null,
    "longname": "src/DocTest/AbstractDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from '../util.js';\n\n/** @test {AbstractDoc} */\ndescribe('AbstractDoc:', ()=> {\n\n  /** @test {AbstractDoc#@_unknown} */\n  it('has unknown tag.', ()=> {\n    let doc = global.db.find({name: 'MyClass1'})[0];\n    assert.equal(doc.unknown.length, 1);\n    assert.equal(doc.unknown[0].tagName, '@foobar');\n    assert.equal(doc.unknown[0].tagValue, 'this is unknown tag.');\n  });\n\n  /** @test {AbstractDoc#@_undocument} */\n  it('has undocument tag.', ()=> {\n    let doc;\n\n    doc = global.db.find({name: 'method5', undocument: true})[0];\n    assert.equal(doc.undocument, true);\n\n    doc = global.db.find({name: 'method6', undocument: true})[0];\n    assert.equal(doc.undocument, true);\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe90",
    "testId": 90,
    "memberof": "src/DocTest/AbstractDocTest.js",
    "testDepth": 0,
    "longname": "src/DocTest/AbstractDocTest.js~describe90",
    "access": null,
    "description": "AbstractDoc:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AbstractDoc}"
      }
    ],
    "testTargets": [
      "AbstractDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it91",
    "testId": 91,
    "memberof": "src/DocTest/AbstractDocTest.js~describe90",
    "testDepth": 1,
    "longname": "src/DocTest/AbstractDocTest.js~describe90.it91",
    "access": null,
    "description": "has unknown tag.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AbstractDoc#@_unknown}"
      }
    ],
    "testTargets": [
      "AbstractDoc#@_unknown"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it92",
    "testId": 92,
    "memberof": "src/DocTest/AbstractDocTest.js~describe90",
    "testDepth": 1,
    "longname": "src/DocTest/AbstractDocTest.js~describe90.it92",
    "access": null,
    "description": "has undocument tag.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{AbstractDoc#@_undocument}"
      }
    ],
    "testTargets": [
      "AbstractDoc#@_undocument"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/DocTest/ClassDocTest.js",
    "memberof": null,
    "longname": "src/DocTest/ClassDocTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {assert} from '../util.js';\n\n/** @test {ClassDoc} */\ndescribe('ClassDoc:', ()=>{\n\n  /** @test {ClassDoc#@extends} */\n  it('can parse nested extend.', ()=>{\n    let doc = global.db.find({name: 'MyKiloClass'})[0];\n    assert.equal(doc.extends.length, 1);\n    assert.equal(doc.extends[0], \"tera~TeraClass.GigaClass.MegaClass\");\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe93",
    "testId": 93,
    "memberof": "src/DocTest/ClassDocTest.js",
    "testDepth": 0,
    "longname": "src/DocTest/ClassDocTest.js~describe93",
    "access": null,
    "description": "ClassDoc:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDoc}"
      }
    ],
    "testTargets": [
      "ClassDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "src/DocTest/ClassDocTest.js~describe93",
    "testDepth": 1,
    "longname": "src/DocTest/ClassDocTest.js~describe93.it94",
    "access": null,
    "description": "can parse nested extend.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ClassDoc#@extends}"
      }
    ],
    "testTargets": [
      "ClassDoc#@extends"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/UnitTest/ASTUtilTest.js",
    "memberof": null,
    "longname": "src/UnitTest/ASTUtilTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {readDoc, assert, find} from './../util.js';\n\n/** @test {ASTUtil} */\ndescribe('ASTUtil:', ()=> {\n  /** @test {ASTUtil.traverse} */\n  it('can traverse React JSX.', ()=> {\n    let doc = global.db.find({name: 'ReactJSXClass'})[0];\n    assert.equal(doc.name, 'ReactJSXClass');\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe95",
    "testId": 95,
    "memberof": "src/UnitTest/ASTUtilTest.js",
    "testDepth": 0,
    "longname": "src/UnitTest/ASTUtilTest.js~describe95",
    "access": null,
    "description": "ASTUtil:",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ASTUtil}"
      }
    ],
    "testTargets": [
      "ASTUtil"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it96",
    "testId": 96,
    "memberof": "src/UnitTest/ASTUtilTest.js~describe95",
    "testDepth": 1,
    "longname": "src/UnitTest/ASTUtilTest.js~describe95.it96",
    "access": null,
    "description": "can traverse React JSX.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ASTUtil.traverse}"
      }
    ],
    "testTargets": [
      "ASTUtil.traverse"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/UnitTest/CommentParserTest.js",
    "memberof": null,
    "longname": "src/UnitTest/CommentParserTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport CommentParser from '../../../src/Parser/CommentParser.js';\n\n/** @test {CommentParser} */\ndescribe('CommentParser:', ()=>{\n  /** @test {CommentParser.parse} */\n  it('can parse doc comment.', ()=>{\n    let value = `*\n* this is desc.\n* @tag1\n* @tag2 tag2 value\n* @tag3 tag3 value\n* tag3 second value\n*\n* @tag4 tag4 value\n*\n`;\n    let comment = {type: 'Block', value: value};\n    let tags = CommentParser.parse(comment);\n    assert.equal(tags.length, 5);\n    assert.deepEqual(tags[0], {tagName: '@desc', tagValue: 'this is desc.'});\n    assert.deepEqual(tags[1], {tagName: '@tag1', tagValue: ''});\n    assert.deepEqual(tags[2], {tagName: '@tag2', tagValue: 'tag2 value'});\n    assert.deepEqual(tags[3], {tagName: '@tag3', tagValue: 'tag3 value\\ntag3 second value'});\n    assert.deepEqual(tags[4], {tagName: '@tag4', tagValue: 'tag4 value'});\n  });\n\n    /** @test {CommentParser.parse} */\n  it('can parse doc comments with trailing tabs', ()=>{\n      let value = `*\n\\t* this is desc.\n\\t* @tag1\n\\t* @tag2 tag2 value\n\\t* @tag3 tag3 value\n\\t* tag3 second value\n\\t*\n\\t* @tag4 tag4 value\n\\t*\n`;\n    let comment = {type: 'Block', value: value};\n    let tags = CommentParser.parse(comment);\n    assert.equal(tags.length, 5);\n    assert.deepEqual(tags[0], {tagName: '@desc', tagValue: 'this is desc.'});\n    assert.deepEqual(tags[1], {tagName: '@tag1', tagValue: ''});\n    assert.deepEqual(tags[2], {tagName: '@tag2', tagValue: 'tag2 value'});\n    assert.deepEqual(tags[3], {tagName: '@tag3', tagValue: 'tag3 value\\ntag3 second value'});\n    assert.deepEqual(tags[4], {tagName: '@tag4', tagValue: 'tag4 value'});\n  });\n\n  /** @test {CommentParser.isESDoc} */\n  it('return empty with non doc comment.', ()=>{\n    let value = `\\\nthis is not doc comment.\n`;\n    let comment = {type: 'Block', value: value};\n    let tags = CommentParser.parse(comment);\n    assert.equal(tags.length, 0);\n  });\n\n  /** @test {CommentParser.parse} */\n  it('return empty with line comment.', ()=>{\n    let value = `this is line comment.`;\n    let comment = {type: 'Line', value: value};\n    let tags = CommentParser.parse(comment);\n    assert.equal(tags.length, 0);\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe97",
    "testId": 97,
    "memberof": "src/UnitTest/CommentParserTest.js",
    "testDepth": 0,
    "longname": "src/UnitTest/CommentParserTest.js~describe97",
    "access": null,
    "description": "CommentParser:",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CommentParser}"
      }
    ],
    "testTargets": [
      "CommentParser"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it98",
    "testId": 98,
    "memberof": "src/UnitTest/CommentParserTest.js~describe97",
    "testDepth": 1,
    "longname": "src/UnitTest/CommentParserTest.js~describe97.it98",
    "access": null,
    "description": "can parse doc comment.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CommentParser.parse}"
      }
    ],
    "testTargets": [
      "CommentParser.parse"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it99",
    "testId": 99,
    "memberof": "src/UnitTest/CommentParserTest.js~describe97",
    "testDepth": 1,
    "longname": "src/UnitTest/CommentParserTest.js~describe97.it99",
    "access": null,
    "description": "can parse doc comments with trailing tabs",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CommentParser.parse}"
      }
    ],
    "testTargets": [
      "CommentParser.parse"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it100",
    "testId": 100,
    "memberof": "src/UnitTest/CommentParserTest.js~describe97",
    "testDepth": 1,
    "longname": "src/UnitTest/CommentParserTest.js~describe97.it100",
    "access": null,
    "description": "return empty with non doc comment.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CommentParser.isESDoc}"
      }
    ],
    "testTargets": [
      "CommentParser.isESDoc"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "src/UnitTest/CommentParserTest.js~describe97",
    "testDepth": 1,
    "longname": "src/UnitTest/CommentParserTest.js~describe97.it101",
    "access": null,
    "description": "return empty with line comment.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{CommentParser.parse}"
      }
    ],
    "testTargets": [
      "CommentParser.parse"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/UnitTest/ESDocCLITest.js",
    "memberof": null,
    "longname": "src/UnitTest/ESDocCLITest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport ESDocCLI from '../../../src/ESDocCLI.js';\n\n/** @test {ESDocCLI} */\ndescribe('ESDocCLI:', ()=>{\n\n  /**\n   * @test {ESDocCLI#exec}\n   * @test {ESDocCLI#_createConfigFromJSONFile}\n   */\n  it('can execute with config file.', ()=>{\n    let cliPath = path.resolve('./src/cli.js');\n    let configPath = path.resolve('./test/fixture/esdoc-cli.json');\n    let argv = ['node', cliPath, '-c', configPath];\n    let cli = new ESDocCLI(argv);\n    cli.exec();\n    assert(true);\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe102",
    "testId": 102,
    "memberof": "src/UnitTest/ESDocCLITest.js",
    "testDepth": 0,
    "longname": "src/UnitTest/ESDocCLITest.js~describe102",
    "access": null,
    "description": "ESDocCLI:",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ESDocCLI}"
      }
    ],
    "testTargets": [
      "ESDocCLI"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it103",
    "testId": 103,
    "memberof": "src/UnitTest/ESDocCLITest.js~describe102",
    "testDepth": 1,
    "longname": "src/UnitTest/ESDocCLITest.js~describe102.it103",
    "access": null,
    "description": "can execute with config file.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ESDocCLI#exec}"
      },
      {
        "tagName": "@test",
        "tagValue": "{ESDocCLI#_createConfigFromJSONFile}"
      }
    ],
    "testTargets": [
      "ESDocCLI#exec",
      "ESDocCLI#_createConfigFromJSONFile"
    ]
  },
  {
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "src/UnitTest/ParamParserTest.js",
    "memberof": null,
    "longname": "src/UnitTest/ParamParserTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import assert from 'assert';\nimport ParamParser from '../../../src/Parser/ParamParser.js';\n\n/** @test {ParamParser} */\ndescribe('ParamParser:', ()=>{\n\n  /** @test {ParamParser.parseParamValue} */\n  it('parse param value.', ()=>{\n    let value = '{number} p1 this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    assert.equal(typeText, 'number');\n    assert.equal(paramName, 'p1');\n    assert.equal(paramDesc, 'this is desc');\n  });\n\n  /** @test {ParamParser.parseParamValue} */\n  it('parse param value with hyphen prefix.', ()=>{\n    let value = '{number} p1 - this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    assert.equal(typeText, 'number');\n    assert.equal(paramName, 'p1');\n    assert.equal(paramDesc, 'this is desc');\n  });\n\n  /** @test {ParamParser.parseParamValue} */\n  it('parse param value without param name', ()=>{\n    let value = '{number} this is desc';\n    let {typeText, paramDesc} = ParamParser.parseParamValue(value, true, false, true);\n    assert.equal(typeText, 'number');\n    assert.equal(paramDesc, 'this is desc');\n  });\n\n  /** @test {ParamParser.parseParamValue} */\n  it('parse param value without param desc', ()=>{\n    let value = '{number} p1';\n    let {typeText, paramName} = ParamParser.parseParamValue(value, true, true, false);\n    assert.equal(typeText, 'number');\n    assert.equal(paramName, 'p1');\n  });\n\n  /** @test {ParamParser.parseParamValue} */\n  it('parse param value with complex', ()=>{\n    let value = '{!(number|string|boolean[])} [p1=10] this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    assert.equal(typeText, '!(number|string|boolean[])');\n    assert.equal(paramName, '[p1=10]');\n    assert.equal(paramDesc, 'this is desc');\n  });\n\n  /** @test {ParamParser.parseParam} */\n  it('parse param.', ()=>{\n    let value = '{number} p1 this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    assert.deepEqual(result, {\n      nullable: null,\n      types: ['number'],\n      spread: false,\n      optional: false,\n      name: 'p1',\n      description: 'this is desc'\n    });\n  });\n\n  /** @test {ParamParser.parseParam} */\n  it('parse param with complex.', ()=>{\n    let value = '{?(number|string|boolean[])} [p1] this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    assert.deepEqual(result, {\n      nullable: true,\n      types: ['number', 'string', 'boolean[]'],\n      spread: false,\n      optional: true,\n      name: 'p1',\n      description: 'this is desc',\n    });\n  });\n\n  /** @test {ParamParser.parseParam} */\n  it('parse param with complex.', ()=>{\n    let value = '{!(number|string|boolean[])} [p1=10] this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    assert.deepEqual(result, {\n      nullable: false,\n      types: ['number', 'string', 'boolean[]'],\n      spread: false,\n      optional: true,\n      name: 'p1',\n      description: 'this is desc',\n      defaultValue: '10',\n      defaultRaw: 10\n    });\n  });\n\n  /** @test {ParamParser.parseParam} */\n  it('parse param with complex.', ()=>{\n    let value = '{...number} [p1=[10,20,30]] this is desc';\n    let {typeText, paramName, paramDesc} = ParamParser.parseParamValue(value);\n    let result = ParamParser.parseParam(typeText, paramName, paramDesc);\n    assert.deepEqual(result, {\n      nullable: null,\n      types: ['...number'],\n      spread: true,\n      optional: true,\n      name: 'p1',\n      description: 'this is desc',\n      defaultValue: '[10,20,30]',\n      defaultRaw: [10, 20, 30]\n    });\n  });\n});\n"
  },
  {
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe104",
    "testId": 104,
    "memberof": "src/UnitTest/ParamParserTest.js",
    "testDepth": 0,
    "longname": "src/UnitTest/ParamParserTest.js~describe104",
    "access": null,
    "description": "ParamParser:",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser}"
      }
    ],
    "testTargets": [
      "ParamParser"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it105",
    "testId": 105,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it105",
    "access": null,
    "description": "parse param value.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParamValue}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParamValue"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it106",
    "testId": 106,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it106",
    "access": null,
    "description": "parse param value with hyphen prefix.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParamValue}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParamValue"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it107",
    "testId": 107,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it107",
    "access": null,
    "description": "parse param value without param name",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParamValue}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParamValue"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it108",
    "testId": 108,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it108",
    "access": null,
    "description": "parse param value without param desc",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParamValue}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParamValue"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it109",
    "access": null,
    "description": "parse param value with complex",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParamValue}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParamValue"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it110",
    "testId": 110,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it110",
    "access": null,
    "description": "parse param.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParam}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParam"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it111",
    "testId": 111,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it111",
    "access": null,
    "description": "parse param with complex.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParam}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParam"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it112",
    "access": null,
    "description": "parse param with complex.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParam}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParam"
    ]
  },
  {
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it113",
    "testId": 113,
    "memberof": "src/UnitTest/ParamParserTest.js~describe104",
    "testDepth": 1,
    "longname": "src/UnitTest/ParamParserTest.js~describe104.it113",
    "access": null,
    "description": "parse param with complex.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ParamParser.parseParam}"
      }
    ],
    "testTargets": [
      "ParamParser.parseParam"
    ]
  }
]